!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
ACQUIRE_ITEM_DIA	ItemEvent.h	6;"	d
ALL_SUPERPOWER_INI	AppMacros.h	90;"	d
ALL_SUPERPOWER_SRCD	AppMacros.h	68;"	d
ANIMATION_MSG	CombatScene.cpp	11;"	d	file:
ATRG_ATT	AppMacros.h	110;"	d
ATRIG_NO_MAN_IMGNO	AppMacros.h	150;"	d
ATTACK	AnimLib.h	11;"	d
A_CSV_PATH	GlobalPath.h	80;"	d
A_TRIG	AppMacros.h	147;"	d
Ability	Ability.h	/^class Ability:public CCObject,public HurtAbl,public BuffAbl,public PeriodicAbl$/;"	c	inherits:CCObject,HurtAbl,BuffAbl,PeriodicAbl
Ability::CREATE_FUNC	Ability.h	/^	CREATE_FUNC(Ability);$/;"	p	class:Ability	access:public	signature:(Ability)
Ability::ID	Ability.h	/^	int ID;$/;"	m	class:Ability	access:public
Ability::ablType	Ability.h	/^	unsigned char ablType;$/;"	m	class:Ability	access:public
Ability::create	Ability.cpp	/^Ability* Ability::create(int type,int hurt,int stability,int lvlBuff,int hitRate,CCString description,int giveHurtActID,int receiveHurtActID)$/;"	f	class:Ability	signature:(int type,int hurt,int stability,int lvlBuff,int hitRate,CCString description,int giveHurtActID,int receiveHurtActID)
Ability::create	Ability.h	/^	static Ability* create(int type,int hurt,int stability,int lvlBuff,int hitRate,CCString description,int giveHurtActID,int receiveHurtActID);$/;"	p	class:Ability	access:public	signature:(int type,int hurt,int stability,int lvlBuff,int hitRate,CCString description,int giveHurtActID,int receiveHurtActID)
Ability::description	Ability.h	/^	CCString description;$/;"	m	class:Ability	access:public
Ability::giveHurtActID	Ability.h	/^	int giveHurtActID;$/;"	m	class:Ability	access:public
Ability::hitRate	Ability.h	/^	float hitRate;$/;"	m	class:Ability	access:public
Ability::init	Ability.cpp	/^bool Ability::init()$/;"	f	class:Ability	signature:()
Ability::init	Ability.h	/^	virtual bool init(); $/;"	p	class:Ability	access:public	signature:()
Ability::lvlBuff	Ability.h	/^	float lvlBuff;$/;"	m	class:Ability	access:public
Ability::magicPower	Ability.h	/^	int magicPower;$/;"	m	class:Ability	access:public
Ability::name	Ability.h	/^	CCString name;$/;"	m	class:Ability	access:public
Ability::recvHurtActID	Ability.h	/^	int recvHurtActID;$/;"	m	class:Ability	access:public
Ability::stability	Ability.h	/^	float stability;$/;"	m	class:Ability	access:public
AbilityButton	AbilityButton.h	/^class AbilityButton :public CCNode$/;"	c	inherits:CCNode
AbilityButton::BindButtonEvent	AbilityButton.cpp	/^void AbilityButton::BindButtonEvent()$/;"	f	class:AbilityButton	signature:()
AbilityButton::BindButtonEvent	AbilityButton.h	/^	void BindButtonEvent();$/;"	p	class:AbilityButton	access:public	signature:()
AbilityButton::CREATE_FUNC	AbilityButton.h	/^	CREATE_FUNC(AbilityButton);$/;"	p	class:AbilityButton	access:public	signature:(AbilityButton)
AbilityButton::CreateButton	AbilityButton.cpp	/^void AbilityButton::CreateButton()$/;"	f	class:AbilityButton	signature:()
AbilityButton::CreateButton	AbilityButton.h	/^	void CreateButton();$/;"	p	class:AbilityButton	access:public	signature:()
AbilityButton::LockButtonTouch	AbilityButton.cpp	/^void AbilityButton::LockButtonTouch()$/;"	f	class:AbilityButton	signature:()
AbilityButton::LockButtonTouch	AbilityButton.h	/^	void LockButtonTouch();$/;"	p	class:AbilityButton	access:public	signature:()
AbilityButton::UnlockButtonTouch	AbilityButton.cpp	/^void AbilityButton::UnlockButtonTouch()$/;"	f	class:AbilityButton	signature:()
AbilityButton::UnlockButtonTouch	AbilityButton.h	/^	void UnlockButtonTouch();$/;"	p	class:AbilityButton	access:public	signature:()
AbilityButton::fireBtn	AbilityButton.h	/^	CCControlButton* fireBtn; $/;"	m	class:AbilityButton	access:private
AbilityButton::fireDamage	AbilityButton.h	/^	int fireDamage,waterDamage,woodDamage;$/;"	m	class:AbilityButton	access:public
AbilityButton::fireTouchUpOutside	AbilityButton.cpp	/^void AbilityButton::fireTouchUpOutside(CCObject* pSender, CCControlEvent event)$/;"	f	class:AbilityButton	signature:(CCObject* pSender, CCControlEvent event)
AbilityButton::fireTouchUpOutside	AbilityButton.h	/^	void fireTouchUpOutside(CCObject* pSender, CCControlEvent event);$/;"	p	class:AbilityButton	access:public	signature:(CCObject* pSender, CCControlEvent event)
AbilityButton::firetitle	AbilityButton.h	/^	CCLabelTTF *firetitle;$/;"	m	class:AbilityButton	access:private
AbilityButton::getDamageByTag	AbilityButton.cpp	/^int AbilityButton::getDamageByTag(int tag)$/;"	f	class:AbilityButton	signature:(int tag)
AbilityButton::getDamageByTag	AbilityButton.h	/^	int getDamageByTag(int tag);$/;"	p	class:AbilityButton	access:public	signature:(int tag)
AbilityButton::init	AbilityButton.cpp	/^bool AbilityButton::init()$/;"	f	class:AbilityButton	signature:()
AbilityButton::init	AbilityButton.h	/^	virtual bool init();$/;"	p	class:AbilityButton	access:public	signature:()
AbilityButton::isTouch	AbilityButton.h	/^	bool isTouch;$/;"	m	class:AbilityButton	access:public
AbilityButton::setButtonPosition	AbilityButton.cpp	/^void AbilityButton::setButtonPosition(CCPoint pos)$/;"	f	class:AbilityButton	signature:(CCPoint pos)
AbilityButton::setButtonPosition	AbilityButton.h	/^	void setButtonPosition(CCPoint pos);$/;"	p	class:AbilityButton	access:public	signature:(CCPoint pos)
AbilityButton::tag	AbilityButton.h	/^	int tag;$/;"	m	class:AbilityButton	access:public
AbilityButton::updateDamage	AbilityButton.cpp	/^void AbilityButton::updateDamage(int level)$/;"	f	class:AbilityButton	signature:(int level)
AbilityButton::updateDamage	AbilityButton.h	/^	void updateDamage(int level);$/;"	p	class:AbilityButton	access:public	signature:(int level)
AbilityButton::waterBtn	AbilityButton.h	/^	CCControlButton* waterBtn; $/;"	m	class:AbilityButton	access:private
AbilityButton::waterDamage	AbilityButton.h	/^	int fireDamage,waterDamage,woodDamage;$/;"	m	class:AbilityButton	access:public
AbilityButton::waterTouchUpOutside	AbilityButton.cpp	/^void AbilityButton::waterTouchUpOutside(CCObject* pSender, CCControlEvent event)$/;"	f	class:AbilityButton	signature:(CCObject* pSender, CCControlEvent event)
AbilityButton::waterTouchUpOutside	AbilityButton.h	/^	void waterTouchUpOutside(CCObject* pSender, CCControlEvent event);$/;"	p	class:AbilityButton	access:public	signature:(CCObject* pSender, CCControlEvent event)
AbilityButton::watertitle	AbilityButton.h	/^	CCLabelTTF *watertitle;$/;"	m	class:AbilityButton	access:private
AbilityButton::woodBtn	AbilityButton.h	/^	CCControlButton* woodBtn; $/;"	m	class:AbilityButton	access:private
AbilityButton::woodDamage	AbilityButton.h	/^	int fireDamage,waterDamage,woodDamage;$/;"	m	class:AbilityButton	access:public
AbilityButton::woodTouchUpOutside	AbilityButton.cpp	/^void AbilityButton::woodTouchUpOutside(CCObject* pSender, CCControlEvent event)$/;"	f	class:AbilityButton	signature:(CCObject* pSender, CCControlEvent event)
AbilityButton::woodTouchUpOutside	AbilityButton.h	/^	void woodTouchUpOutside(CCObject* pSender, CCControlEvent event);$/;"	p	class:AbilityButton	access:public	signature:(CCObject* pSender, CCControlEvent event)
AbilityButton::woodtitle	AbilityButton.h	/^	CCLabelTTF *woodtitle;$/;"	m	class:AbilityButton	access:private
AnimLib	AnimLib.h	/^class AnimLib$/;"	c
AnimLib::getAction	AnimLib.cpp	/^CCFiniteTimeAction* AnimLib::getAction(int choice,CCSize size)$/;"	f	class:AnimLib	signature:(int choice,CCSize size)
AnimLib::getAction	AnimLib.h	/^	static CCFiniteTimeAction* getAction(int choice,CCSize size);$/;"	p	class:AnimLib	access:public	signature:(int choice,CCSize size)
AppDelegate	AppDelegate.cpp	/^AppDelegate::AppDelegate() {$/;"	f	class:AppDelegate	signature:()
AppDelegate	AppDelegate.h	/^    AppDelegate();$/;"	p	class:AppDelegate	access:public	signature:()
AppDelegate	AppDelegate.h	/^class  AppDelegate : private cocos2d::CCApplication$/;"	c	inherits:cocos2d::CCApplication
AppDelegate::AppDelegate	AppDelegate.cpp	/^AppDelegate::AppDelegate() {$/;"	f	class:AppDelegate	signature:()
AppDelegate::AppDelegate	AppDelegate.h	/^    AppDelegate();$/;"	p	class:AppDelegate	access:public	signature:()
AppDelegate::applicationDidEnterBackground	AppDelegate.cpp	/^void AppDelegate::applicationDidEnterBackground() {$/;"	f	class:AppDelegate	signature:()
AppDelegate::applicationDidEnterBackground	AppDelegate.h	/^    virtual void applicationDidEnterBackground();$/;"	p	class:AppDelegate	access:public	signature:()
AppDelegate::applicationDidFinishLaunching	AppDelegate.cpp	/^bool AppDelegate::applicationDidFinishLaunching() {$/;"	f	class:AppDelegate	signature:()
AppDelegate::applicationDidFinishLaunching	AppDelegate.h	/^    virtual bool applicationDidFinishLaunching();$/;"	p	class:AppDelegate	access:public	signature:()
AppDelegate::applicationWillEnterForeground	AppDelegate.cpp	/^void AppDelegate::applicationWillEnterForeground() {$/;"	f	class:AppDelegate	signature:()
AppDelegate::applicationWillEnterForeground	AppDelegate.h	/^    virtual void applicationWillEnterForeground();$/;"	p	class:AppDelegate	access:public	signature:()
AppDelegate::~AppDelegate	AppDelegate.cpp	/^AppDelegate::~AppDelegate() $/;"	f	class:AppDelegate	signature:()
AppDelegate::~AppDelegate	AppDelegate.h	/^    virtual ~AppDelegate();$/;"	p	class:AppDelegate	access:public	signature:()
BACKGROUND	AppMacros.h	32;"	d
BGNAME_IMG_PATH	GlobalPath.h	45;"	d
BGNAME_PATH_LEN	GlobalPath.h	46;"	d
BIGWINDOW	AppMacros.h	25;"	d
BLACK_IMG_PATH	GlobalPath.h	53;"	d
BLOODY_EVT	AppMacros.h	160;"	d
BLOOD_BG_IMG_PATH	GlobalPath.h	75;"	d
BLOOD_IMG_PATH	GlobalPath.h	33;"	d
BLOOD_IMG_PATH	GlobalPath.h	76;"	d
BUILDING2_MLYR	AppMacros.h	42;"	d
BUILDING_MLYR	AppMacros.h	43;"	d
BUTTONA	AppMacros.h	28;"	d
BUTTONA_IMG_PATH	GlobalPath.h	18;"	d
BUTTONBD_PATH	GlobalPath.h	11;"	d
BUTTONB_PATH	GlobalPath.h	10;"	d
BigWindow	BigWindow.h	/^class BigWindow:public Window$/;"	c	inherits:Window
BigWindow::CREATE_FUNC	BigWindow.h	/^	CREATE_FUNC(BigWindow);$/;"	p	class:BigWindow	access:public	signature:(BigWindow)
BigWindow::appear	BigWindow.cpp	/^void BigWindow::appear()$/;"	f	class:BigWindow	signature:()
BigWindow::appear	BigWindow.h	/^	void appear();$/;"	p	class:BigWindow	access:public	signature:()
BigWindow::disappear	BigWindow.cpp	/^void BigWindow::disappear()$/;"	f	class:BigWindow	signature:()
BigWindow::disappear	BigWindow.h	/^	void disappear();$/;"	p	class:BigWindow	access:public	signature:()
BigWindow::initSprite	BigWindow.cpp	/^void BigWindow::initSprite()$/;"	f	class:BigWindow	signature:()
BigWindow::initSprite	BigWindow.h	/^	void initSprite();$/;"	p	class:BigWindow	access:public	signature:()
BigWindow::load	BigWindow.cpp	/^void BigWindow::load(CCTMXTiledMap* map,CCDictionary *properties)$/;"	f	class:BigWindow	signature:(CCTMXTiledMap* map,CCDictionary *properties)
BigWindow::load	BigWindow.h	/^	void load(CCTMXTiledMap* map,CCDictionary *properties);$/;"	p	class:BigWindow	access:public	signature:(CCTMXTiledMap* map,CCDictionary *properties)
BigWindow::nextMove	BigWindow.cpp	/^void BigWindow::nextMove()$/;"	f	class:BigWindow	signature:()
BigWindow::nextMove	BigWindow.h	/^	void nextMove();$/;"	p	class:BigWindow	access:public	signature:()
BigWindow::respond	BigWindow.cpp	/^void BigWindow::respond(CCTMXTiledMap* map,CCDictionary *properties)$/;"	f	class:BigWindow	signature:(CCTMXTiledMap* map,CCDictionary *properties)
BigWindow::respond	BigWindow.h	/^	void respond(CCTMXTiledMap* map,CCDictionary *properties);$/;"	p	class:BigWindow	access:public	signature:(CCTMXTiledMap* map,CCDictionary *properties)
BindButtonEvent	AbilityButton.cpp	/^void AbilityButton::BindButtonEvent()$/;"	f	class:AbilityButton	signature:()
BindButtonEvent	AbilityButton.h	/^	void BindButtonEvent();$/;"	p	class:AbilityButton	access:public	signature:()
Blood	Blood.h	/^class Blood : public CCNode$/;"	c	inherits:CCNode
Blood::CREATE_FUNC	Blood.h	/^	CREATE_FUNC(Blood);$/;"	p	class:Blood	access:public	signature:(Blood)
Blood::bloodSlider	Blood.h	/^	CCControlSlider* bloodSlider;$/;"	m	class:Blood	access:private
Blood::init	Blood.cpp	/^bool Blood::init()$/;"	f	class:Blood	signature:()
Blood::init	Blood.h	/^	virtual bool init();$/;"	p	class:Blood	access:public	signature:()
Blood::setBloodSlider	Blood.cpp	/^void Blood::setBloodSlider()$/;"	f	class:Blood	signature:()
Blood::setBloodSlider	Blood.h	/^    void setBloodSlider();$/;"	p	class:Blood	access:public	signature:()
Blood::setCurrentBlood	Blood.cpp	/^void Blood::setCurrentBlood(float currentHp)$/;"	f	class:Blood	signature:(float currentHp)
Blood::setCurrentBlood	Blood.h	/^	void setCurrentBlood(float currentHp);$/;"	p	class:Blood	access:public	signature:(float currentHp)
Blood::setSliderPosition	Blood.cpp	/^void Blood::setSliderPosition(CCPoint pos)$/;"	f	class:Blood	signature:(CCPoint pos)
Blood::setSliderPosition	Blood.h	/^	void setSliderPosition(CCPoint pos);$/;"	p	class:Blood	access:public	signature:(CCPoint pos)
Blood::setTotalBlood	Blood.cpp	/^void Blood::setTotalBlood(float total)$/;"	f	class:Blood	signature:(float total)
Blood::setTotalBlood	Blood.h	/^	void setTotalBlood(float total);$/;"	p	class:Blood	access:public	signature:(float total)
BloodyEvent	BloodyEvent.h	/^class BloodyEvent: public Event$/;"	c	inherits:Event
BloodyEvent::CREATE_FUNC	BloodyEvent.h	/^	CREATE_FUNC(BloodyEvent);$/;"	p	class:BloodyEvent	access:public	signature:(BloodyEvent)
BloodyEvent::happen	BloodyEvent.cpp	/^void BloodyEvent::happen()$/;"	f	class:BloodyEvent	signature:()
BloodyEvent::happen	BloodyEvent.h	/^    void happen();$/;"	p	class:BloodyEvent	access:public	signature:()
BreakdawnEvent	NightfallEvent.h	/^class BreakdawnEvent$/;"	c
BreakdawnEvent::happen	NightfallEvent.cpp	/^void BreakdawnEvent::happen()$/;"	f	class:BreakdawnEvent	signature:()
BreakdawnEvent::happen	NightfallEvent.h	/^    void happen();$/;"	p	class:BreakdawnEvent	access:public	signature:()
BuffAbl	Ability.h	/^class BuffAbl$/;"	c
BuffAbl::buffRate	Ability.h	/^	float buffRate;$/;"	m	class:BuffAbl	access:public
BuffAbl::buffType	Ability.h	/^	int buffType;$/;"	m	class:BuffAbl	access:public
BuffAbl::buffValue	Ability.h	/^	int buffValue;$/;"	m	class:BuffAbl	access:public
Button	Button.h	/^class Button: public Controller,public CCLayer$/;"	c	inherits:Controller,CCLayer
Button::buttonImg	Button.h	/^	CCSprite* buttonImg;$/;"	m	class:Button	access:public
Button::ccTouchesEnded	Button.cpp	/^void Button::ccTouchesEnded(CCSet* pTouches, CCEvent *pEvent)$/;"	f	class:Button	signature:(CCSet* pTouches, CCEvent *pEvent)
Button::ccTouchesEnded	Button.h	/^	virtual void ccTouchesEnded(CCSet* pTouch, CCEvent *pEvent);$/;"	p	class:Button	access:public	signature:(CCSet* pTouch, CCEvent *pEvent)
Button::ccTouchesMoved	Button.cpp	/^void Button::ccTouchesMoved(CCSet* pTouches, CCEvent *pEvent)$/;"	f	class:Button	signature:(CCSet* pTouches, CCEvent *pEvent)
Button::ccTouchesMoved	Button.h	/^	virtual void ccTouchesMoved(CCSet* pTouch, CCEvent *pEvent);$/;"	p	class:Button	access:public	signature:(CCSet* pTouch, CCEvent *pEvent)
Button::disaDistr	Button.h	/^	int disaDistr;$/;"	m	class:Button	access:public
Button::enable	Button.h	/^	bool enable;$/;"	m	class:Button	access:public
Button::getBoundingBox	Button.cpp	/^CCRect Button::getBoundingBox()$/;"	f	class:Button	signature:()
Button::getBoundingBox	Button.h	/^	CCRect getBoundingBox();$/;"	p	class:Button	access:public	signature:()
Button::getDisaDistr	Button.cpp	/^int Button::getDisaDistr()$/;"	f	class:Button	signature:()
Button::getDisaDistr	Button.h	/^	int getDisaDistr();$/;"	p	class:Button	access:public	signature:()
Button::getSprite	Button.cpp	/^CCSprite* Button::getSprite()$/;"	f	class:Button	signature:()
Button::getSprite	Button.h	/^	CCSprite* getSprite();$/;"	p	class:Button	access:public	signature:()
Button::getTouchPos	Button.cpp	/^CCPoint Button::getTouchPos(CCSet* pTouches)$/;"	f	class:Button	signature:(CCSet* pTouches)
Button::getTouchPos	Button.h	/^	CCPoint getTouchPos(CCSet* pTouches);$/;"	p	class:Button	access:public	signature:(CCSet* pTouches)
Button::init	Button.cpp	/^bool Button::init()$/;"	f	class:Button	signature:()
Button::init	Button.h	/^	virtual bool init();$/;"	p	class:Button	access:public	signature:()
Button::initSprite	Button.cpp	/^void Button::initSprite()$/;"	f	class:Button	signature:()
Button::initSprite	Button.h	/^	virtual void initSprite();$/;"	p	class:Button	access:public	signature:()
ButtonA	ButtonA.h	/^class ButtonA: public Button$/;"	c	inherits:Button
ButtonA::CREATE_FUNC	ButtonA.h	/^	CREATE_FUNC(ButtonA);$/;"	p	class:ButtonA	access:public	signature:(ButtonA)
ButtonA::bigwindow	ButtonA.h	/^	BigWindow* bigwindow;$/;"	m	class:ButtonA	access:public
ButtonA::ccTouchBegan	ButtonA.cpp	/^bool ButtonA::ccTouchBegan(CCTouch* pTouch, CCEvent *pEvent)$/;"	f	class:ButtonA	signature:(CCTouch* pTouch, CCEvent *pEvent)
ButtonA::ccTouchBegan	ButtonA.h	/^	bool ccTouchBegan(CCTouch* pTouch, CCEvent *pEvent);$/;"	p	class:ButtonA	access:public	signature:(CCTouch* pTouch, CCEvent *pEvent)
ButtonA::ccTouchEnded	ButtonA.cpp	/^void ButtonA::ccTouchEnded(CCTouch* pTouch, CCEvent *pEvent)$/;"	f	class:ButtonA	signature:(CCTouch* pTouch, CCEvent *pEvent)
ButtonA::ccTouchEnded	ButtonA.h	/^	void ccTouchEnded(CCTouch* pTouch, CCEvent *pEvent);$/;"	p	class:ButtonA	access:public	signature:(CCTouch* pTouch, CCEvent *pEvent)
ButtonA::diawindow	ButtonA.h	/^	DiaWindow* diawindow;$/;"	m	class:ButtonA	access:public
ButtonA::disableDirButton	ButtonA.cpp	/^void ButtonA::disableDirButton()$/;"	f	class:ButtonA	signature:()
ButtonA::disableDirButton	ButtonA.h	/^	void disableDirButton();$/;"	p	class:ButtonA	access:private	signature:()
ButtonA::enableDirButton	ButtonA.cpp	/^void ButtonA::enableDirButton()$/;"	f	class:ButtonA	signature:()
ButtonA::enableDirButton	ButtonA.h	/^	void enableDirButton();$/;"	p	class:ButtonA	access:private	signature:()
ButtonA::hero	ButtonA.h	/^	Hero* hero;$/;"	m	class:ButtonA	access:public
ButtonA::init	ButtonA.cpp	/^bool ButtonA::init()$/;"	f	class:ButtonA	signature:()
ButtonA::init	ButtonA.h	/^	virtual bool init();$/;"	p	class:ButtonA	access:public	signature:()
ButtonA::initSprite	ButtonA.cpp	/^void ButtonA::initSprite()$/;"	f	class:ButtonA	signature:()
ButtonA::initSprite	ButtonA.h	/^	virtual void initSprite();$/;"	p	class:ButtonA	access:public	signature:()
ButtonA::setPointers	ButtonA.cpp	/^void ButtonA::setPointers(Hero* hero,DiaWindow* diawindow,BigWindow* bigwindow)$/;"	f	class:ButtonA	signature:(Hero* hero,DiaWindow* diawindow,BigWindow* bigwindow)
ButtonA::setPointers	ButtonA.h	/^	void setPointers(Hero* hero,DiaWindow* diawindow,BigWindow* bigwindow);$/;"	p	class:ButtonA	access:public	signature:(Hero* hero,DiaWindow* diawindow,BigWindow* bigwindow)
ButtonA::trigEvent	ButtonA.cpp	/^void ButtonA::trigEvent()$/;"	f	class:ButtonA	signature:()
ButtonA::trigEvent	ButtonA.h	/^	void trigEvent();$/;"	p	class:ButtonA	access:private	signature:()
CALL_BACK	LoadingScene.cpp	5;"	d	file:
CLOSEN_IMG_PATH	GlobalPath.h	41;"	d
CLOSES_IMG_PATH	GlobalPath.h	42;"	d
COMABL	Ability.h	9;"	d
COMBATLAYER	AppMacros.h	14;"	d
COMBAT_IMG_PATH	GlobalPath.h	30;"	d
CONFIRM_BACKGROUND_IMG_PATH	GlobalPath.h	43;"	d
CONFIRM_BUTTOM_IMG_PATH	GlobalPath.h	44;"	d
CONTENTSP	AppMacros.h	38;"	d
CONTROLPANELLAYER	AppMacros.h	13;"	d
CPlayer	CPlayer.h	/^class CPlayer:public Role$/;"	c	inherits:Role
CPlayer::CREATE_FUNC	CPlayer.h	/^	CREATE_FUNC(CPlayer);$/;"	p	class:CPlayer	access:public	signature:(CPlayer)
CPlayer::attack	CPlayer.h	/^	void attack();$/;"	p	class:CPlayer	access:public	signature:()
CPlayer::exp2Level	CPlayer.cpp	/^void CPlayer::exp2Level(int exp)$/;"	f	class:CPlayer	signature:(int exp)
CPlayer::exp2Level	CPlayer.h	/^	void exp2Level(int exp);$/;"	p	class:CPlayer	access:public	signature:(int exp)
CPlayer::init	CPlayer.cpp	/^bool CPlayer::init()$/;"	f	class:CPlayer	signature:()
CPlayer::init	CPlayer.h	/^	virtual bool init();$/;"	p	class:CPlayer	access:public	signature:()
CPlayer::player	CPlayer.h	/^	CCSprite* player;$/;"	m	class:CPlayer	access:private
CPlayer::setPlayer	CPlayer.cpp	/^void CPlayer::setPlayer()$/;"	f	class:CPlayer	signature:()
CPlayer::setPlayer	CPlayer.h	/^	void setPlayer();$/;"	p	class:CPlayer	access:public	signature:()
CREATE_FUNC	Ability.h	/^	CREATE_FUNC(Ability);$/;"	p	class:Ability	access:public	signature:(Ability)
CREATE_FUNC	AbilityButton.h	/^	CREATE_FUNC(AbilityButton);$/;"	p	class:AbilityButton	access:public	signature:(AbilityButton)
CREATE_FUNC	BigWindow.h	/^	CREATE_FUNC(BigWindow);$/;"	p	class:BigWindow	access:public	signature:(BigWindow)
CREATE_FUNC	Blood.h	/^	CREATE_FUNC(Blood);$/;"	p	class:Blood	access:public	signature:(Blood)
CREATE_FUNC	BloodyEvent.h	/^	CREATE_FUNC(BloodyEvent);$/;"	p	class:BloodyEvent	access:public	signature:(BloodyEvent)
CREATE_FUNC	BloodyEvent.h	/^	CREATE_FUNC(WateryEvent);$/;"	p	class:WateryEvent	access:public	signature:(WateryEvent)
CREATE_FUNC	ButtonA.h	/^	CREATE_FUNC(ButtonA);$/;"	p	class:ButtonA	access:public	signature:(ButtonA)
CREATE_FUNC	CPlayer.h	/^	CREATE_FUNC(CPlayer);$/;"	p	class:CPlayer	access:public	signature:(CPlayer)
CREATE_FUNC	CombatAnimation.h	/^	CREATE_FUNC(CombatAnimation);$/;"	p	class:CombatAnimation	access:public	signature:(CombatAnimation)
CREATE_FUNC	CombatScene.h	/^    CREATE_FUNC(Combat);$/;"	p	class:Combat	access:public	signature:(Combat)
CREATE_FUNC	ControlPanel.h	/^	CREATE_FUNC(ControlPanel);$/;"	p	class:ControlPanel	access:public	signature:(ControlPanel)
CREATE_FUNC	DiaEvent.h	/^    CREATE_FUNC(DiaEvent);$/;"	p	class:DiaEvent	access:public	signature:(DiaEvent)
CREATE_FUNC	DiaWindow.h	/^	CREATE_FUNC(DiaWindow);$/;"	p	class:DiaWindow	access:public	signature:(DiaWindow)
CREATE_FUNC	DirButton.h	/^	CREATE_FUNC(DirButton);$/;"	p	class:DirButton	access:public	signature:(DirButton)
CREATE_FUNC	DuelEvent.h	/^    CREATE_FUNC(DuelEvent);$/;"	p	class:DuelEvent	access:public	signature:(DuelEvent)
CREATE_FUNC	Event.h	/^	CREATE_FUNC(Event);$/;"	p	class:Event	access:public	signature:(Event)
CREATE_FUNC	GalleryScene.h	/^	CREATE_FUNC(Gallery);  $/;"	p	class:Gallery	access:public	signature:(Gallery)
CREATE_FUNC	GetShdwEvent.h	/^    CREATE_FUNC(GetShdwEvent);$/;"	p	class:GetShdwEvent	access:public	signature:(GetShdwEvent)
CREATE_FUNC	GetSuPEvent.h	/^    CREATE_FUNC(GetSuPEvent);$/;"	p	class:GetSuPEvent	access:public	signature:(GetSuPEvent)
CREATE_FUNC	GpsScene.h	/^	CREATE_FUNC(Gps);$/;"	p	class:Gps	access:public	signature:(Gps)
CREATE_FUNC	HelloWorldScene.h	/^    CREATE_FUNC(HelloWorld);$/;"	p	class:HelloWorld	access:public	signature:(HelloWorld)
CREATE_FUNC	Hero.h	/^    CREATE_FUNC(Hero);$/;"	p	class:Hero	access:public	signature:(Hero)
CREATE_FUNC	LoadNightEvent.h	/^    CREATE_FUNC(LoadNightEvent);$/;"	p	class:LoadNightEvent	access:public	signature:(LoadNightEvent)
CREATE_FUNC	LoadingScene.h	/^	CREATE_FUNC(LoadingScene);$/;"	p	class:LoadingScene	access:public	signature:(LoadingScene)
CREATE_FUNC	Menu.h	/^	CREATE_FUNC(Menu);$/;"	p	class:Menu	access:public	signature:(Menu)
CREATE_FUNC	MenuLayer.h	/^    CREATE_FUNC(MenuLayer);$/;"	p	class:MenuLayer	access:public	signature:(MenuLayer)
CREATE_FUNC	Monster.h	/^	CREATE_FUNC(Monster);$/;"	p	class:Monster	access:public	signature:(Monster)
CREATE_FUNC	Particles.h	/^	CREATE_FUNC(Particles);$/;"	p	class:Particles	access:public	signature:(Particles)
CREATE_FUNC	PlacenameWindow.h	/^	CREATE_FUNC(PlacenameWindow);$/;"	p	class:PlacenameWindow	access:public	signature:(PlacenameWindow)
CREATE_FUNC	ReloadEvent.h	/^    CREATE_FUNC(ReloadEvent);$/;"	p	class:ReloadEvent	access:public	signature:(ReloadEvent)
CREATE_FUNC	Role.h	/^	CREATE_FUNC(Role);$/;"	p	class:Role	access:public	signature:(Role)
CREATE_FUNC	ShadowingMan.h	/^    CREATE_FUNC(ShadowingMan);$/;"	p	class:ShadowingMan	access:public	signature:(ShadowingMan)
CREATE_FUNC	StandingMan.h	/^	CREATE_FUNC(StandingMan);$/;"	p	class:StandingMan	access:public	signature:(StandingMan)
CREATE_FUNC	Story.h	/^  CREATE_FUNC(StoryWorld);$/;"	p	class:StoryWorld	access:public	signature:(StoryWorld)
CREATE_FUNC	TalkManEvent.h	/^    CREATE_FUNC(TalkManEvent);$/;"	p	class:TalkManEvent	access:public	signature:(TalkManEvent)
CREATE_FUNC	TouchScreen.h	/^	CREATE_FUNC(TouchScreen);$/;"	p	class:TouchScreen	access:public	signature:(TouchScreen)
CREATE_FUNC	TurningMan.h	/^	CREATE_FUNC(TurningMan);$/;"	p	class:TurningMan	access:public	signature:(TurningMan)
CREATE_FUNC	WalkingMan.h	/^    CREATE_FUNC(WalkingMan);$/;"	p	class:WalkingMan	access:public	signature:(WalkingMan)
CREATE_FUNC	WebviewScene.h	/^    CREATE_FUNC(WebView);$/;"	p	class:WebView	access:public	signature:(WebView)
CREATE_FUNC	Welcome.h	/^    CREATE_FUNC(Welcome);$/;"	p	class:Welcome	access:public	signature:(Welcome)
ChangeFile	PlayReader.cpp	/^void PlayReader::ChangeFile(cocos2d::CCString filePath) {$/;"	f	class:PlayReader	signature:(cocos2d::CCString filePath)
ChangeFile	PlayReader.h	/^  void ChangeFile(cocos2d::CCString filePath);$/;"	p	class:PlayReader	access:public	signature:(cocos2d::CCString filePath)
CollisionType	AppMacros.h	/^typedef enum{kNone=1,kWall=17,kEvent=41}CollisionType;$/;"	t	typeref:enum:__anon2
Combat	CombatScene.h	/^class Combat : public cocos2d::CCLayer$/;"	c	inherits:cocos2d::CCLayer
Combat::CREATE_FUNC	CombatScene.h	/^    CREATE_FUNC(Combat);$/;"	p	class:Combat	access:public	signature:(Combat)
Combat::animationDone	CombatScene.h	/^	bool animationDone;$/;"	m	class:Combat	access:private
Combat::checkButtonTag	CombatScene.cpp	/^int Combat::checkButtonTag(int playerTag,int monsterTag)$/;"	f	class:Combat	signature:(int playerTag,int monsterTag)
Combat::checkButtonTag	CombatScene.h	/^	int checkButtonTag(int playerTag,int monsterTag);$/;"	p	class:Combat	access:public	signature:(int playerTag,int monsterTag)
Combat::checkGameOver	CombatScene.cpp	/^void Combat::checkGameOver()$/;"	f	class:Combat	signature:()
Combat::checkGameOver	CombatScene.h	/^	void checkGameOver();$/;"	p	class:Combat	access:public	signature:()
Combat::cplayer	CombatScene.h	/^	CPlayer* cplayer;$/;"	m	class:Combat	access:private
Combat::damage	CombatScene.h	/^	int damage;$/;"	m	class:Combat	access:private
Combat::damageCompute	CombatScene.cpp	/^int Combat::damageCompute(int winnerNum)$/;"	f	class:Combat	signature:(int winnerNum)
Combat::damageCompute	CombatScene.h	/^	int damageCompute(int winner);$/;"	p	class:Combat	access:public	signature:(int winner)
Combat::gameOver	CombatScene.cpp	/^void Combat::gameOver(CCObject* psender)$/;"	f	class:Combat	signature:(CCObject* psender)
Combat::gameOver	CombatScene.h	/^	void gameOver(CCObject* psender);$/;"	p	class:Combat	access:public	signature:(CCObject* psender)
Combat::gameWinner	CombatScene.h	/^	int gameWinner;$/;"	m	class:Combat	access:private
Combat::init	CombatScene.cpp	/^bool Combat::init()$/;"	f	class:Combat	signature:()
Combat::init	CombatScene.cpp	/^bool Combat::init(int monsterType)$/;"	f	class:Combat	signature:(int monsterType)
Combat::init	CombatScene.h	/^	bool init(int monsterType);$/;"	p	class:Combat	access:public	signature:(int monsterType)
Combat::init	CombatScene.h	/^    virtual bool init();  $/;"	p	class:Combat	access:public	signature:()
Combat::isPlayingAnimation	CombatScene.h	/^	bool isPlayingAnimation;$/;"	m	class:Combat	access:private
Combat::loseLabel	CombatScene.h	/^	CCLabelTTF* loseLabel;$/;"	m	class:Combat	access:private
Combat::mbloodLabel	CombatScene.h	/^	CCLabelTTF* mbloodLabel;$/;"	m	class:Combat	access:private
Combat::menuCloseCallback	CombatScene.h	/^    void menuCloseCallback(CCObject* pSender);$/;"	p	class:Combat	access:public	signature:(CCObject* pSender)
Combat::mlevelLabel	CombatScene.h	/^	CCLabelTTF* mlevelLabel;$/;"	m	class:Combat	access:private
Combat::monster	CombatScene.h	/^	Monster* monster;$/;"	m	class:Combat	access:private
Combat::monsterAttack	CombatScene.h	/^	Particles* monsterAttack;$/;"	m	class:Combat	access:private
Combat::monsterButtonTag	CombatScene.h	/^	int monsterButtonTag;$/;"	m	class:Combat	access:private
Combat::monsterType	CombatScene.h	/^	int monsterType;$/;"	m	class:Combat	access:public
Combat::monsterblood	CombatScene.h	/^	Blood* monsterblood;$/;"	m	class:Combat	access:private
Combat::monsterbutton	CombatScene.h	/^	AbilityButton* monsterbutton;$/;"	m	class:Combat	access:private
Combat::pbloodLabel	CombatScene.h	/^	CCLabelTTF* pbloodLabel;$/;"	m	class:Combat	access:private
Combat::playAnimation	CombatScene.cpp	/^void Combat::playAnimation(CCObject* psender)$/;"	f	class:Combat	signature:(CCObject* psender)
Combat::playAnimation	CombatScene.h	/^	void playAnimation(CCObject* psender);$/;"	p	class:Combat	access:public	signature:(CCObject* psender)
Combat::playerAttack	CombatScene.h	/^	Particles* playerAttack;$/;"	m	class:Combat	access:private
Combat::playerblood	CombatScene.h	/^	Blood* playerblood;$/;"	m	class:Combat	access:private
Combat::playerbutton	CombatScene.h	/^	AbilityButton* playerbutton;$/;"	m	class:Combat	access:private
Combat::plevelLabel	CombatScene.h	/^	CCLabelTTF* plevelLabel;$/;"	m	class:Combat	access:private
Combat::popCombat	CombatScene.cpp	/^void Combat::popCombat()$/;"	f	class:Combat	signature:()
Combat::popCombat	CombatScene.h	/^	void popCombat();$/;"	p	class:Combat	access:public	signature:()
Combat::scene	CombatScene.cpp	/^CCScene* Combat::scene()$/;"	f	class:Combat	signature:()
Combat::scene	CombatScene.h	/^    static cocos2d::CCScene* scene();$/;"	p	class:Combat	access:public	signature:()
Combat::setMonsterType	CombatScene.cpp	/^void Combat::setMonsterType(int monsterType)$/;"	f	class:Combat	signature:(int monsterType)
Combat::setMonsterType	CombatScene.h	/^	void setMonsterType(int monsterType);$/;"	p	class:Combat	access:public	signature:(int monsterType)
Combat::setSignal	CombatScene.cpp	/^void Combat::setSignal()$/;"	f	class:Combat	signature:()
Combat::setSignal	CombatScene.h	/^	void setSignal();$/;"	p	class:Combat	access:public	signature:()
Combat::update	CombatScene.cpp	/^void Combat::update(float delta)$/;"	f	class:Combat	signature:(float delta)
Combat::update	CombatScene.h	/^	virtual void update(float delta);$/;"	p	class:Combat	access:public	signature:(float delta)
Combat::updateBlood	CombatScene.cpp	/^void Combat::updateBlood(int winnerNum,int damage)$/;"	f	class:Combat	signature:(int winnerNum,int damage)
Combat::updateBlood	CombatScene.h	/^	void updateBlood(int winnerNum,int damage);$/;"	p	class:Combat	access:public	signature:(int winnerNum,int damage)
Combat::winLabel	CombatScene.h	/^	CCLabelTTF* winLabel;$/;"	m	class:Combat	access:private
Combat::winnerNum	CombatScene.h	/^	int winnerNum;$/;"	m	class:Combat	access:private
CombatAnimation	CombatAnimation.h	/^class CombatAnimation:public CCNode$/;"	c	inherits:CCNode
CombatAnimation::CREATE_FUNC	CombatAnimation.h	/^	CREATE_FUNC(CombatAnimation);$/;"	p	class:CombatAnimation	access:public	signature:(CombatAnimation)
CombatAnimation::fireParticle	CombatAnimation.cpp	/^void CombatAnimation::fireParticle(int direction)$/;"	f	class:CombatAnimation	signature:(int direction)
CombatAnimation::fireParticle	CombatAnimation.h	/^	void fireParticle(int direction);$/;"	p	class:CombatAnimation	access:public	signature:(int direction)
CombatEvent	CombatEvent.h	/^class CombatEvent: public Event$/;"	c	inherits:Event
CombatEvent::happen	CombatEvent.cpp	/^void CombatEvent::happen()$/;"	f	class:CombatEvent	signature:()
CombatEvent::happen	CombatEvent.h	/^    void happen();$/;"	p	class:CombatEvent	access:public	signature:()
CombatUnit	CombatUnit.h	/^class CombatUnit$/;"	c
CombatUnit::Hp	CombatUnit.h	/^   int Hp;$/;"	m	class:CombatUnit	access:public
CombatUnit::abilities	CombatUnit.h	/^   CCArray* abilities;$/;"	m	class:CombatUnit	access:public
CombatUnit::attack	CombatUnit.h	/^   int attack;$/;"	m	class:CombatUnit	access:public
CombatUnit::defence	CombatUnit.h	/^   int defence;$/;"	m	class:CombatUnit	access:public
CombatUnit::level	CombatUnit.h	/^   int level;$/;"	m	class:CombatUnit	access:public
CombatUnit::name	CombatUnit.h	/^   CCString name;$/;"	m	class:CombatUnit	access:public
CombatUnit::remainHp	CombatUnit.h	/^   int remainHp;$/;"	m	class:CombatUnit	access:public
CombatUnit::speAtt	CombatUnit.h	/^   int speAtt;$/;"	m	class:CombatUnit	access:public
CombatUnit::speDef	CombatUnit.h	/^   int speDef;$/;"	m	class:CombatUnit	access:public
CombatUnit::speed	CombatUnit.h	/^   int speed;$/;"	m	class:CombatUnit	access:public
ControlPanel	ControlPanel.h	/^class ControlPanel : public CCLayer$/;"	c	inherits:CCLayer
ControlPanel::CREATE_FUNC	ControlPanel.h	/^	CREATE_FUNC(ControlPanel);$/;"	p	class:ControlPanel	access:public	signature:(ControlPanel)
ControlPanel::bigwindow	ControlPanel.h	/^	BigWindow* bigwindow;$/;"	m	class:ControlPanel	access:public
ControlPanel::buttonA	ControlPanel.h	/^	ButtonA* buttonA;$/;"	m	class:ControlPanel	access:public
ControlPanel::ccTouchesBegan	ControlPanel.cpp	/^void ControlPanel::ccTouchesBegan(CCSet* pTouches, CCEvent *pEvent)$/;"	f	class:ControlPanel	signature:(CCSet* pTouches, CCEvent *pEvent)
ControlPanel::ccTouchesBegan	ControlPanel.h	/^	void ccTouchesBegan(CCSet* pTouch, CCEvent *pEvent);$/;"	p	class:ControlPanel	access:public	signature:(CCSet* pTouch, CCEvent *pEvent)
ControlPanel::ccTouchesEnded	ControlPanel.cpp	/^void ControlPanel::ccTouchesEnded(CCSet* pTouches, CCEvent *pEvent)$/;"	f	class:ControlPanel	signature:(CCSet* pTouches, CCEvent *pEvent)
ControlPanel::ccTouchesEnded	ControlPanel.h	/^	void ccTouchesEnded(CCSet* pTouch, CCEvent *pEvent);$/;"	p	class:ControlPanel	access:public	signature:(CCSet* pTouch, CCEvent *pEvent)
ControlPanel::ccTouchesMoved	ControlPanel.cpp	/^void ControlPanel::ccTouchesMoved(CCSet* pTouch, CCEvent *pEvent)$/;"	f	class:ControlPanel	signature:(CCSet* pTouch, CCEvent *pEvent)
ControlPanel::ccTouchesMoved	ControlPanel.h	/^	void ccTouchesMoved(CCSet* pTouch, CCEvent *pEvent);$/;"	p	class:ControlPanel	access:public	signature:(CCSet* pTouch, CCEvent *pEvent)
ControlPanel::create	ControlPanel.cpp	/^ControlPanel* ControlPanel::create(Map* map)$/;"	f	class:ControlPanel	signature:(Map* map)
ControlPanel::create	ControlPanel.h	/^	static ControlPanel* create(Map* map);$/;"	p	class:ControlPanel	access:public	signature:(Map* map)
ControlPanel::diawindow	ControlPanel.h	/^	DiaWindow* diawindow;$/;"	m	class:ControlPanel	access:public
ControlPanel::dirButton	ControlPanel.h	/^	Button* dirButton;$/;"	m	class:ControlPanel	access:public
ControlPanel::hero	ControlPanel.h	/^	Hero* hero;$/;"	m	class:ControlPanel	access:public
ControlPanel::init	ControlPanel.cpp	/^bool ControlPanel::init()$/;"	f	class:ControlPanel	signature:()
ControlPanel::init	ControlPanel.h	/^	bool init();$/;"	p	class:ControlPanel	access:public	signature:()
ControlPanel::initControllerListeners	ControlPanel.cpp	/^void ControlPanel::initControllerListeners()$/;"	f	class:ControlPanel	signature:()
ControlPanel::initControllerListeners	ControlPanel.h	/^	void initControllerListeners();$/;"	p	class:ControlPanel	access:private	signature:()
ControlPanel::initControllers	ControlPanel.cpp	/^void ControlPanel::initControllers()$/;"	f	class:ControlPanel	signature:()
ControlPanel::initControllers	ControlPanel.h	/^	void initControllers();$/;"	p	class:ControlPanel	access:private	signature:()
ControlPanel::initNightBg	ControlPanel.cpp	/^void ControlPanel::initNightBg()$/;"	f	class:ControlPanel	signature:()
ControlPanel::initNightBg	ControlPanel.h	/^	void initNightBg();$/;"	p	class:ControlPanel	access:private	signature:()
ControlPanel::map	ControlPanel.h	/^	Map* map;$/;"	m	class:ControlPanel	access:public
ControlPanel::plcnwindow	ControlPanel.h	/^	PlacenameWindow* plcnwindow;$/;"	m	class:ControlPanel	access:public
ControlPanel::setMap	ControlPanel.cpp	/^void ControlPanel::setMap(Map* map)$/;"	f	class:ControlPanel	signature:(Map* map)
ControlPanel::setMap	ControlPanel.h	/^	void setMap(Map* map);$/;"	p	class:ControlPanel	access:public	signature:(Map* map)
ControlPanel::touchScreen	ControlPanel.h	/^	TouchScreen* touchScreen;$/;"	m	class:ControlPanel	access:public
Controllable	Controllable.h	/^class Controllable:public ControllerListener {$/;"	c	inherits:ControllerListener
Controllable::controller	Controllable.h	/^    Controller* controller;$/;"	m	class:Controllable	access:protected
Controllable::endRespond	Controllable.cpp	/^void Controllable::endRespond()$/;"	f	class:Controllable	signature:()
Controllable::endRespond	Controllable.h	/^	virtual void endRespond();$/;"	p	class:Controllable	access:public	signature:()
Controllable::respond	Controllable.cpp	/^void Controllable::respond(int dir)$/;"	f	class:Controllable	signature:(int dir)
Controllable::respond	Controllable.h	/^	virtual void respond(int dir);$/;"	p	class:Controllable	access:public	signature:(int dir)
Controllable::setController	Controllable.cpp	/^void Controllable::setController( Controller* controller ) {$/;"	f	class:Controllable	signature:( Controller* controller )
Controllable::setController	Controllable.h	/^    void setController(Controller* controller);$/;"	p	class:Controllable	access:public	signature:(Controller* controller)
Controller	Controller.h	/^class Controller{$/;"	c
Controller::controllerListener	Controller.h	/^    ControllerListener* controllerListener;$/;"	m	class:Controller	access:protected
Controller::setControllerListener	Controller.h	/^    void setControllerListener(ControllerListener* controllerListener);$/;"	p	class:Controller	access:public	signature:(ControllerListener* controllerListener)
Controller::setControllerListener	Cotroller.cpp	/^void Controller::setControllerListener( ControllerListener* controllerListener ) {$/;"	f	class:Controller	signature:( ControllerListener* controllerListener )
ControllerListener	ControllerListener.h	/^class ControllerListener {$/;"	c
ControllerListener::endRespond	ControllerListener.cpp	/^void ControllerListener::endRespond()$/;"	f	class:ControllerListener	signature:()
ControllerListener::endRespond	ControllerListener.h	/^	virtual void endRespond();$/;"	p	class:ControllerListener	access:public	signature:()
ControllerListener::hasTouchEnded	ControllerListener.cpp	/^bool ControllerListener::hasTouchEnded()$/;"	f	class:ControllerListener	signature:()
ControllerListener::hasTouchEnded	ControllerListener.h	/^	virtual bool hasTouchEnded();$/;"	p	class:ControllerListener	access:public	signature:()
ControllerListener::respond	ControllerListener.cpp	/^void ControllerListener::respond(int dir)$/;"	f	class:ControllerListener	signature:(int dir)
ControllerListener::respond	ControllerListener.h	/^	virtual void respond(int dir);$/;"	p	class:ControllerListener	access:public	signature:(int dir)
CreateButton	AbilityButton.cpp	/^void AbilityButton::CreateButton()$/;"	f	class:AbilityButton	signature:()
CreateButton	AbilityButton.h	/^	void CreateButton();$/;"	p	class:AbilityButton	access:public	signature:()
CsvUtil	CsvUtil.h	/^class CsvUtil : public CCObject {$/;"	c	inherits:CCObject
CsvUtil::findValueInWithLine	CsvUtil.cpp	/^const int CsvUtil::findValueInWithLine( const char* chValue, int iValueCol, const char* csvFilePath ) {$/;"	f	class:CsvUtil	signature:( const char* chValue, int iValueCol, const char* csvFilePath )
CsvUtil::findValueInWithLine	CsvUtil.h	/^    const int findValueInWithLine(const char* chValue, int iValueCol, const char* csvFilePath);$/;"	p	class:CsvUtil	access:public	signature:(const char* chValue, int iValueCol, const char* csvFilePath)
CsvUtil::get	CsvUtil.cpp	/^const char* CsvUtil::get( int iRow, int iCol, const char* csvFilePath ) {$/;"	f	class:CsvUtil	signature:( int iRow, int iCol, const char* csvFilePath )
CsvUtil::get	CsvUtil.h	/^    const char* get(int iRow, int iCol, const char* csvFilePath);$/;"	p	class:CsvUtil	access:public	signature:(int iRow, int iCol, const char* csvFilePath)
CsvUtil::getFileRowColNum	CsvUtil.cpp	/^const CCSize CsvUtil::getFileRowColNum( const char* csvFilePath )$/;"	f	class:CsvUtil	signature:( const char* csvFilePath )
CsvUtil::getFileRowColNum	CsvUtil.h	/^    const CCSize getFileRowColNum(const char* csvFilePath);$/;"	p	class:CsvUtil	access:public	signature:(const char* csvFilePath)
CsvUtil::getFloat	CsvUtil.cpp	/^const float CsvUtil::getFloat( int iRow, int iCol, const char* csvFilePath ) {$/;"	f	class:CsvUtil	signature:( int iRow, int iCol, const char* csvFilePath )
CsvUtil::getFloat	CsvUtil.h	/^	const float getFloat(int iRow, int iCol, const char* csvFilePath);$/;"	p	class:CsvUtil	access:public	signature:(int iRow, int iCol, const char* csvFilePath)
CsvUtil::getInt	CsvUtil.cpp	/^const int CsvUtil::getInt( int iRow, int iCol, const char* csvFilePath ) {$/;"	f	class:CsvUtil	signature:( int iRow, int iCol, const char* csvFilePath )
CsvUtil::getInt	CsvUtil.h	/^	const int getInt(int iRow, int iCol, const char* csvFilePath);$/;"	p	class:CsvUtil	access:public	signature:(int iRow, int iCol, const char* csvFilePath)
CsvUtil::init	CsvUtil.cpp	/^bool CsvUtil::init(){$/;"	f	class:CsvUtil	signature:()
CsvUtil::init	CsvUtil.h	/^    bool init();$/;"	p	class:CsvUtil	access:public	signature:()
CsvUtil::loadFile	CsvUtil.cpp	/^void CsvUtil::loadFile( const char* sPath ){$/;"	f	class:CsvUtil	signature:( const char* sPath )
CsvUtil::loadFile	CsvUtil.h	/^    void loadFile(const char* sPath);$/;"	p	class:CsvUtil	access:public	signature:(const char* sPath)
CsvUtil::mCsvDict	CsvUtil.h	/^    CCDictionary* mCsvDict;$/;"	m	class:CsvUtil	access:private
CsvUtil::mCsvUtil	CsvUtil.cpp	/^CsvUtil* CsvUtil::mCsvUtil = NULL;$/;"	m	class:CsvUtil	file:
CsvUtil::mCsvUtil	CsvUtil.h	/^    static CsvUtil* mCsvUtil;$/;"	m	class:CsvUtil	access:private
CsvUtil::releaseFile	CsvUtil.cpp	/^void CsvUtil::releaseFile( const char* sPath ){$/;"	f	class:CsvUtil	signature:( const char* sPath )
CsvUtil::releaseFile	CsvUtil.h	/^    void releaseFile(const char* sPath);$/;"	p	class:CsvUtil	access:public	signature:(const char* sPath)
CsvUtil::sharedCsvUtil	CsvUtil.cpp	/^CsvUtil* CsvUtil::sharedCsvUtil(){$/;"	f	class:CsvUtil	signature:()
CsvUtil::sharedCsvUtil	CsvUtil.h	/^    static CsvUtil* sharedCsvUtil();$/;"	p	class:CsvUtil	access:public	signature:()
DAYTIME_OPACITY	TimeUtil.cpp	5;"	d	file:
DEBUG_MODE	AppMacros.h	179;"	d
DEFAULT_BLOOD	Player.h	13;"	d
DEFUALT_DELIM	AppMacros.h	95;"	d
DIABOXSP	AppMacros.h	36;"	d
DIALOG_EVT	AppMacros.h	157;"	d
DIAWINDOW	AppMacros.h	26;"	d
DIAWINDOW_IMG_PATH	GlobalPath.h	20;"	d
DIRBUTTON	AppMacros.h	27;"	d
DIRBUTTON_IMG_PATH	GlobalPath.h	19;"	d
DOWN	AnimLib.h	9;"	d
DUEL_EVT	AppMacros.h	162;"	d
DUIHUAKUANG_IMG_PATH	GlobalPath.h	47;"	d
DiaEvent	DiaEvent.h	/^class DiaEvent: public Event$/;"	c	inherits:Event
DiaEvent::CREATE_FUNC	DiaEvent.h	/^    CREATE_FUNC(DiaEvent);$/;"	p	class:DiaEvent	access:public	signature:(DiaEvent)
DiaEvent::happen	DiaEvent.cpp	/^void DiaEvent::happen()$/;"	f	class:DiaEvent	signature:()
DiaEvent::happen	DiaEvent.h	/^    void happen();$/;"	p	class:DiaEvent	access:public	signature:()
DiaWindow	DiaWindow.h	/^class DiaWindow:public Window,public Controller$/;"	c	inherits:Window,Controller
DiaWindow::CREATE_FUNC	DiaWindow.h	/^	CREATE_FUNC(DiaWindow);$/;"	p	class:DiaWindow	access:public	signature:(DiaWindow)
DiaWindow::appear	DiaWindow.cpp	/^void DiaWindow::appear()$/;"	f	class:DiaWindow	signature:()
DiaWindow::appear	DiaWindow.h	/^	void appear();$/;"	p	class:DiaWindow	access:public	signature:()
DiaWindow::dialog	DiaWindow.h	/^	CCArray* dialog;$/;"	m	class:DiaWindow	access:private
DiaWindow::disappear	DiaWindow.cpp	/^void DiaWindow::disappear()$/;"	f	class:DiaWindow	signature:()
DiaWindow::disappear	DiaWindow.h	/^	void disappear();$/;"	p	class:DiaWindow	access:public	signature:()
DiaWindow::hasTouchEnded	DiaWindow.cpp	/^bool DiaWindow::hasTouchEnded()$/;"	f	class:DiaWindow	signature:()
DiaWindow::hasTouchEnded	DiaWindow.h	/^	bool hasTouchEnded();$/;"	p	class:DiaWindow	access:public	signature:()
DiaWindow::init	DiaWindow.cpp	/^bool DiaWindow::init()$/;"	f	class:DiaWindow	signature:()
DiaWindow::init	DiaWindow.h	/^	bool init();$/;"	p	class:DiaWindow	access:public	signature:()
DiaWindow::initSprite	DiaWindow.cpp	/^void DiaWindow::initSprite()$/;"	f	class:DiaWindow	signature:()
DiaWindow::initSprite	DiaWindow.h	/^	void initSprite();$/;"	p	class:DiaWindow	access:public	signature:()
DiaWindow::load	DiaWindow.cpp	/^void DiaWindow::load(CCArray* dialog)$/;"	f	class:DiaWindow	signature:(CCArray* dialog)
DiaWindow::load	DiaWindow.h	/^	void load(CCArray* dialog);$/;"	p	class:DiaWindow	access:public	signature:(CCArray* dialog)
DiaWindow::nNext	DiaWindow.h	/^	int nNext;$/;"	m	class:DiaWindow	access:private
DiaWindow::nStr	DiaWindow.h	/^	int nStr;$/;"	m	class:DiaWindow	access:private
DiaWindow::respond	DiaWindow.cpp	/^void DiaWindow::respond()$/;"	f	class:DiaWindow	signature:()
DiaWindow::respond	DiaWindow.h	/^	void respond();$/;"	p	class:DiaWindow	access:public	signature:()
DirButton	DirButton.h	/^class DirButton: public Button$/;"	c	inherits:Button
DirButton::CREATE_FUNC	DirButton.h	/^	CREATE_FUNC(DirButton);$/;"	p	class:DirButton	access:public	signature:(DirButton)
DirButton::ccTouchesBegan	DirButton.cpp	/^void DirButton::ccTouchesBegan(CCSet* pTouches, CCEvent *pEvent)$/;"	f	class:DirButton	signature:(CCSet* pTouches, CCEvent *pEvent)
DirButton::ccTouchesBegan	DirButton.h	/^	virtual void ccTouchesBegan(CCSet* pTouches, CCEvent *pEvent);$/;"	p	class:DirButton	access:public	signature:(CCSet* pTouches, CCEvent *pEvent)
DirButton::init	DirButton.cpp	/^bool DirButton::init()$/;"	f	class:DirButton	signature:()
DirButton::init	DirButton.h	/^	virtual bool init();$/;"	p	class:DirButton	access:public	signature:()
DirButton::initSprite	DirButton.cpp	/^void DirButton::initSprite()$/;"	f	class:DirButton	signature:()
DirButton::initSprite	DirButton.h	/^	virtual void initSprite();$/;"	p	class:DirButton	access:public	signature:()
Distance	GpsScene.cpp	/^int Gps::Distance()$/;"	f	class:Gps	signature:()
Distance	GpsScene.h	/^	int Distance();$/;"	p	class:Gps	access:public	signature:()
Down	AppMacros.h	/^typedef enum{Down=0,Left=1,Right=2,Up=3}FaceDirection;$/;"	e	enum:__anon3
DuelEvent	DuelEvent.h	/^class DuelEvent: public Event$/;"	c	inherits:Event
DuelEvent::CREATE_FUNC	DuelEvent.h	/^    CREATE_FUNC(DuelEvent);$/;"	p	class:DuelEvent	access:public	signature:(DuelEvent)
DuelEvent::happen	DuelEvent.cpp	/^void DuelEvent::happen()$/;"	f	class:DuelEvent	signature:()
DuelEvent::happen	DuelEvent.h	/^    void happen();$/;"	p	class:DuelEvent	access:public	signature:()
EGLVIEW	AppMacros.h	132;"	d
ENEMY_IMG_PATH	GlobalPath.h	32;"	d
EVENTDONE_INI	AppMacros.h	83;"	d
EVENTDONE_MRCD	AppMacros.h	61;"	d
EVENT_ATT_NUM	AppMacros.h	146;"	d
EVENT_CSV_PATH	GlobalPath.h	27;"	d
EVENT_MLYR	AppMacros.h	41;"	d
EXP_CRCD	AppMacros.h	70;"	d
EXP_INI	AppMacros.h	92;"	d
Emap	Emap.cpp	/^Emap::Emap()$/;"	f	class:Emap	signature:()
Emap	Emap.h	/^	Emap();$/;"	p	class:Emap	access:public	signature:()
Emap	Emap.h	/^class Emap$/;"	c
Emap::Emap	Emap.cpp	/^Emap::Emap()$/;"	f	class:Emap	signature:()
Emap::Emap	Emap.h	/^	Emap();$/;"	p	class:Emap	access:public	signature:()
Emap::evmap	Emap.h	/^	int** evmap;$/;"	m	class:Emap	access:private
Emap::takeTile	Emap.cpp	/^void Emap::takeTile(CCPoint coord, int eventType)$/;"	f	class:Emap	signature:(CCPoint coord, int eventType)
Emap::takeTile	Emap.h	/^	void takeTile(CCPoint coord, int eventType);$/;"	p	class:Emap	access:public	signature:(CCPoint coord, int eventType)
Emap::tileAt	Emap.cpp	/^int Emap::tileAt(CCPoint coord)$/;"	f	class:Emap	signature:(CCPoint coord)
Emap::tileAt	Emap.h	/^	int tileAt(CCPoint coord);$/;"	p	class:Emap	access:public	signature:(CCPoint coord)
Emap::~Emap	Emap.cpp	/^Emap::~Emap()$/;"	f	class:Emap	signature:()
Emap::~Emap	Emap.h	/^	~Emap();$/;"	p	class:Emap	access:public	signature:()
Entity	Entity.h	/^class Entity: public CCNode$/;"	c	inherits:CCNode
Entity::initSprite	Entity.cpp	/^void Entity::initSprite() $/;"	f	class:Entity	signature:()
Entity::initSprite	Entity.h	/^    virtual void initSprite();$/;"	p	class:Entity	access:public	signature:()
Entity::picNo	Entity.h	/^    int picNo;$/;"	m	class:Entity	access:protected
Entity::sprite	Entity.h	/^    CCSprite* sprite;$/;"	m	class:Entity	access:protected
Event	Event.h	/^class Event: public CCObject$/;"	c	inherits:CCObject
Event::CREATE_FUNC	Event.h	/^	CREATE_FUNC(Event);$/;"	p	class:Event	access:public	signature:(Event)
Event::args	Event.h	/^	CCArray* args;$/;"	m	class:Event	access:public
Event::category	Event.h	/^	int category;$/;"	m	class:Event	access:public
Event::coord	Event.h	/^	CCPoint coord;$/;"	m	class:Event	access:public
Event::description	Event.h	/^	CCString* description;$/;"	m	class:Event	access:public
Event::dialog	Event.h	/^	CCArray* dialog;$/;"	m	class:Event	access:public
Event::happen	Event.cpp	/^void Event::happen()$/;"	f	class:Event	signature:()
Event::happen	Event.h	/^	virtual void happen();$/;"	p	class:Event	access:public	signature:()
Event::id	Event.h	/^	int id;$/;"	m	class:Event	access:public
Event::imgNo	Event.h	/^	int imgNo;$/;"	m	class:Event	access:public
Event::init	Event.cpp	/^bool Event::init()$/;"	f	class:Event	signature:()
Event::init	Event.h	/^	bool init();$/;"	p	class:Event	access:public	signature:()
Event::nArg	Event.h	/^	int nArg;$/;"	m	class:Event	access:public
Event::nDia	Event.h	/^	int nDia;$/;"	m	class:Event	access:public
Event::nPre	Event.h	/^	int nPre;$/;"	m	class:Event	access:public
Event::next	Event.h	/^	int next;$/;"	m	class:Event	access:public
Event::pres	Event.h	/^	CCArray* pres;$/;"	m	class:Event	access:public
Event::repeat	Event.h	/^	bool repeat;$/;"	m	class:Event	access:public
Event::type	Event.h	/^	int type;$/;"	m	class:Event	access:public
Event::~Event	Event.cpp	/^Event::~Event()$/;"	f	class:Event	signature:()
Event::~Event	Event.h	/^	~Event();$/;"	p	class:Event	access:public	signature:()
EventLoader	EventLoader.h	/^class EventLoader$/;"	c
EventLoader::start	EventLoader.cpp	/^CCArray* EventLoader::start(const char* sFilePath)$/;"	f	class:EventLoader	signature:(const char* sFilePath)
EventLoader::start	EventLoader.h	/^   static CCArray* start(const char* sFilePath);$/;"	p	class:EventLoader	access:public	signature:(const char* sFilePath)
EventManager	EventManager.h	/^class EventManager$/;"	c
EventManager::eAtrgr	EventManager.h	/^    Emap* eAtrgr;$/;"	m	class:EventManager	access:public
EventManager::eStand	EventManager.h	/^    Emap* eStand;$/;"	m	class:EventManager	access:public
EventManager::events	EventManager.h	/^    CCArray* events;$/;"	m	class:EventManager	access:public
EventManager::findEventById	EventManager.cpp	/^Event* EventManager::findEventById(int id)$/;"	f	class:EventManager	signature:(int id)
EventManager::findEventById	EventManager.h	/^    Event* findEventById(int id);$/;"	p	class:EventManager	access:private	signature:(int id)
EventManager::happen	EventManager.cpp	/^ControllerListener* EventManager::happen(CCPoint coord, int ent)$/;"	f	class:EventManager	signature:(CCPoint coord, int ent)
EventManager::happen	EventManager.cpp	/^ControllerListener* EventManager::happen(Event* event)$/;"	f	class:EventManager	signature:(Event* event)
EventManager::happen	EventManager.h	/^	ControllerListener* happen(Event* event);$/;"	p	class:EventManager	access:public	signature:(Event* event)
EventManager::happen	EventManager.h	/^    ControllerListener* happen(CCPoint coord, int ent);\/\/entrance through hero or buttonA$/;"	p	class:EventManager	access:public	signature:(CCPoint coord, int ent)
EventManager::isInstant	EventManager.cpp	/^int EventManager::isInstant(Event* event)$/;"	f	class:EventManager	signature:(Event* event)
EventManager::isInstant	EventManager.h	/^	int isInstant(Event* event);$/;"	p	class:EventManager	access:public	signature:(Event* event)
EventManager::listener	EventManager.cpp	/^ControllerListener* EventManager::listener(int type)$/;"	f	class:EventManager	signature:(int type)
EventManager::listener	EventManager.h	/^    ControllerListener* listener(int type);$/;"	p	class:EventManager	access:private	signature:(int type)
EventManager::load	EventManager.cpp	/^void EventManager::load(int fnmapNo, int weekday)$/;"	f	class:EventManager	signature:(int fnmapNo, int weekday)
EventManager::load	EventManager.h	/^    void load(int fnmapNo, int weekday);$/;"	p	class:EventManager	access:public	signature:(int fnmapNo, int weekday)
EventManager::loadAllEvents	EventManager.cpp	/^void EventManager::loadAllEvents(int fileCode)$/;"	f	class:EventManager	signature:(int fileCode)
EventManager::loadAllEvents	EventManager.h	/^    void loadAllEvents(int fileCode);$/;"	p	class:EventManager	access:private	signature:(int fileCode)
EventManager::loadEmap	EventManager.cpp	/^void EventManager::loadEmap()$/;"	f	class:EventManager	signature:()
EventManager::loadEmap	EventManager.h	/^    void loadEmap();$/;"	p	class:EventManager	access:private	signature:()
EventManager::loadNight	EventManager.cpp	/^void EventManager::loadNight(int fnmapNo)$/;"	f	class:EventManager	signature:(int fnmapNo)
EventManager::loadNight	EventManager.h	/^	void loadNight(int fnmapNo);$/;"	p	class:EventManager	access:public	signature:(int fnmapNo)
EventManager::markHappened	EventManager.cpp	/^void EventManager::markHappened(Event* event)$/;"	f	class:EventManager	signature:(Event* event)
EventManager::markHappened	EventManager.h	/^    void markHappened(Event* event);$/;"	p	class:EventManager	access:private	signature:(Event* event)
EventManager::next	EventManager.cpp	/^ControllerListener* EventManager::next()$/;"	f	class:EventManager	signature:()
EventManager::next	EventManager.h	/^	ControllerListener* next();$/;"	p	class:EventManager	access:public	signature:()
EventManager::onGoing	EventManager.h	/^	Event* onGoing;$/;"	m	class:EventManager	access:public
EventManager::release	EventManager.cpp	/^void EventManager::release()$/;"	f	class:EventManager	signature:()
EventManager::release	EventManager.h	/^	void release();$/;"	p	class:EventManager	access:public	signature:()
EventManager::~EventManager	EventManager.cpp	/^EventManager::~EventManager()$/;"	f	class:EventManager	signature:()
EventManager::~EventManager	EventManager.h	/^    ~EventManager();$/;"	p	class:EventManager	access:public	signature:()
FACEDIR_INI	AppMacros.h	76;"	d
FACEDIR_MRCD	AppMacros.h	53;"	d
FADEIN	AnimLib.h	19;"	d
FADEOUT	AnimLib.h	18;"	d
FALSE	AppMacros.h	182;"	d
FINAL_SCRIPT_PATH	GlobalPath.h	39;"	d
FINAL_SCRIPT_PATH_LEN	GlobalPath.h	40;"	d
FIRE_BTN_IMG_PATH	GlobalPath.h	61;"	d
FIRE_DOWN_BTN_IMG_PATH	GlobalPath.h	64;"	d
FIRE_PLIST_IMG_PATH	GlobalPath.h	68;"	d
FIRE_PNG_IMG_PATH	GlobalPath.h	69;"	d
FIRSTSAVE_INI	AppMacros.h	73;"	d
FIRSTSAVE_RCD	AppMacros.h	50;"	d
FLASH_INI	AppMacros.h	89;"	d
FLASH_SRCD	AppMacros.h	67;"	d
FLOOR2_MLYR	AppMacros.h	45;"	d
FLOOR_MLYR	AppMacros.h	46;"	d
FaceDirection	AppMacros.h	/^typedef enum{Down=0,Left=1,Right=2,Up=3}FaceDirection;$/;"	t	typeref:enum:__anon3
FileLoadUtil	FileLoadUtil.h	/^class FileLoadUtil : public CCObject {$/;"	c	inherits:CCObject
FileLoadUtil::getDataLines	FileLoadUtil.cpp	/^CCArray* FileLoadUtil::getDataLines( const char* sFilePath ) {$/;"	f	class:FileLoadUtil	signature:( const char* sFilePath )
FileLoadUtil::getDataLines	FileLoadUtil.h	/^    CCArray* getDataLines(const char* sFilePath);$/;"	p	class:FileLoadUtil	access:public	signature:(const char* sFilePath)
FileLoadUtil::init	FileLoadUtil.cpp	/^bool FileLoadUtil::init() {$/;"	f	class:FileLoadUtil	signature:()
FileLoadUtil::init	FileLoadUtil.h	/^    bool init();$/;"	p	class:FileLoadUtil	access:public	signature:()
FileLoadUtil::mFileLoadUtil	FileLoadUtil.cpp	/^FileLoadUtil* FileLoadUtil::mFileLoadUtil = NULL;$/;"	m	class:FileLoadUtil	file:
FileLoadUtil::mFileLoadUtil	FileLoadUtil.h	/^    static FileLoadUtil* mFileLoadUtil;$/;"	m	class:FileLoadUtil	access:private
FileLoadUtil::sharedFileLoadUtil	FileLoadUtil.cpp	/^FileLoadUtil* FileLoadUtil::sharedFileLoadUtil() {$/;"	f	class:FileLoadUtil	signature:()
FileLoadUtil::sharedFileLoadUtil	FileLoadUtil.h	/^    static FileLoadUtil* sharedFileLoadUtil();$/;"	p	class:FileLoadUtil	access:public	signature:()
GALLERY_CSV_PATH	GalleryScene.h	10;"	d
GALLERY_CSV_X_COL	GalleryScene.h	11;"	d
GALLERY_CSV_Y_COL	GalleryScene.h	12;"	d
GAME_OVER_MSG	CombatScene.cpp	12;"	d	file:
GATE_PATH	GlobalPath.h	7;"	d
GET_SUP_EVT	AppMacros.h	156;"	d
Gallery	GalleryScene.h	/^class Gallery : public cocos2d::CCLayer,public cocos2d::extension::CCTableViewDelegate,cocos2d::extension::CCTableViewDataSource  $/;"	c	inherits:cocos2d::CCLayer,cocos2d::extension::CCTableViewDelegate,cocos2d::extension::CCTableViewDataSource
Gallery::CREATE_FUNC	GalleryScene.h	/^	CREATE_FUNC(Gallery);  $/;"	p	class:Gallery	access:public	signature:(Gallery)
Gallery::cellSizeForTable	GalleryScene.cpp	/^CCSize Gallery::cellSizeForTable(CCTableView *table)$/;"	f	class:Gallery	signature:(CCTableView *table)
Gallery::cellSizeForTable	GalleryScene.h	/^	virtual cocos2d::CCSize cellSizeForTable(cocos2d::extension::CCTableView *table);$/;"	p	class:Gallery	access:public	signature:(cocos2d::extension::CCTableView *table)
Gallery::count	GalleryScene.h	/^	int count;$/;"	m	class:Gallery	access:private
Gallery::img	GalleryScene.h	/^	cocos2d::CCSprite *img;$/;"	m	class:Gallery	access:private
Gallery::init	GalleryScene.cpp	/^bool Gallery::init()$/;"	f	class:Gallery	signature:()
Gallery::init	GalleryScene.h	/^	virtual bool init();  $/;"	p	class:Gallery	access:public	signature:()
Gallery::map2	GalleryScene.h	/^	cocos2d::CCSprite* map2;$/;"	m	class:Gallery	access:private
Gallery::menu1CallBack	GalleryScene.cpp	/^void Gallery::menu1CallBack(CCObject* pSender){$/;"	f	class:Gallery	signature:(CCObject* pSender)
Gallery::menu1CallBack	GalleryScene.h	/^	void menu1CallBack(CCObject* pSender);  $/;"	p	class:Gallery	access:public	signature:(CCObject* pSender)
Gallery::menu2CallBack	GalleryScene.cpp	/^void Gallery::menu2CallBack(CCObject* pSender){$/;"	f	class:Gallery	signature:(CCObject* pSender)
Gallery::menu2CallBack	GalleryScene.h	/^	void menu2CallBack(CCObject* pSender);  $/;"	p	class:Gallery	access:public	signature:(CCObject* pSender)
Gallery::menu3CallBack	GalleryScene.cpp	/^void Gallery::menu3CallBack(CCObject* pSender){$/;"	f	class:Gallery	signature:(CCObject* pSender)
Gallery::menu3CallBack	GalleryScene.h	/^	void menu3CallBack(CCObject* pSender);  $/;"	p	class:Gallery	access:public	signature:(CCObject* pSender)
Gallery::menu4CallBack	GalleryScene.cpp	/^void Gallery::menu4CallBack(CCObject* pSender){$/;"	f	class:Gallery	signature:(CCObject* pSender)
Gallery::menu4CallBack	GalleryScene.h	/^	void menu4CallBack(CCObject* pSender);$/;"	p	class:Gallery	access:public	signature:(CCObject* pSender)
Gallery::menuCloseCallback	GalleryScene.h	/^	void menuCloseCallback(CCObject* pSender);  $/;"	p	class:Gallery	access:public	signature:(CCObject* pSender)
Gallery::menuEnable	GalleryScene.h	/^	bool menuEnable;$/;"	m	class:Gallery	access:private
Gallery::menuNum	GalleryScene.h	/^	int menuNum;$/;"	m	class:Gallery	access:private
Gallery::numberOfCellsInTableView	GalleryScene.cpp	/^unsigned int Gallery::numberOfCellsInTableView(CCTableView *table)$/;"	f	class:Gallery	signature:(CCTableView *table)
Gallery::numberOfCellsInTableView	GalleryScene.h	/^	virtual unsigned int numberOfCellsInTableView(cocos2d::extension::CCTableView *table);  $/;"	p	class:Gallery	access:public	signature:(cocos2d::extension::CCTableView *table)
Gallery::pointImg	GalleryScene.h	/^	cocos2d::CCSprite* pointImg;$/;"	m	class:Gallery	access:private
Gallery::scene	GalleryScene.cpp	/^CCScene* Gallery::scene()$/;"	f	class:Gallery	signature:()
Gallery::scene	GalleryScene.h	/^	static cocos2d::CCScene* scene();  $/;"	p	class:Gallery	access:public	signature:()
Gallery::scrollBar	GalleryScene.h	/^	void scrollBar(cocos2d::extension::CCTableView* table);  $/;"	p	class:Gallery	access:public	signature:(cocos2d::extension::CCTableView* table)
Gallery::scrollViewDidScroll	GalleryScene.cpp	/^void Gallery::scrollViewDidScroll(CCScrollView* view){$/;"	f	class:Gallery	signature:(CCScrollView* view)
Gallery::scrollViewDidScroll	GalleryScene.h	/^	virtual void scrollViewDidScroll(CCScrollView* view);$/;"	p	class:Gallery	access:public	signature:(CCScrollView* view)
Gallery::scrollViewDidZoom	GalleryScene.cpp	/^void Gallery::scrollViewDidZoom(CCScrollView* view){$/;"	f	class:Gallery	signature:(CCScrollView* view)
Gallery::scrollViewDidZoom	GalleryScene.h	/^	virtual void scrollViewDidZoom(CCScrollView* view);$/;"	p	class:Gallery	access:public	signature:(CCScrollView* view)
Gallery::tableCellAtIndex	GalleryScene.cpp	/^CCTableViewCell* Gallery::tableCellAtIndex(CCTableView *table, unsigned int idx)$/;"	f	class:Gallery	signature:(CCTableView *table, unsigned int idx)
Gallery::tableCellAtIndex	GalleryScene.h	/^	virtual cocos2d::extension::CCTableViewCell* tableCellAtIndex(cocos2d::extension::CCTableView *table, unsigned int idx);  $/;"	p	class:Gallery	access:public	signature:(cocos2d::extension::CCTableView *table, unsigned int idx)
Gallery::tableCellHighlight	GalleryScene.cpp	/^void Gallery::tableCellHighlight(CCTableView *table, CCTableViewCell *cell)$/;"	f	class:Gallery	signature:(CCTableView *table, CCTableViewCell *cell)
Gallery::tableCellHighlight	GalleryScene.h	/^	virtual void tableCellHighlight(cocos2d::extension::CCTableView* table, cocos2d::extension::CCTableViewCell* cell);  $/;"	p	class:Gallery	access:public	signature:(cocos2d::extension::CCTableView* table, cocos2d::extension::CCTableViewCell* cell)
Gallery::tableCellTouched	GalleryScene.cpp	/^void Gallery::tableCellTouched(CCTableView *table, CCTableViewCell *cell)$/;"	f	class:Gallery	signature:(CCTableView *table, CCTableViewCell *cell)
Gallery::tableCellTouched	GalleryScene.h	/^	virtual void tableCellTouched(cocos2d::extension::CCTableView* table, cocos2d::extension::CCTableViewCell* cell);  $/;"	p	class:Gallery	access:public	signature:(cocos2d::extension::CCTableView* table, cocos2d::extension::CCTableViewCell* cell)
Gallery::tableCellUnhighlight	GalleryScene.cpp	/^void Gallery::tableCellUnhighlight(CCTableView *table, CCTableViewCell *cell)$/;"	f	class:Gallery	signature:(CCTableView *table, CCTableViewCell *cell)
Gallery::tableCellUnhighlight	GalleryScene.h	/^	virtual void tableCellUnhighlight(cocos2d::extension::CCTableView* table, cocos2d::extension::CCTableViewCell* cell);  $/;"	p	class:Gallery	access:public	signature:(cocos2d::extension::CCTableView* table, cocos2d::extension::CCTableViewCell* cell)
GetNextDialog	PlayReader.cpp	/^string PlayReader::GetNextDialog() {$/;"	f	class:PlayReader	signature:()
GetNextDialog	PlayReader.h	/^  string GetNextDialog();$/;"	p	class:PlayReader	access:public	signature:()
GetShdwEvent	GetShdwEvent.h	/^class GetShdwEvent: public Event$/;"	c	inherits:Event
GetShdwEvent::CREATE_FUNC	GetShdwEvent.h	/^    CREATE_FUNC(GetShdwEvent);$/;"	p	class:GetShdwEvent	access:public	signature:(GetShdwEvent)
GetShdwEvent::happen	GetShdwEvent.cpp	/^void GetShdwEvent::happen() $/;"	f	class:GetShdwEvent	signature:()
GetShdwEvent::happen	GetShdwEvent.h	/^    void happen();$/;"	p	class:GetShdwEvent	access:public	signature:()
GetSuPEvent	GetSuPEvent.h	/^class GetSuPEvent: public Event$/;"	c	inherits:Event
GetSuPEvent::CREATE_FUNC	GetSuPEvent.h	/^    CREATE_FUNC(GetSuPEvent);$/;"	p	class:GetSuPEvent	access:public	signature:(GetSuPEvent)
GetSuPEvent::happen	GetSuPEvent.cpp	/^void GetSuPEvent::happen()$/;"	f	class:GetSuPEvent	signature:()
GetSuPEvent::happen	GetSuPEvent.h	/^    void happen();$/;"	p	class:GetSuPEvent	access:public	signature:()
GlobalRes	GlobalRes.h	/^class GlobalRes$/;"	c
GlobalRes::diawindow	GlobalRes.h	/^    DiaWindow* diawindow;$/;"	m	class:GlobalRes	access:public
GlobalRes::hero	GlobalRes.h	/^    HumanEntity* hero;$/;"	m	class:GlobalRes	access:public
GlobalRes::map	GlobalRes.h	/^    CCTMXTiledMap* map;$/;"	m	class:GlobalRes	access:public
GlobalRes::nightBg	GlobalRes.h	/^	CCSprite* nightBg; $/;"	m	class:GlobalRes	access:public
GlobalRes::rwindow	GlobalRes.h	/^    Window* rwindow;$/;"	m	class:GlobalRes	access:public
GlobalRes::shadow	GlobalRes.h	/^	HumanEntity* shadow;$/;"	m	class:GlobalRes	access:public
GlobalState	GlobalState.h	/^class GlobalState: public Singleton<GlobalState>$/;"	c	inherits:Singleton
GlobalState::doneList	GlobalState.h	/^    bool doneList[MAX_DONE_LIST];$/;"	m	class:GlobalState	access:public
GlobalState::isNight	GlobalState.h	/^	bool isNight;$/;"	m	class:GlobalState	access:public
GlobalState::load	GlobalState.cpp	/^void GlobalState::load()$/;"	f	class:GlobalState	signature:()
GlobalState::load	GlobalState.h	/^    void load();$/;"	p	class:GlobalState	access:public	signature:()
GlobalState::loadDoneList	GlobalState.cpp	/^void GlobalState::loadDoneList()$/;"	f	class:GlobalState	signature:()
GlobalState::loadDoneList	GlobalState.h	/^    void loadDoneList();$/;"	p	class:GlobalState	access:private	signature:()
GlobalState::loadMapState	GlobalState.cpp	/^void GlobalState::loadMapState()$/;"	f	class:GlobalState	signature:()
GlobalState::loadMapState	GlobalState.h	/^    void loadMapState();$/;"	p	class:GlobalState	access:private	signature:()
GlobalState::loadPlayerState	GlobalState.cpp	/^void GlobalState::loadPlayerState()$/;"	f	class:GlobalState	signature:()
GlobalState::loadPlayerState	GlobalState.h	/^    void loadPlayerState();$/;"	p	class:GlobalState	access:private	signature:()
GlobalState::loadSuperPower	GlobalState.cpp	/^void GlobalState::loadSuperPower()$/;"	f	class:GlobalState	signature:()
GlobalState::loadSuperPower	GlobalState.h	/^    void loadSuperPower();$/;"	p	class:GlobalState	access:private	signature:()
GlobalState::mapState	GlobalState.h	/^    MapState* mapState;$/;"	m	class:GlobalState	access:public
GlobalState::newr	GlobalState.cpp	/^void GlobalState::newr()$/;"	f	class:GlobalState	signature:()
GlobalState::newr	GlobalState.h	/^    void newr();$/;"	p	class:GlobalState	access:public	signature:()
GlobalState::playerState	GlobalState.h	/^	PlayerState* playerState;$/;"	m	class:GlobalState	access:public
GlobalState::save	GlobalState.cpp	/^void GlobalState::save()$/;"	f	class:GlobalState	signature:()
GlobalState::save	GlobalState.h	/^    void save();$/;"	p	class:GlobalState	access:public	signature:()
GlobalState::saveDoneList	GlobalState.cpp	/^void GlobalState::saveDoneList()$/;"	f	class:GlobalState	signature:()
GlobalState::saveDoneList	GlobalState.h	/^	void saveDoneList();$/;"	p	class:GlobalState	access:private	signature:()
GlobalState::superPower	GlobalState.h	/^    SuperPower* superPower;$/;"	m	class:GlobalState	access:public
GlobalState::~GlobalState	GlobalState.cpp	/^GlobalState::~GlobalState()$/;"	f	class:GlobalState	signature:()
GlobalState::~GlobalState	GlobalState.h	/^    ~GlobalState();$/;"	p	class:GlobalState	access:public	signature:()
Gps	GpsScene.h	/^class Gps : public cocos2d::CCLayer$/;"	c	inherits:cocos2d::CCLayer
Gps::CREATE_FUNC	GpsScene.h	/^	CREATE_FUNC(Gps);$/;"	p	class:Gps	access:public	signature:(Gps)
Gps::Distance	GpsScene.cpp	/^int Gps::Distance()$/;"	f	class:Gps	signature:()
Gps::Distance	GpsScene.h	/^	int Distance();$/;"	p	class:Gps	access:public	signature:()
Gps::ccTouchesEnded	GpsScene.cpp	/^void Gps::ccTouchesEnded(CCSet *pTouches, CCEvent *pEvent)$/;"	f	class:Gps	signature:(CCSet *pTouches, CCEvent *pEvent)
Gps::ccTouchesEnded	GpsScene.h	/^	void ccTouchesEnded(CCSet *pTouches, CCEvent *pEvent);$/;"	p	class:Gps	access:public	signature:(CCSet *pTouches, CCEvent *pEvent)
Gps::getpointName	GpsScene.h	/^	CCString* getpointName();$/;"	p	class:Gps	access:public	signature:()
Gps::getpointPos	GpsScene.cpp	/^CCPoint Gps::getpointPos(int num)$/;"	f	class:Gps	signature:(int num)
Gps::getpointPos	GpsScene.h	/^	CCPoint getpointPos(int num);$/;"	p	class:Gps	access:public	signature:(int num)
Gps::init	GpsScene.cpp	/^bool Gps::init()$/;"	f	class:Gps	signature:()
Gps::init	GpsScene.h	/^	virtual bool init();  $/;"	p	class:Gps	access:public	signature:()
Gps::latitude	GpsScene.h	/^	double latitude;$/;"	m	class:Gps	access:public
Gps::longitude	GpsScene.h	/^	double longitude;$/;"	m	class:Gps	access:public
Gps::mapPoint	GpsScene.h	/^	CCSprite* mapPoint;$/;"	m	class:Gps	access:public
Gps::menu3CallBack	GpsScene.cpp	/^void Gps::menu3CallBack(CCObject* pSender){$/;"	f	class:Gps	signature:(CCObject* pSender)
Gps::menu3CallBack	GpsScene.h	/^	void menu3CallBack(CCObject* pSender);$/;"	p	class:Gps	access:public	signature:(CCObject* pSender)
Gps::menuCloseCallback	GpsScene.h	/^	void menuCloseCallback(CCObject* pSender);$/;"	p	class:Gps	access:public	signature:(CCObject* pSender)
Gps::pLabel	GpsScene.h	/^	CCLabelTTF* pLabel;$/;"	m	class:Gps	access:public
Gps::pLabel2	GpsScene.h	/^	CCLabelTTF* pLabel2;$/;"	m	class:Gps	access:public
Gps::pLabel3	GpsScene.h	/^	CCLabelTTF* pLabel3;$/;"	m	class:Gps	access:public
Gps::scene	GpsScene.cpp	/^CCScene* Gps::scene()$/;"	f	class:Gps	signature:()
Gps::scene	GpsScene.h	/^	static cocos2d::CCScene* scene();$/;"	p	class:Gps	access:public	signature:()
Gps::showPoint	GpsScene.cpp	/^void Gps::showPoint(int num)$/;"	f	class:Gps	signature:(int num)
Gps::showPoint	GpsScene.h	/^	void showPoint(int num);$/;"	p	class:Gps	access:public	signature:(int num)
Gps::showPosName	GpsScene.cpp	/^void Gps::showPosName(int num)$/;"	f	class:Gps	signature:(int num)
Gps::showPosName	GpsScene.h	/^	void showPosName(int num);$/;"	p	class:Gps	access:public	signature:(int num)
Gps::showTouchPoint	GpsScene.cpp	/^void Gps::showTouchPoint(int num)$/;"	f	class:Gps	signature:(int num)
Gps::showTouchPoint	GpsScene.h	/^	void showTouchPoint(int num);$/;"	p	class:Gps	access:public	signature:(int num)
Gps::showTouchPosName	GpsScene.cpp	/^void Gps::showTouchPosName(int num,CCPoint pos)$/;"	f	class:Gps	signature:(int num,CCPoint pos)
Gps::showTouchPosName	GpsScene.h	/^	void showTouchPosName(int num,CCPoint pos);$/;"	p	class:Gps	access:public	signature:(int num,CCPoint pos)
Gps::touchDistance	GpsScene.cpp	/^int Gps::touchDistance(CCPoint touchPos)$/;"	f	class:Gps	signature:(CCPoint touchPos)
Gps::touchDistance	GpsScene.h	/^	int touchDistance(CCPoint touchPos);$/;"	p	class:Gps	access:public	signature:(CCPoint touchPos)
Gps::touchDistance	GpsScene.h	/^	int touchDistance(double touchx,double touchy);$/;"	p	class:Gps	access:public	signature:(double touchx,double touchy)
Gps::touchPoint	GpsScene.h	/^	CCSprite* touchPoint;$/;"	m	class:Gps	access:public
Gps::updateView	GpsScene.cpp	/^void Gps::updateView(float dt)$/;"	f	class:Gps	signature:(float dt)
Gps::updateView	GpsScene.h	/^	void updateView(float dt);$/;"	p	class:Gps	access:public	signature:(float dt)
Gps::wholeMap	GpsScene.h	/^	CCSprite* wholeMap;$/;"	m	class:Gps	access:public
HAS_SHADOW_INI	AppMacros.h	79;"	d
HAS_SHADOW_MRCD	AppMacros.h	56;"	d
HEALTH_LBL	CombatScene.cpp	7;"	d	file:
HELLOWORLDLAYER	AppMacros.h	9;"	d
HERO	AppMacros.h	18;"	d
HERO_COVER_MODE	AppMacros.h	180;"	d
HERO_IMG_PATH	GlobalPath.h	31;"	d
HERO_MOVE_BACK_ZOR	AppMacros.h	171;"	d
HERO_ON_MAP_ZOR	AppMacros.h	170;"	d
HERO_ON_PANEL_ZOR	AppMacros.h	174;"	d
HERO_STEP_UP_MSG	AppMacros.h	165;"	d
HelloWorld	HelloWorldScene.h	/^class HelloWorld : public cocos2d::CCLayer$/;"	c	inherits:cocos2d::CCLayer
HelloWorld::CREATE_FUNC	HelloWorldScene.h	/^    CREATE_FUNC(HelloWorld);$/;"	p	class:HelloWorld	access:public	signature:(HelloWorld)
HelloWorld::init	HelloWorldScene.cpp	/^bool HelloWorld::init()$/;"	f	class:HelloWorld	signature:()
HelloWorld::init	HelloWorldScene.h	/^    virtual bool init();  $/;"	p	class:HelloWorld	access:public	signature:()
HelloWorld::initControlPanel	HelloWorldScene.cpp	/^void HelloWorld::initControlPanel(Map* map)$/;"	f	class:HelloWorld	signature:(Map* map)
HelloWorld::initControlPanel	HelloWorldScene.h	/^	void initControlPanel(Map* map);$/;"	p	class:HelloWorld	access:private	signature:(Map* map)
HelloWorld::initMap	HelloWorldScene.cpp	/^Map* HelloWorld::initMap()$/;"	f	class:HelloWorld	signature:()
HelloWorld::initMap	HelloWorldScene.h	/^	Map* initMap();$/;"	p	class:HelloWorld	access:private	signature:()
HelloWorld::scene	HelloWorldScene.cpp	/^CCScene* HelloWorld::scene()$/;"	f	class:HelloWorld	signature:()
HelloWorld::scene	HelloWorldScene.h	/^    static cocos2d::CCScene* scene();$/;"	p	class:HelloWorld	access:public	signature:()
Hero	Hero.h	/^class Hero : public WalkingMan$/;"	c	inherits:WalkingMan
Hero::CREATE_FUNC	Hero.h	/^    CREATE_FUNC(Hero);$/;"	p	class:Hero	access:public	signature:(Hero)
Hero::checkCollision	Hero.cpp	/^CollisionType Hero::checkCollision(CCPoint tileCoord)$/;"	f	class:Hero	signature:(CCPoint tileCoord)
Hero::checkCollision	Hero.h	/^    CollisionType checkCollision(CCPoint tileCoord);$/;"	p	class:Hero	access:public	signature:(CCPoint tileCoord)
Hero::checkEvent	Hero.cpp	/^CollisionType Hero::checkEvent(CCPoint tileCoord)$/;"	f	class:Hero	signature:(CCPoint tileCoord)
Hero::checkEvent	Hero.h	/^    CollisionType checkEvent(CCPoint tileCoord);$/;"	p	class:Hero	access:private	signature:(CCPoint tileCoord)
Hero::crossToMap	Hero.cpp	/^void Hero::crossToMap(int mapNo)$/;"	f	class:Hero	signature:(int mapNo)
Hero::crossToMap	Hero.h	/^	void crossToMap(int mapNo); $/;"	p	class:Hero	access:private	signature:(int mapNo)
Hero::doEvent	Hero.cpp	/^void Hero::doEvent(CCPoint heroTilePos)$/;"	f	class:Hero	signature:(CCPoint heroTilePos)
Hero::doEvent	Hero.h	/^    void doEvent(CCPoint heroPosition);$/;"	p	class:Hero	access:private	signature:(CCPoint heroPosition)
Hero::endRespond	Hero.cpp	/^void Hero::endRespond()$/;"	f	class:Hero	signature:()
Hero::endRespond	Hero.h	/^    void endRespond();$/;"	p	class:Hero	access:public	signature:()
Hero::focus	Hero.h	/^    bool focus;$/;"	m	class:Hero	access:private
Hero::followMe	Hero.cpp	/^void Hero::followMe()$/;"	f	class:Hero	signature:()
Hero::followMe	Hero.h	/^	void followMe();$/;"	p	class:Hero	access:private	signature:()
Hero::getHeroTilePos	Hero.cpp	/^CCPoint Hero::getHeroTilePos()$/;"	f	class:Hero	signature:()
Hero::getHeroTilePos	Hero.h	/^    CCPoint getHeroTilePos();$/;"	p	class:Hero	access:public	signature:()
Hero::gotFocusT	Hero.cpp	/^void Hero::gotFocusT()$/;"	f	class:Hero	signature:()
Hero::gotFocusT	Hero.h	/^    void gotFocusT();$/;"	p	class:Hero	access:public	signature:()
Hero::init	Hero.cpp	/^bool Hero::init() $/;"	f	class:Hero	signature:()
Hero::init	Hero.h	/^    bool init();$/;"	p	class:Hero	access:private	signature:()
Hero::initAction	Hero.cpp	/^void Hero::initAction(int dir)$/;"	f	class:Hero	signature:(int dir)
Hero::initAction	Hero.h	/^    void initAction(int dir);$/;"	p	class:Hero	access:private	signature:(int dir)
Hero::letsGo	Hero.cpp	/^void Hero::letsGo(float dt)$/;"	f	class:Hero	signature:(float dt)
Hero::letsGo	Hero.h	/^    void letsGo(float dt);$/;"	p	class:Hero	access:private	signature:(float dt)
Hero::map	Hero.h	/^    Map* map;$/;"	m	class:Hero	access:public
Hero::move	Hero.h	/^    CCPoint move;$/;"	m	class:Hero	access:public
Hero::moveHero	Hero.h	/^	CCAction* moveHero;$/;"	m	class:Hero	access:private
Hero::moveLegs	Hero.h	/^    cocos2d::CCAction* moveLegs;$/;"	m	class:Hero	access:private
Hero::moveMap	Hero.h	/^    cocos2d::CCAction* moveMap;$/;"	m	class:Hero	access:private
Hero::respond	Hero.cpp	/^void Hero::respond(int dir) $/;"	f	class:Hero	signature:(int dir)
Hero::respond	Hero.h	/^    void respond(int dir);$/;"	p	class:Hero	access:public	signature:(int dir)
Hero::stepDown	Hero.cpp	/^void Hero::stepDown()$/;"	f	class:Hero	signature:()
Hero::stepDown	Hero.h	/^    void stepDown();$/;"	p	class:Hero	access:public	signature:()
Hero::stepUp	Hero.cpp	/^void Hero::stepUp()$/;"	f	class:Hero	signature:()
Hero::stepUp	Hero.h	/^    void stepUp();$/;"	p	class:Hero	access:private	signature:()
Hero::touchEnded	Hero.h	/^    int touchEnded;$/;"	m	class:Hero	access:private
Hero::walkEnd	Hero.cpp	/^void Hero::walkEnd()$/;"	f	class:Hero	signature:()
Hero::walkEnd	Hero.h	/^    void walkEnd();$/;"	p	class:Hero	access:private	signature:()
Hp	CombatUnit.h	/^   int Hp;$/;"	m	class:CombatUnit	access:public
HumanEntity	HumanEntity.h	/^class HumanEntity : public Entity, public ControllerListener$/;"	c	inherits:Entity,ControllerListener
HumanEntity::IntToAddrForPNG	HumanEntity.cpp	/^void HumanEntity::IntToAddrForPNG(char addr[],int len,int n)$/;"	f	class:HumanEntity	signature:(char addr[],int len,int n)
HumanEntity::IntToAddrForPNG	HumanEntity.h	/^	static void IntToAddrForPNG(char addr[],int len,int n);$/;"	p	class:HumanEntity	access:public	signature:(char addr[],int len,int n)
HumanEntity::dir	HumanEntity.h	/^	int dir;$/;"	m	class:HumanEntity	access:public
HumanEntity::goWalking	HumanEntity.cpp	/^void HumanEntity::goWalking(float dt)$/;"	f	class:HumanEntity	signature:(float dt)
HumanEntity::goWalking	HumanEntity.h	/^	virtual void goWalking(float dt);$/;"	p	class:HumanEntity	access:public	signature:(float dt)
HumanEntity::id	HumanEntity.h	/^	int id;$/;"	m	class:HumanEntity	access:public
HumanEntity::initSprite	HumanEntity.cpp	/^void HumanEntity::initSprite()$/;"	f	class:HumanEntity	signature:()
HumanEntity::initSprite	HumanEntity.h	/^	virtual void initSprite();$/;"	p	class:HumanEntity	access:public	signature:()
HumanEntity::respond	HumanEntity.cpp	/^void HumanEntity::respond(int dir)$/;"	f	class:HumanEntity	signature:(int dir)
HumanEntity::respond	HumanEntity.h	/^	virtual void respond(int dir);$/;"	p	class:HumanEntity	access:public	signature:(int dir)
HumanEntity::setFaceDirection	HumanEntity.cpp	/^void HumanEntity::setFaceDirection(int dirc)$/;"	f	class:HumanEntity	signature:(int dirc)
HumanEntity::setFaceDirection	HumanEntity.h	/^	virtual void setFaceDirection(int dir);$/;"	p	class:HumanEntity	access:public	signature:(int dir)
HumanEntity::setID	HumanEntity.cpp	/^void HumanEntity::setID(int id)$/;"	f	class:HumanEntity	signature:(int id)
HumanEntity::setID	HumanEntity.h	/^	void setID(int id);$/;"	p	class:HumanEntity	access:public	signature:(int id)
HurtAbl	Ability.h	/^class HurtAbl$/;"	c
HurtAbl::hurt	Ability.h	/^	int hurt;$/;"	m	class:HurtAbl	access:public
HurtAbl::type	Ability.h	/^	int type;$/;"	m	class:HurtAbl	access:public
ID	Ability.h	/^	int ID;$/;"	m	class:Ability	access:public
IDX_ATT	AppMacros.h	117;"	d
IDY_ATT	AppMacros.h	118;"	d
ID_ATT	AppMacros.h	111;"	d
IMGSP	AppMacros.h	35;"	d
INDEX_ONE	Map.h	19;"	d
INDEX_ZERO	Map.h	18;"	d
INFORMATION_GRP	AppMacros.h	120;"	d
ITEM2_IMG_PATH	GlobalPath.h	25;"	d
ITEM_ID_INDEX	ItemEvent.h	5;"	d
ITEM_IMG_PATH	GlobalPath.h	24;"	d
IntToAddrForPNG	HumanEntity.cpp	/^void HumanEntity::IntToAddrForPNG(char addr[],int len,int n)$/;"	f	class:HumanEntity	signature:(char addr[],int len,int n)
IntToAddrForPNG	HumanEntity.h	/^	static void IntToAddrForPNG(char addr[],int len,int n);$/;"	p	class:HumanEntity	access:public	signature:(char addr[],int len,int n)
IntToAddrForPNG	Window.h	/^	static void IntToAddrForPNG(char addr[],int len,int n);$/;"	p	class:Window	access:public	signature:(char addr[],int len,int n)
ItemEvent	ItemEvent.h	/^class ItemEvent: public Event$/;"	c	inherits:Event
ItemEvent::happen	ItemEvent.cpp	/^void ItemEvent::happen()$/;"	f	class:ItemEvent	signature:()
ItemEvent::happen	ItemEvent.h	/^    void happen();$/;"	p	class:ItemEvent	access:public	signature:()
JX_RESOLUHEI	AppMacros.h	99;"	d
JX_RESOLUWID	AppMacros.h	98;"	d
LABELSP	AppMacros.h	37;"	d
LABEL_FONT	CombatScene.cpp	4;"	d	file:
LANDSCAPE_IMG_PATH	GlobalPath.h	50;"	d
LEAFLET_CLOSE_IMG_PATH	GlobalPath.h	55;"	d
LEAFLET_IMG_PATH	GlobalPath.h	54;"	d
LEVEL_LBL	CombatScene.cpp	6;"	d	file:
LOAD	LoadingScene.cpp	4;"	d	file:
LOAD_BOOL	GlobalState.cpp	7;"	d	file:
LOAD_INT	GlobalState.cpp	6;"	d	file:
LOAD_STRING	GlobalState.cpp	8;"	d	file:
Left	AppMacros.h	/^typedef enum{Down=0,Left=1,Right=2,Up=3}FaceDirection;$/;"	e	enum:__anon3
LoadNightEvent	LoadNightEvent.h	/^class LoadNightEvent: public Event$/;"	c	inherits:Event
LoadNightEvent::CREATE_FUNC	LoadNightEvent.h	/^    CREATE_FUNC(LoadNightEvent);$/;"	p	class:LoadNightEvent	access:public	signature:(LoadNightEvent)
LoadNightEvent::happen	LoadNightEvent.cpp	/^void LoadNightEvent::happen()$/;"	f	class:LoadNightEvent	signature:()
LoadNightEvent::happen	LoadNightEvent.h	/^    void happen();$/;"	p	class:LoadNightEvent	access:public	signature:()
LoadingScene	LoadingScene.h	/^class LoadingScene: public CCLayer$/;"	c	inherits:CCLayer
LoadingScene::CREATE_FUNC	LoadingScene.h	/^	CREATE_FUNC(LoadingScene);$/;"	p	class:LoadingScene	access:public	signature:(LoadingScene)
LoadingScene::fileNames	LoadingScene.h	/^	CCArray* fileNames;$/;"	m	class:LoadingScene	access:public
LoadingScene::haveLoaded	LoadingScene.h	/^	int haveLoaded;$/;"	m	class:LoadingScene	access:private
LoadingScene::init	LoadingScene.cpp	/^bool LoadingScene::init()$/;"	f	class:LoadingScene	signature:()
LoadingScene::init	LoadingScene.h	/^	bool init();$/;"	p	class:LoadingScene	access:public	signature:()
LoadingScene::initTTFs	LoadingScene.cpp	/^void LoadingScene::initTTFs()$/;"	f	class:LoadingScene	signature:()
LoadingScene::initTTFs	LoadingScene.h	/^	void initTTFs();$/;"	p	class:LoadingScene	access:private	signature:()
LoadingScene::load	LoadingScene.cpp	/^void LoadingScene::load()$/;"	f	class:LoadingScene	signature:()
LoadingScene::load	LoadingScene.h	/^	void load();$/;"	p	class:LoadingScene	access:private	signature:()
LoadingScene::loadedCallBack	LoadingScene.cpp	/^void LoadingScene::loadedCallBack(CCObject* nothing)$/;"	f	class:LoadingScene	signature:(CCObject* nothing)
LoadingScene::loadedCallBack	LoadingScene.h	/^	void loadedCallBack(CCObject* nothing);$/;"	p	class:LoadingScene	access:private	signature:(CCObject* nothing)
LoadingScene::scene	LoadingScene.cpp	/^CCScene* LoadingScene::scene()$/;"	f	class:LoadingScene	signature:()
LoadingScene::scene	LoadingScene.h	/^    static CCScene* scene();$/;"	p	class:LoadingScene	access:public	signature:()
LoadingScene::ttf	LoadingScene.h	/^	CCLabelTTF* ttf;$/;"	m	class:LoadingScene	access:private
LockButtonTouch	AbilityButton.cpp	/^void AbilityButton::LockButtonTouch()$/;"	f	class:AbilityButton	signature:()
LockButtonTouch	AbilityButton.h	/^	void LockButtonTouch();$/;"	p	class:AbilityButton	access:public	signature:()
MAN_IMG_PATH	GlobalPath.h	16;"	d
MAN_PATH_LEN	GlobalPath.h	17;"	d
MAN_START	AppMacros.h	21;"	d
MAP	AppMacros.h	17;"	d
MAP10	AppMacros.h	128;"	d
MAP11	AppMacros.h	129;"	d
MAP11_PATH	GlobalPath.h	14;"	d
MAP12	AppMacros.h	130;"	d
MAP12_PATH	GlobalPath.h	15;"	d
MAPLAYER	AppMacros.h	12;"	d
MAPNO_INI	AppMacros.h	77;"	d
MAPNO_MRCD	AppMacros.h	54;"	d
MAP_CSV_PATH	GlobalPath.h	84;"	d
MAP_POINT_MAP_PATH	GlobalPath.h	86;"	d
MAP_RESOLUHEI	AppMacros.h	101;"	d
MAP_RESOLUWID	AppMacros.h	100;"	d
MAP_SCALER	AppMacros.h	151;"	d
MAX_DONE_LIST	AppMacros.h	94;"	d
MENUSP2_IMG_PATH	GlobalPath.h	23;"	d
MENUSP_IMG_PATH	GlobalPath.h	22;"	d
MONSTER	Monster.h	9;"	d
MONSTER_IMG_PATH	GlobalPath.h	59;"	d
M_CSV_PATH	GlobalPath.h	81;"	d
Map	Map.h	/^class Map : public CCTMXTiledMap$/;"	c	inherits:CCTMXTiledMap
Map::NPCs	Map.h	/^    CCArray* NPCs; $/;"	m	class:Map	access:public
Map::create	Map.cpp	/^Map* Map::create(const char *tmxFile)$/;"	f	class:Map	signature:(const char *tmxFile)
Map::create	Map.h	/^	static Map* create(const char *tmxFile);$/;"	p	class:Map	access:public	signature:(const char *tmxFile)
Map::crossMap	Map.cpp	/^Map* Map::crossMap(CCPoint tileBirthPoint,int mapNo)$/;"	f	class:Map	signature:(CCPoint tileBirthPoint,int mapNo)
Map::crossMap	Map.h	/^	Map* crossMap(CCPoint tileBirthPoint,int mapNo);$/;"	p	class:Map	access:public	signature:(CCPoint tileBirthPoint,int mapNo)
Map::humanPosForTileMove	Map.cpp	/^CCPoint Map::humanPosForTileMove(CCPoint tileCoord)$/;"	f	class:Map	signature:(CCPoint tileCoord)
Map::humanPosForTileMove	Map.h	/^	CCPoint humanPosForTileMove(CCPoint tileCoord);$/;"	p	class:Map	access:public	signature:(CCPoint tileCoord)
Map::initNPC	Map.cpp	/^void Map::initNPC()$/;"	f	class:Map	signature:()
Map::initNPC	Map.h	/^	void initNPC();$/;"	p	class:Map	access:public	signature:()
Map::positionFromTileCoord	Map.cpp	/^CCPoint Map::positionFromTileCoord(CCPoint tileCoord)$/;"	f	class:Map	signature:(CCPoint tileCoord)
Map::positionFromTileCoord	Map.h	/^	CCPoint positionFromTileCoord(CCPoint tileCoord);$/;"	p	class:Map	access:public	signature:(CCPoint tileCoord)
Map::removeAllChildrenWithCleanup	Map.cpp	/^void Map::removeAllChildrenWithCleanup(bool cleanup)$/;"	f	class:Map	signature:(bool cleanup)
Map::removeAllChildrenWithCleanup	Map.h	/^	virtual void removeAllChildrenWithCleanup(bool cleanup);$/;"	p	class:Map	access:public	signature:(bool cleanup)
Map::setGameStartPos	Map.cpp	/^void Map::setGameStartPos()$/;"	f	class:Map	signature:()
Map::setGameStartPos	Map.h	/^	void setGameStartPos();$/;"	p	class:Map	access:public	signature:()
Map::tileCoordFromPosition	Map.cpp	/^CCPoint Map::tileCoordFromPosition(CCPoint position)$/;"	f	class:Map	signature:(CCPoint position)
Map::tileCoordFromPosition	Map.h	/^	CCPoint tileCoordFromPosition(CCPoint pos);$/;"	p	class:Map	access:public	signature:(CCPoint pos)
Map::~Map	Map.cpp	/^Map::~Map()$/;"	f	class:Map	signature:()
Map::~Map	Map.h	/^	~Map();$/;"	p	class:Map	access:public	signature:()
MapState	MapState.h	/^class MapState$/;"	c
MapState::faceDir	MapState.h	/^   int faceDir;$/;"	m	class:MapState	access:public
MapState::hasSh	MapState.h	/^   bool hasSh;$/;"	m	class:MapState	access:public
MapState::mapNo	MapState.h	/^   int mapNo;$/;"	m	class:MapState	access:public
MapState::nTime	MapState.h	/^   int nTime;$/;"	m	class:MapState	access:public
MapState::positionX	MapState.h	/^   int positionX;$/;"	m	class:MapState	access:public
MapState::positionY	MapState.h	/^   int positionY;$/;"	m	class:MapState	access:public
MapState::sTime	MapState.h	/^   int sTime;$/;"	m	class:MapState	access:public
MapState::standPos	MapState.h	/^   int standPos;$/;"	m	class:MapState	access:public
MapState::storyCnt	MapState.h	/^   int storyCnt;$/;"	m	class:MapState	access:public
Menu	Menu.h	/^class Menu:public CCLayer$/;"	c	inherits:CCLayer
Menu::CREATE_FUNC	Menu.h	/^	CREATE_FUNC(Menu);$/;"	p	class:Menu	access:public	signature:(Menu)
Menu::hero	Menu.h	/^	Hero* hero;$/;"	m	class:Menu	access:public
Menu::info	Menu.cpp	/^void Menu::info(CCObject* sender){$/;"	f	class:Menu	signature:(CCObject* sender)
Menu::info	Menu.h	/^	void info(CCObject* sender);$/;"	p	class:Menu	access:private	signature:(CCObject* sender)
Menu::init	Menu.cpp	/^bool Menu::init()$/;"	f	class:Menu	signature:()
Menu::init	Menu.h	/^	bool init();$/;"	p	class:Menu	access:public	signature:()
Menu::menu	Menu.h	/^	CCMenu* menu;$/;"	m	class:Menu	access:public
Menu::menuButton	Menu.h	/^	CCMenu* menuButton;$/;"	m	class:Menu	access:public
Menu::quit	Menu.cpp	/^void Menu::quit(CCObject* sender)$/;"	f	class:Menu	signature:(CCObject* sender)
Menu::quit	Menu.h	/^	void quit(CCObject *sender);$/;"	p	class:Menu	access:private	signature:(CCObject *sender)
Menu::ret	Menu.cpp	/^void Menu::ret(CCObject* sender)$/;"	f	class:Menu	signature:(CCObject* sender)
Menu::ret	Menu.h	/^	void ret(CCObject *sender);$/;"	p	class:Menu	access:private	signature:(CCObject *sender)
Menu::save	Menu.cpp	/^void Menu::save(CCObject* sender)$/;"	f	class:Menu	signature:(CCObject* sender)
Menu::save	Menu.h	/^	void save(CCObject *sender);$/;"	p	class:Menu	access:private	signature:(CCObject *sender)
Menu::setHero	Menu.cpp	/^void Menu::setHero(Hero* hero)$/;"	f	class:Menu	signature:(Hero* hero)
Menu::setHero	Menu.h	/^	void setHero(Hero* hero);$/;"	p	class:Menu	access:public	signature:(Hero* hero)
Menu::show	Menu.cpp	/^void Menu::show(CCObject* sender)$/;"	f	class:Menu	signature:(CCObject* sender)
Menu::show	Menu.h	/^	void show(CCObject* sender);$/;"	p	class:Menu	access:private	signature:(CCObject* sender)
MenuLayer	MenuLayer.h	/^class MenuLayer : public cocos2d::CCLayer$/;"	c	inherits:cocos2d::CCLayer
MenuLayer::CREATE_FUNC	MenuLayer.h	/^    CREATE_FUNC(MenuLayer);$/;"	p	class:MenuLayer	access:public	signature:(MenuLayer)
MenuLayer::ccTouchBegan	MenuLayer.cpp	/^bool MenuLayer::ccTouchBegan(CCTouch *pTouch,CCEvent *pEvent)$/;"	f	class:MenuLayer	signature:(CCTouch *pTouch,CCEvent *pEvent)
MenuLayer::ccTouchBegan	MenuLayer.h	/^	bool ccTouchBegan(CCTouch *pTouch,CCEvent *pEvent);$/;"	p	class:MenuLayer	access:public	signature:(CCTouch *pTouch,CCEvent *pEvent)
MenuLayer::ccTouchEnded	MenuLayer.cpp	/^void MenuLayer::ccTouchEnded(CCTouch *pTouch,CCEvent *pEvent)$/;"	f	class:MenuLayer	signature:(CCTouch *pTouch,CCEvent *pEvent)
MenuLayer::ccTouchEnded	MenuLayer.h	/^	void ccTouchEnded(CCTouch *pTouch,CCEvent *pEvent);$/;"	p	class:MenuLayer	access:public	signature:(CCTouch *pTouch,CCEvent *pEvent)
MenuLayer::ccTouchMoved	MenuLayer.cpp	/^void MenuLayer::ccTouchMoved(CCTouch *pTouch,CCEvent *pEvent)$/;"	f	class:MenuLayer	signature:(CCTouch *pTouch,CCEvent *pEvent)
MenuLayer::ccTouchMoved	MenuLayer.h	/^	void ccTouchMoved(CCTouch *pTouch,CCEvent *pEcent);$/;"	p	class:MenuLayer	access:public	signature:(CCTouch *pTouch,CCEvent *pEcent)
MenuLayer::init	MenuLayer.cpp	/^bool MenuLayer::init()$/;"	f	class:MenuLayer	signature:()
MenuLayer::init	MenuLayer.h	/^    virtual bool init();  $/;"	p	class:MenuLayer	access:public	signature:()
MenuLayer::menuCloseCallback	MenuLayer.h	/^    void menuCloseCallback(CCObject* pSender);$/;"	p	class:MenuLayer	access:public	signature:(CCObject* pSender)
MenuLayer::scene	MenuLayer.cpp	/^CCScene* MenuLayer::scene()$/;"	f	class:MenuLayer	signature:()
MenuLayer::scene	MenuLayer.h	/^    static cocos2d::CCScene* scene();$/;"	p	class:MenuLayer	access:public	signature:()
Monster	Monster.h	/^class Monster:public Role$/;"	c	inherits:Role
Monster::CREATE_FUNC	Monster.h	/^	CREATE_FUNC(Monster);$/;"	p	class:Monster	access:public	signature:(Monster)
Monster::chooseButton	Monster.cpp	/^int Monster::chooseButton()$/;"	f	class:Monster	signature:()
Monster::chooseButton	Monster.h	/^	int chooseButton();$/;"	p	class:Monster	access:public	signature:()
Monster::init	Monster.cpp	/^bool Monster::init()$/;"	f	class:Monster	signature:()
Monster::init	Monster.h	/^	virtual bool init();$/;"	p	class:Monster	access:public	signature:()
Monster::monster	Monster.h	/^	CCSprite* monster;$/;"	m	class:Monster	access:private
Monster::monsterNo	Monster.h	/^	int monsterNo;$/;"	m	class:Monster	access:public
Monster::setMonster	Monster.cpp	/^void Monster::setMonster(int monType)$/;"	f	class:Monster	signature:(int monType)
Monster::setMonster	Monster.h	/^	void setMonster(int monType);$/;"	p	class:Monster	access:public	signature:(int monType)
NAME_PATH	GlobalPath.h	36;"	d
NIGHTBG_IMG_PATH	GlobalPath.h	26;"	d
NIGHTTIME_OPACITY	TimeUtil.cpp	6;"	d	file:
NIGHT_FINISH_TIME	TimeUtil.cpp	4;"	d	file:
NIGHT_START_TIME	TimeUtil.cpp	3;"	d	file:
NIGHT_TIME_INI	AppMacros.h	82;"	d
NIGHT_TIME_MRCD	AppMacros.h	59;"	d
NO_EVENT_FLAG	AppMacros.h	154;"	d
NPCUtil	NPCUtil.h	/^class NPCUtil$/;"	c
NPCUtil::findManById	NPCUtil.cpp	/^HumanEntity* NPCUtil::findManById(int id, CCArray* NPCs)$/;"	f	class:NPCUtil	signature:(int id, CCArray* NPCs)
NPCUtil::findManById	NPCUtil.h	/^    static HumanEntity* findManById(int id, CCArray* NPCs);$/;"	p	class:NPCUtil	access:public	signature:(int id, CCArray* NPCs)
NPCUtil::initNPC	NPCUtil.cpp	/^CCArray* NPCUtil::initNPC()$/;"	f	class:NPCUtil	signature:()
NPCUtil::initNPC	NPCUtil.h	/^    static CCArray* initNPC();$/;"	p	class:NPCUtil	access:public	signature:()
NPC_ON_MAP_BACK_ZOR	AppMacros.h	172;"	d
NPC_ON_MAP_FRON_ZOR	AppMacros.h	173;"	d
NPCs	Map.h	/^    CCArray* NPCs; $/;"	m	class:Map	access:public
NUM_TO_LOAD	LoadingScene.cpp	6;"	d	file:
NightfallEvent	NightfallEvent.h	/^class NightfallEvent$/;"	c
NightfallEvent::happen	NightfallEvent.cpp	/^void NightfallEvent::happen()$/;"	f	class:NightfallEvent	signature:()
NightfallEvent::happen	NightfallEvent.h	/^    void happen();$/;"	p	class:NightfallEvent	access:public	signature:()
PANEL_ON_MAPLYR_ZOR	AppMacros.h	175;"	d
PIC_MAX	HumanEntity.h	7;"	d
PLACENAMEID_OBJ	AppMacros.h	121;"	d
PLACE_NUM	GpsScene.h	9;"	d
PLAYER_IMG_PATH	GlobalPath.h	58;"	d
PLIST_IMG_PATH	GlobalPath.h	48;"	d
PORTAL_EVT	AppMacros.h	116;"	d
POSITIONX_INI	AppMacros.h	74;"	d
POSITIONX_MRCD	AppMacros.h	51;"	d
POSITIONY_INI	AppMacros.h	75;"	d
POSITIONY_MRCD	AppMacros.h	52;"	d
Particles	Particles.h	/^class Particles:public CCNode$/;"	c	inherits:CCNode
Particles::CREATE_FUNC	Particles.h	/^	CREATE_FUNC(Particles);$/;"	p	class:Particles	access:public	signature:(Particles)
Particles::init	Particles.cpp	/^bool Particles::init()$/;"	f	class:Particles	signature:()
Particles::init	Particles.h	/^    virtual bool init();$/;"	p	class:Particles	access:public	signature:()
Particles::mSystem	Particles.h	/^	CCParticleSystemQuad* mSystem;$/;"	m	class:Particles	access:private
Particles::m_emitter	Particles.h	/^	CCParticleSystemQuad *m_emitter;$/;"	m	class:Particles	access:private
Particles::monsterAttack	Particles.cpp	/^void Particles::monsterAttack()$/;"	f	class:Particles	signature:()
Particles::monsterAttack	Particles.h	/^	void monsterAttack();$/;"	p	class:Particles	access:public	signature:()
Particles::playerAttack	Particles.cpp	/^void Particles::playerAttack()$/;"	f	class:Particles	signature:()
Particles::playerAttack	Particles.h	/^	void playerAttack();$/;"	p	class:Particles	access:public	signature:()
Particles::setFireParticle	Particles.cpp	/^void Particles::setFireParticle()$/;"	f	class:Particles	signature:()
Particles::setFireParticle	Particles.h	/^	void setFireParticle();$/;"	p	class:Particles	access:public	signature:()
Particles::setParticleDuration	Particles.cpp	/^void Particles::setParticleDuration(float dt)$/;"	f	class:Particles	signature:(float dt)
Particles::setParticleDuration	Particles.h	/^	void setParticleDuration(float dt);$/;"	p	class:Particles	access:public	signature:(float dt)
Particles::setParticleLife	Particles.cpp	/^void Particles::setParticleLife(float dt)$/;"	f	class:Particles	signature:(float dt)
Particles::setParticleLife	Particles.h	/^	void setParticleLife(float dt);$/;"	p	class:Particles	access:public	signature:(float dt)
Particles::setWaterParticle	Particles.cpp	/^void Particles::setWaterParticle()$/;"	f	class:Particles	signature:()
Particles::setWaterParticle	Particles.h	/^	void setWaterParticle();$/;"	p	class:Particles	access:public	signature:()
Particles::setWoodParticle	Particles.cpp	/^void Particles::setWoodParticle()$/;"	f	class:Particles	signature:()
Particles::setWoodParticle	Particles.h	/^	void setWoodParticle();$/;"	p	class:Particles	access:public	signature:()
PeriodicAbl	Ability.h	/^class PeriodicAbl$/;"	c
PeriodicAbl::cycStability	Ability.h	/^	int cycStability;$/;"	m	class:PeriodicAbl	access:public
PeriodicAbl::cycle	Ability.h	/^	int cycle;$/;"	m	class:PeriodicAbl	access:public
PlacenameWindow	PlacenameWindow.h	/^class PlacenameWindow:public Window$/;"	c	inherits:Window
PlacenameWindow::CREATE_FUNC	PlacenameWindow.h	/^	CREATE_FUNC(PlacenameWindow);$/;"	p	class:PlacenameWindow	access:public	signature:(PlacenameWindow)
PlacenameWindow::appear	PlacenameWindow.cpp	/^void PlacenameWindow::appear()$/;"	f	class:PlacenameWindow	signature:()
PlacenameWindow::appear	PlacenameWindow.h	/^	void appear();$/;"	p	class:PlacenameWindow	access:public	signature:()
PlacenameWindow::disappear	PlacenameWindow.cpp	/^void PlacenameWindow::disappear()$/;"	f	class:PlacenameWindow	signature:()
PlacenameWindow::disappear	PlacenameWindow.h	/^	void disappear();$/;"	p	class:PlacenameWindow	access:public	signature:()
PlacenameWindow::initSprite	PlacenameWindow.cpp	/^void PlacenameWindow::initSprite()$/;"	f	class:PlacenameWindow	signature:()
PlacenameWindow::initSprite	PlacenameWindow.h	/^	void initSprite();$/;"	p	class:PlacenameWindow	access:public	signature:()
PlacenameWindow::load	PlacenameWindow.cpp	/^void PlacenameWindow::load(CCTMXTiledMap* map,CCDictionary *properties)$/;"	f	class:PlacenameWindow	signature:(CCTMXTiledMap* map,CCDictionary *properties)
PlacenameWindow::load	PlacenameWindow.h	/^	void load(CCTMXTiledMap* map,CCDictionary *properties);$/;"	p	class:PlacenameWindow	access:public	signature:(CCTMXTiledMap* map,CCDictionary *properties)
PlacenameWindow::nextMove	PlacenameWindow.cpp	/^void PlacenameWindow::nextMove()$/;"	f	class:PlacenameWindow	signature:()
PlacenameWindow::nextMove	PlacenameWindow.h	/^	void nextMove();$/;"	p	class:PlacenameWindow	access:public	signature:()
PlacenameWindow::prevPlaceID	PlacenameWindow.h	/^	int prevPlaceID;$/;"	m	class:PlacenameWindow	access:public
PlacenameWindow::respond	PlacenameWindow.cpp	/^void PlacenameWindow::respond(int curPlaceID)$/;"	f	class:PlacenameWindow	signature:(int curPlaceID)
PlacenameWindow::respond	PlacenameWindow.h	/^	void respond(int curPlaceID);$/;"	p	class:PlacenameWindow	access:public	signature:(int curPlaceID)
PlayReader	PlayReader.cpp	/^PlayReader::PlayReader() {$/;"	f	class:PlayReader	signature:()
PlayReader	PlayReader.cpp	/^PlayReader::PlayReader(string filePath) {$/;"	f	class:PlayReader	signature:(string filePath)
PlayReader	PlayReader.h	/^  PlayReader();$/;"	p	class:PlayReader	access:public	signature:()
PlayReader	PlayReader.h	/^  PlayReader(string filePath);$/;"	p	class:PlayReader	access:public	signature:(string filePath)
PlayReader	PlayReader.h	/^class PlayReader {$/;"	c
PlayReader::ChangeFile	PlayReader.cpp	/^void PlayReader::ChangeFile(cocos2d::CCString filePath) {$/;"	f	class:PlayReader	signature:(cocos2d::CCString filePath)
PlayReader::ChangeFile	PlayReader.h	/^  void ChangeFile(cocos2d::CCString filePath);$/;"	p	class:PlayReader	access:public	signature:(cocos2d::CCString filePath)
PlayReader::GetNextDialog	PlayReader.cpp	/^string PlayReader::GetNextDialog() {$/;"	f	class:PlayReader	signature:()
PlayReader::GetNextDialog	PlayReader.h	/^  string GetNextDialog();$/;"	p	class:PlayReader	access:public	signature:()
PlayReader::PlayReader	PlayReader.cpp	/^PlayReader::PlayReader() {$/;"	f	class:PlayReader	signature:()
PlayReader::PlayReader	PlayReader.cpp	/^PlayReader::PlayReader(string filePath) {$/;"	f	class:PlayReader	signature:(string filePath)
PlayReader::PlayReader	PlayReader.h	/^  PlayReader();$/;"	p	class:PlayReader	access:public	signature:()
PlayReader::PlayReader	PlayReader.h	/^  PlayReader(string filePath);$/;"	p	class:PlayReader	access:public	signature:(string filePath)
PlayReader::PlayerNames	PlayReader.cpp	/^vector<string> PlayReader::PlayerNames() {$/;"	f	class:PlayReader	signature:()
PlayReader::PlayerNames	PlayReader.h	/^  vector<string> PlayerNames();$/;"	p	class:PlayReader	access:public	signature:()
PlayReader::ReadFileWithFullPath	PlayReader.cpp	/^void PlayReader::ReadFileWithFullPath(cocos2d::CCString filePath) {$/;"	f	class:PlayReader	signature:(cocos2d::CCString filePath)
PlayReader::ReadFileWithFullPath	PlayReader.h	/^  void ReadFileWithFullPath(cocos2d::CCString filePath);$/;"	p	class:PlayReader	access:public	signature:(cocos2d::CCString filePath)
PlayReader::curLine	PlayReader.h	/^  unsigned long curLine;$/;"	m	class:PlayReader	access:protected
PlayReader::dialogs	PlayReader.h	/^  vector<string> dialogs;$/;"	m	class:PlayReader	access:protected
PlayReader::getCurLine	PlayReader.cpp	/^int PlayReader::getCurLine() {$/;"	f	class:PlayReader	signature:()
PlayReader::getCurLine	PlayReader.h	/^  int getCurLine();$/;"	p	class:PlayReader	access:public	signature:()
PlayReader::lineNum	PlayReader.h	/^  unsigned long lineNum;$/;"	m	class:PlayReader	access:protected
PlayReader::split	PlayReader.cpp	/^void PlayReader::split(const char * str,const char * deli, vector<string> *list) {$/;"	f	class:PlayReader	signature:(const char * str,const char * deli, vector<string> *list)
PlayReader::split	PlayReader.h	/^  void split(const char * str,const char * deli, vector<string> *list);$/;"	p	class:PlayReader	access:protected	signature:(const char * str,const char * deli, vector<string> *list)
Player	Player.cpp	/^Player::Player() {$/;"	f	class:Player	signature:()
Player	Player.h	/^    Player();$/;"	p	class:Player	access:public	signature:()
Player	Player.h	/^class Player {$/;"	c
Player::Player	Player.cpp	/^Player::Player() {$/;"	f	class:Player	signature:()
Player::Player	Player.h	/^    Player();$/;"	p	class:Player	access:public	signature:()
Player::blood	Player.h	/^    int blood;$/;"	m	class:Player	access:private
Player::getAttackWithMethod	Player.cpp	/^bool Player::getAttackWithMethod(int type) {$/;"	f	class:Player	signature:(int type)
Player::getAttackWithMethod	Player.h	/^    bool getAttackWithMethod(int type);$/;"	p	class:Player	access:public	signature:(int type)
Player::getBlood	Player.cpp	/^int Player::getBlood() {$/;"	f	class:Player	signature:()
Player::getBlood	Player.h	/^    int getBlood();$/;"	p	class:Player	access:public	signature:()
Player::init	Player.cpp	/^void Player::init() {$/;"	f	class:Player	signature:()
Player::init	Player.h	/^    void init();$/;"	p	class:Player	access:public	signature:()
Player::playerGetAttack	Player.cpp	/^bool Player::playerGetAttack(int type)$/;"	f	class:Player	signature:(int type)
Player::playerGetAttack	Player.h	/^	bool playerGetAttack(int type);$/;"	p	class:Player	access:public	signature:(int type)
Player::playerlevel	Player.h	/^		int playerlevel;$/;"	m	class:Player	access:public
Player::totalBlood	Player.h	/^		int totalBlood;$/;"	m	class:Player	access:public
Player::type	Player.h	/^    int type;$/;"	m	class:Player	access:public
PlayerNames	PlayReader.cpp	/^vector<string> PlayReader::PlayerNames() {$/;"	f	class:PlayReader	signature:()
PlayerNames	PlayReader.h	/^  vector<string> PlayerNames();$/;"	p	class:PlayReader	access:public	signature:()
PlayerState	PlayerState.h	/^class PlayerState$/;"	c
PlayerState::exp	PlayerState.h	/^	int exp;$/;"	m	class:PlayerState	access:public
ProcessSaver	PlayReader.cpp	/^ProcessSaver::ProcessSaver() {$/;"	f	class:ProcessSaver	signature:()
ProcessSaver	PlayReader.h	/^  ProcessSaver();$/;"	p	class:ProcessSaver	access:public	signature:()
ProcessSaver	PlayReader.h	/^class ProcessSaver {$/;"	c
ProcessSaver::ProcessSaver	PlayReader.cpp	/^ProcessSaver::ProcessSaver() {$/;"	f	class:ProcessSaver	signature:()
ProcessSaver::ProcessSaver	PlayReader.h	/^  ProcessSaver();$/;"	p	class:ProcessSaver	access:public	signature:()
ProcessSaver::_mapProcess	PlayReader.h	/^  int _x, _y, _mapProcess;$/;"	m	class:ProcessSaver	access:private
ProcessSaver::_process	PlayReader.h	/^  int _process;$/;"	m	class:ProcessSaver	access:private
ProcessSaver::_x	PlayReader.h	/^  int _x, _y, _mapProcess;$/;"	m	class:ProcessSaver	access:private
ProcessSaver::_y	PlayReader.h	/^  int _x, _y, _mapProcess;$/;"	m	class:ProcessSaver	access:private
ProcessSaver::getMapProcess	PlayReader.cpp	/^int ProcessSaver::getMapProcess() {$/;"	f	class:ProcessSaver	signature:()
ProcessSaver::getMapProcess	PlayReader.h	/^  int getMapProcess();$/;"	p	class:ProcessSaver	access:public	signature:()
ProcessSaver::getPositionX	PlayReader.cpp	/^int ProcessSaver::getPositionX() {$/;"	f	class:ProcessSaver	signature:()
ProcessSaver::getPositionX	PlayReader.h	/^  int getPositionX();$/;"	p	class:ProcessSaver	access:public	signature:()
ProcessSaver::getPositionY	PlayReader.cpp	/^int ProcessSaver::getPositionY() {$/;"	f	class:ProcessSaver	signature:()
ProcessSaver::getPositionY	PlayReader.h	/^  int getPositionY();$/;"	p	class:ProcessSaver	access:public	signature:()
ProcessSaver::getProcess	PlayReader.cpp	/^int ProcessSaver::getProcess() {$/;"	f	class:ProcessSaver	signature:()
ProcessSaver::getProcess	PlayReader.h	/^  int getProcess();$/;"	p	class:ProcessSaver	access:public	signature:()
ProcessSaver::save	PlayReader.cpp	/^void ProcessSaver::save(int x, int y, int mapProcess) {$/;"	f	class:ProcessSaver	signature:(int x, int y, int mapProcess)
ProcessSaver::save	PlayReader.h	/^  void save(int x, int y, int mapProcess);$/;"	p	class:ProcessSaver	access:public	signature:(int x, int y, int mapProcess)
ProcessSaver::saveMapProcess	PlayReader.cpp	/^void ProcessSaver::saveMapProcess(int mapProcess) {$/;"	f	class:ProcessSaver	signature:(int mapProcess)
ProcessSaver::saveMapProcess	PlayReader.h	/^  void saveMapProcess(int mapProcess);$/;"	p	class:ProcessSaver	access:public	signature:(int mapProcess)
ProcessSaver::savePosition	PlayReader.cpp	/^void ProcessSaver::savePosition(int x, int y) {$/;"	f	class:ProcessSaver	signature:(int x, int y)
ProcessSaver::savePosition	PlayReader.h	/^  void savePosition(int x, int y);$/;"	p	class:ProcessSaver	access:public	signature:(int x, int y)
ProcessSaver::saveProcess	PlayReader.cpp	/^void ProcessSaver::saveProcess(int process) {$/;"	f	class:ProcessSaver	signature:(int process)
ProcessSaver::saveProcess	PlayReader.h	/^  void saveProcess(int process);$/;"	p	class:ProcessSaver	access:public	signature:(int process)
RELOAD_EVT	AppMacros.h	159;"	d
ROADSIGN_EVT	AppMacros.h	113;"	d
RWINDOW	AppMacros.h	24;"	d
RWINDOW_IMG_PATH	GlobalPath.h	21;"	d
RcdUtil	RcdUtil.h	/^class RcdUtil$/;"	c
RcdUtil::saveList	RcdUtil.cpp	/^void RcdUtil::saveList(CCArray* list, char delim)$/;"	f	class:RcdUtil	signature:(CCArray* list, char delim)
RcdUtil::saveList	RcdUtil.h	/^	static void saveList(CCArray* list, char delim);$/;"	p	class:RcdUtil	access:public	signature:(CCArray* list, char delim)
RcdUtil::split	RcdUtil.cpp	/^CCArray* RcdUtil::split(CCString* line, char delim)$/;"	f	class:RcdUtil	signature:(CCString* line, char delim)
RcdUtil::split	RcdUtil.h	/^	static CCArray* split(CCString* line, char delim);$/;"	p	class:RcdUtil	access:public	signature:(CCString* line, char delim)
ReadFileWithFullPath	PlayReader.cpp	/^void PlayReader::ReadFileWithFullPath(cocos2d::CCString filePath) {$/;"	f	class:PlayReader	signature:(cocos2d::CCString filePath)
ReadFileWithFullPath	PlayReader.h	/^  void ReadFileWithFullPath(cocos2d::CCString filePath);$/;"	p	class:PlayReader	access:public	signature:(cocos2d::CCString filePath)
ReloadEvent	ReloadEvent.h	/^class ReloadEvent: public Event$/;"	c	inherits:Event
ReloadEvent::CREATE_FUNC	ReloadEvent.h	/^    CREATE_FUNC(ReloadEvent);$/;"	p	class:ReloadEvent	access:public	signature:(ReloadEvent)
ReloadEvent::happen	ReloadEvent.cpp	/^void ReloadEvent::happen()$/;"	f	class:ReloadEvent	signature:()
ReloadEvent::happen	ReloadEvent.h	/^    void happen();$/;"	p	class:ReloadEvent	access:public	signature:()
Right	AppMacros.h	/^typedef enum{Down=0,Left=1,Right=2,Up=3}FaceDirection;$/;"	e	enum:__anon3
Role	Role.h	/^class Role:public CCNode$/;"	c	inherits:CCNode
Role::CREATE_FUNC	Role.h	/^	CREATE_FUNC(Role);$/;"	p	class:Role	access:public	signature:(Role)
Role::currentHp	Role.h	/^	int currentHp;$/;"	m	class:Role	access:public
Role::exp	Role.h	/^	int exp;$/;"	m	class:Role	access:public
Role::healthPoint	Role.h	/^	int healthPoint;$/;"	m	class:Role	access:public
Role::init	Role.cpp	/^bool Role::init()$/;"	f	class:Role	signature:()
Role::init	Role.h	/^	virtual bool init();$/;"	p	class:Role	access:public	signature:()
Role::level	Role.h	/^	int level;$/;"	m	class:Role	access:public
SAVE_BOOL	GlobalState.cpp	4;"	d	file:
SAVE_INT	GlobalState.cpp	3;"	d	file:
SAVE_STRING	GlobalState.cpp	5;"	d	file:
SCENE_ID_INDEX	SceneChEvent.h	4;"	d
SCRIPT_PATH	GlobalPath.h	37;"	d
SCRIPT_PATH_LEN	GlobalPath.h	38;"	d
SHADOW_EVT	AppMacros.h	158;"	d
SH_STAND_P_INI	AppMacros.h	80;"	d
SH_STAND_P_MRCD	AppMacros.h	57;"	d
SLIDERTHUMB_IMG_PATH	GlobalPath.h	77;"	d
SPEABL	Ability.h	10;"	d
SPEED_INI	AppMacros.h	85;"	d
SPEED_SRCD	AppMacros.h	63;"	d
STAFFBG_IMG_PATH	GlobalPath.h	51;"	d
STAFF_IMG_PATH	GlobalPath.h	52;"	d
STAGGER	AnimLib.h	7;"	d
STANDING	Map.h	15;"	d
STANDTRG_ATT	AppMacros.h	109;"	d
STAND_TRIG	AppMacros.h	148;"	d
STAND_TRIG_IMGNO	AppMacros.h	149;"	d
START1_PATH	GlobalPath.h	8;"	d
START2_PATH	GlobalPath.h	9;"	d
STD_WALK_DURATION	WalkingMan.h	9;"	d
STEALTH	AnimLib.h	12;"	d
STEALTHIN	AnimLib.h	16;"	d
STEALTHOUT	AnimLib.h	15;"	d
STEALTH_INI	AppMacros.h	87;"	d
STEALTH_SRCD	AppMacros.h	65;"	d
STORYCNT_INI	AppMacros.h	78;"	d
STORYCNT_MRCD	AppMacros.h	55;"	d
STORY_TIME_INI	AppMacros.h	81;"	d
STORY_TIME_MRCD	AppMacros.h	58;"	d
STRIKE	AnimLib.h	8;"	d
SURF_INI	AppMacros.h	88;"	d
SURF_SRCD	AppMacros.h	66;"	d
SWAY	AnimLib.h	17;"	d
SceneChEvent	SceneChEvent.h	/^class SceneChEvent: public Event$/;"	c	inherits:Event
SceneChEvent::happen	SceneChEvent.cpp	/^void SceneChEvent::happen()$/;"	f	class:SceneChEvent	signature:()
SceneChEvent::happen	SceneChEvent.h	/^    void happen();$/;"	p	class:SceneChEvent	access:public	signature:()
ShadowingMan	ShadowingMan.h	/^class ShadowingMan: public WalkingMan$/;"	c	inherits:WalkingMan
ShadowingMan::CREATE_FUNC	ShadowingMan.h	/^    CREATE_FUNC(ShadowingMan);$/;"	p	class:ShadowingMan	access:public	signature:(ShadowingMan)
ShadowingMan::init	ShadowingMan.cpp	/^bool ShadowingMan::init()$/;"	f	class:ShadowingMan	signature:()
ShadowingMan::init	ShadowingMan.h	/^	bool init();$/;"	p	class:ShadowingMan	access:public	signature:()
ShadowingMan::shadow	ShadowingMan.cpp	/^void ShadowingMan::shadow(CCObject* heroPos)$/;"	f	class:ShadowingMan	signature:(CCObject* heroPos)
ShadowingMan::shadow	ShadowingMan.h	/^	void shadow(CCObject* direction);$/;"	p	class:ShadowingMan	access:public	signature:(CCObject* direction)
ShadowingMan::~ShadowingMan	ShadowingMan.cpp	/^ShadowingMan::~ShadowingMan()$/;"	f	class:ShadowingMan	signature:()
ShadowingMan::~ShadowingMan	ShadowingMan.h	/^	~ShadowingMan();$/;"	p	class:ShadowingMan	access:public	signature:()
Singleton	Singleton.hpp	/^class Singleton$/;"	c
Singleton::_instance	Singleton.hpp	/^	static T* _instance;$/;"	m	class:Singleton	access:protected
Singleton::_instance	Singleton.hpp	/^T* Singleton<T>::_instance=NULL;$/;"	m	class:Singleton
Singleton::instance	Singleton.hpp	/^	static T* instance();$/;"	p	class:Singleton	access:public	signature:()
Singleton::instance	Singleton.hpp	/^T* Singleton<T>::instance()$/;"	f	class:Singleton	signature:()
Singleton::release	Singleton.hpp	/^	void release();$/;"	p	class:Singleton	access:public	signature:()
Singleton::release	Singleton.hpp	/^void Singleton<T>::release()$/;"	f	class:Singleton	signature:()
StandingMan	StandingMan.h	/^class StandingMan: public HumanEntity$/;"	c	inherits:HumanEntity
StandingMan::CREATE_FUNC	StandingMan.h	/^	CREATE_FUNC(StandingMan);$/;"	p	class:StandingMan	access:public	signature:(StandingMan)
StandingMan::create	StandingMan.cpp	/^StandingMan* StandingMan::create(int picNo,int id)$/;"	f	class:StandingMan	signature:(int picNo,int id)
StandingMan::create	StandingMan.h	/^	static StandingMan* create(int picNo,int id);$/;"	p	class:StandingMan	access:public	signature:(int picNo,int id)
StandingMan::endRespond	StandingMan.cpp	/^void StandingMan::endRespond()$/;"	f	class:StandingMan	signature:()
StandingMan::endRespond	StandingMan.h	/^	void endRespond();$/;"	p	class:StandingMan	access:public	signature:()
StandingMan::goWalking	StandingMan.cpp	/^void StandingMan::goWalking(float dt)$/;"	f	class:StandingMan	signature:(float dt)
StandingMan::goWalking	StandingMan.h	/^	void goWalking(float dt);$/;"	p	class:StandingMan	access:private	signature:(float dt)
StandingMan::init	StandingMan.cpp	/^bool StandingMan::init()$/;"	f	class:StandingMan	signature:()
StandingMan::init	StandingMan.h	/^	bool init();$/;"	p	class:StandingMan	access:private	signature:()
StandingMan::respond	StandingMan.cpp	/^void StandingMan::respond(int direction)$/;"	f	class:StandingMan	signature:(int direction)
StandingMan::respond	StandingMan.h	/^	void respond(int dir);$/;"	p	class:StandingMan	access:public	signature:(int dir)
StoryWorld	Story.h	/^class StoryWorld : public cocos2d::CCLayer$/;"	c	inherits:cocos2d::CCLayer
StoryWorld::CREATE_FUNC	Story.h	/^  CREATE_FUNC(StoryWorld);$/;"	p	class:StoryWorld	access:public	signature:(StoryWorld)
StoryWorld::allChoice	Story.h	/^  enum allChoice {fChoice = 10, sChoice, tChoice};$/;"	g	class:StoryWorld	access:protected
StoryWorld::audioSwitchCase	Story.cpp	/^void StoryWorld::audioSwitchCase(int code) {$/;"	f	class:StoryWorld	signature:(int code)
StoryWorld::audioSwitchCase	Story.h	/^  void audioSwitchCase(int code);$/;"	p	class:StoryWorld	access:protected	signature:(int code)
StoryWorld::avgGame	Story.cpp	/^void StoryWorld::avgGame(void) {$/;"	f	class:StoryWorld	signature:(void)
StoryWorld::avgGame	Story.h	/^  void avgGame(void);$/;"	p	class:StoryWorld	access:protected	signature:(void)
StoryWorld::ccTouchBegan	Story.cpp	/^bool StoryWorld::ccTouchBegan(CCTouch *pTouch, CCEvent *pEvent)$/;"	f	class:StoryWorld	signature:(CCTouch *pTouch, CCEvent *pEvent)
StoryWorld::ccTouchBegan	Story.h	/^  bool ccTouchBegan(CCTouch *pTouch, CCEvent *pEvent);$/;"	p	class:StoryWorld	access:protected	signature:(CCTouch *pTouch, CCEvent *pEvent)
StoryWorld::ccTouchEnded	Story.cpp	/^void StoryWorld::ccTouchEnded(cocos2d::CCTouch *pTouch, cocos2d::CCEvent *pEvent){$/;"	f	class:StoryWorld	signature:(cocos2d::CCTouch *pTouch, cocos2d::CCEvent *pEvent)
StoryWorld::ccTouchEnded	Story.h	/^  void ccTouchEnded(cocos2d::CCTouch *pTouch, cocos2d::CCEvent *pEvent);$/;"	p	class:StoryWorld	access:protected	signature:(cocos2d::CCTouch *pTouch, cocos2d::CCEvent *pEvent)
StoryWorld::characterPasterSwitchCase	Story.cpp	/^void StoryWorld::characterPasterSwitchCase(int code) {$/;"	f	class:StoryWorld	signature:(int code)
StoryWorld::characterPasterSwitchCase	Story.h	/^  void characterPasterSwitchCase(int code);$/;"	p	class:StoryWorld	access:protected	signature:(int code)
StoryWorld::confirmButtonHandler	Story.cpp	/^void StoryWorld::confirmButtonHandler(CCObject *sender) {$/;"	f	class:StoryWorld	signature:(CCObject *sender)
StoryWorld::confirmButtonHandler	Story.h	/^  void confirmButtonHandler(CCObject *sender);$/;"	p	class:StoryWorld	access:protected	signature:(CCObject *sender)
StoryWorld::current	Story.h	/^  char current;$/;"	m	class:StoryWorld	access:protected
StoryWorld::dialog	Story.h	/^  char dialog[512];$/;"	m	class:StoryWorld	access:protected
StoryWorld::fChoice	Story.h	/^  enum allChoice {fChoice = 10, sChoice, tChoice};$/;"	e	enum:StoryWorld::allChoice
StoryWorld::gameOverAndBackToWelcome	Story.cpp	/^void StoryWorld::gameOverAndBackToWelcome() {$/;"	f	class:StoryWorld	signature:()
StoryWorld::gameOverAndBackToWelcome	Story.h	/^  void gameOverAndBackToWelcome();$/;"	p	class:StoryWorld	access:protected	signature:()
StoryWorld::init	Story.cpp	/^bool StoryWorld::init() {$/;"	f	class:StoryWorld	signature:()
StoryWorld::init	Story.h	/^  virtual bool init();$/;"	p	class:StoryWorld	access:public	signature:()
StoryWorld::leafletChoiceHandler	Story.cpp	/^void StoryWorld::leafletChoiceHandler(CCObject *sender) {$/;"	f	class:StoryWorld	signature:(CCObject *sender)
StoryWorld::leafletChoiceHandler	Story.h	/^  void leafletChoiceHandler(CCObject *sender);$/;"	p	class:StoryWorld	access:protected	signature:(CCObject *sender)
StoryWorld::menuCloseCallback	Story.cpp	/^void StoryWorld::menuCloseCallback(CCObject* pSender) {$/;"	f	class:StoryWorld	signature:(CCObject* pSender)
StoryWorld::menuCloseCallback	Story.h	/^  void menuCloseCallback(CCObject* pSender);$/;"	p	class:StoryWorld	access:protected	signature:(CCObject* pSender)
StoryWorld::menuLeafletsCloseCallback	Story.cpp	/^void StoryWorld::menuLeafletsCloseCallback(CCObject* sender) {$/;"	f	class:StoryWorld	signature:(CCObject* sender)
StoryWorld::menuLeafletsCloseCallback	Story.h	/^  void menuLeafletsCloseCallback(CCObject* sender);$/;"	p	class:StoryWorld	access:protected	signature:(CCObject* sender)
StoryWorld::reader	Story.h	/^  PlayReader reader;$/;"	m	class:StoryWorld	access:protected
StoryWorld::registerWithTouchDispatcher	Story.cpp	/^void StoryWorld::registerWithTouchDispatcher(void)$/;"	f	class:StoryWorld	signature:(void)
StoryWorld::registerWithTouchDispatcher	Story.h	/^  void registerWithTouchDispatcher(void);$/;"	p	class:StoryWorld	access:protected	signature:(void)
StoryWorld::sChoice	Story.h	/^  enum allChoice {fChoice = 10, sChoice, tChoice};$/;"	e	enum:StoryWorld::allChoice
StoryWorld::saveProcessAndPopOut	Story.cpp	/^void StoryWorld::saveProcessAndPopOut() {$/;"	f	class:StoryWorld	signature:()
StoryWorld::saveProcessAndPopOut	Story.h	/^  void saveProcessAndPopOut();$/;"	p	class:StoryWorld	access:protected	signature:()
StoryWorld::scene	Story.cpp	/^CCScene* StoryWorld::scene() {$/;"	f	class:StoryWorld	signature:()
StoryWorld::scene	Story.h	/^  static cocos2d::CCScene* scene();$/;"	p	class:StoryWorld	access:public	signature:()
StoryWorld::specialPartSwitchCase	Story.cpp	/^void StoryWorld::specialPartSwitchCase(int code) {$/;"	f	class:StoryWorld	signature:(int code)
StoryWorld::specialPartSwitchCase	Story.h	/^  void specialPartSwitchCase(int code);$/;"	p	class:StoryWorld	access:protected	signature:(int code)
StoryWorld::tChoice	Story.h	/^  enum allChoice {fChoice = 10, sChoice, tChoice};$/;"	e	enum:StoryWorld::allChoice
StoryWorld::theFinalChoiceHandler	Story.cpp	/^void StoryWorld::theFinalChoiceHandler(CCObject *sender) {$/;"	f	class:StoryWorld	signature:(CCObject *sender)
StoryWorld::theFinalChoiceHandler	Story.h	/^  void theFinalChoiceHandler(CCObject *sender);$/;"	p	class:StoryWorld	access:protected	signature:(CCObject *sender)
StringUtil	StringUtil.h	/^class StringUtil : public CCObject {$/;"	c	inherits:CCObject
StringUtil::init	StringUtil.cpp	/^bool StringUtil::init(){$/;"	f	class:StringUtil	signature:()
StringUtil::init	StringUtil.h	/^    bool init();$/;"	p	class:StringUtil	access:public	signature:()
StringUtil::mStringUtil	StringUtil.cpp	/^StringUtil* StringUtil::mStringUtil = NULL;$/;"	m	class:StringUtil	file:
StringUtil::mStringUtil	StringUtil.h	/^    static StringUtil* mStringUtil;$/;"	m	class:StringUtil	access:private
StringUtil::sharedStrUtil	StringUtil.cpp	/^StringUtil* StringUtil::sharedStrUtil(){$/;"	f	class:StringUtil	signature:()
StringUtil::sharedStrUtil	StringUtil.h	/^    static StringUtil* sharedStrUtil();$/;"	p	class:StringUtil	access:public	signature:()
StringUtil::split	StringUtil.cpp	/^CCArray* StringUtil::split( const char* srcStr, const char* sSep ){$/;"	f	class:StringUtil	signature:( const char* srcStr, const char* sSep )
StringUtil::split	StringUtil.h	/^    CCArray* split(const char* srcStr, const char* sSep);$/;"	p	class:StringUtil	access:public	signature:(const char* srcStr, const char* sSep)
SuperPower	SuperPower.cpp	/^SuperPower::SuperPower()$/;"	f	class:SuperPower	signature:()
SuperPower	SuperPower.cpp	/^SuperPower::SuperPower(float sp,bool tl,bool st,bool sf,bool fl)$/;"	f	class:SuperPower	signature:(float sp,bool tl,bool st,bool sf,bool fl)
SuperPower	SuperPower.h	/^	SuperPower();$/;"	p	class:SuperPower	access:public	signature:()
SuperPower	SuperPower.h	/^	SuperPower(float sp,bool tl,bool st,bool sf,bool fl);$/;"	p	class:SuperPower	access:public	signature:(float sp,bool tl,bool st,bool sf,bool fl)
SuperPower	SuperPower.h	/^class SuperPower$/;"	c
SuperPower::SuperPower	SuperPower.cpp	/^SuperPower::SuperPower()$/;"	f	class:SuperPower	signature:()
SuperPower::SuperPower	SuperPower.cpp	/^SuperPower::SuperPower(float sp,bool tl,bool st,bool sf,bool fl)$/;"	f	class:SuperPower	signature:(float sp,bool tl,bool st,bool sf,bool fl)
SuperPower::SuperPower	SuperPower.h	/^	SuperPower();$/;"	p	class:SuperPower	access:public	signature:()
SuperPower::SuperPower	SuperPower.h	/^	SuperPower(float sp,bool tl,bool st,bool sf,bool fl);$/;"	p	class:SuperPower	access:public	signature:(float sp,bool tl,bool st,bool sf,bool fl)
SuperPower::all	SuperPower.h	/^	bool all;$/;"	m	class:SuperPower	access:public
SuperPower::flash	SuperPower.h	/^	bool flash;$/;"	m	class:SuperPower	access:public
SuperPower::speed	SuperPower.h	/^	float speed;$/;"	m	class:SuperPower	access:public
SuperPower::stealth	SuperPower.h	/^	bool stealth;$/;"	m	class:SuperPower	access:public
SuperPower::surf	SuperPower.h	/^	bool surf;$/;"	m	class:SuperPower	access:public
SuperPower::teleport	SuperPower.h	/^	bool teleport;$/;"	m	class:SuperPower	access:public
TAISHANYADING	AnimLib.h	6;"	d
TALKATIVEMAN_EVT	AppMacros.h	114;"	d
TALKMAN_EVT	AppMacros.h	155;"	d
TELEPORTIN	AnimLib.h	14;"	d
TELEPORTOUT	AnimLib.h	13;"	d
TELEPORT_INI	AppMacros.h	86;"	d
TELEPORT_SRCD	AppMacros.h	64;"	d
TOUCHSCREEN	AppMacros.h	29;"	d
TOUCH_POINT_MAP_PATH	GlobalPath.h	87;"	d
TRUE	AppMacros.h	181;"	d
TURNING	Map.h	16;"	d
TalkManEvent	TalkManEvent.h	/^class TalkManEvent: public Event$/;"	c	inherits:Event
TalkManEvent::CREATE_FUNC	TalkManEvent.h	/^    CREATE_FUNC(TalkManEvent);$/;"	p	class:TalkManEvent	access:public	signature:(TalkManEvent)
TalkManEvent::happen	TalkManEvent.cpp	/^void TalkManEvent::happen()$/;"	f	class:TalkManEvent	signature:()
TalkManEvent::happen	TalkManEvent.h	/^    void happen();$/;"	p	class:TalkManEvent	access:public	signature:()
TimeElapseEvent	TimeElapse.h	/^class TimeElapseEvent: public Event$/;"	c	inherits:Event
TimeElapseEvent	TimeElapseEvent.h	/^class TimeElapseEvent: public Event$/;"	c	inherits:Event
TimeElapseEvent::happen	TimeElapse.h	/^    void happen();$/;"	p	class:TimeElapseEvent	access:public	signature:()
TimeElapseEvent::happen	TimeElapseEvent.cpp	/^void TimeElapseEvent::happen()$/;"	f	class:TimeElapseEvent	signature:()
TimeElapseEvent::happen	TimeElapseEvent.h	/^    void happen();$/;"	p	class:TimeElapseEvent	access:public	signature:()
TimeUtil	TimeUtil.h	/^class TimeUtil$/;"	c
TimeUtil::getHour	TimeUtil.cpp	/^int TimeUtil::getHour()$/;"	f	class:TimeUtil	signature:()
TimeUtil::getHour	TimeUtil.h	/^	static int getHour();$/;"	p	class:TimeUtil	access:public	signature:()
TimeUtil::getWeekDay	TimeUtil.cpp	/^int TimeUtil::getWeekDay()$/;"	f	class:TimeUtil	signature:()
TimeUtil::getWeekDay	TimeUtil.h	/^	static int getWeekDay();$/;"	p	class:TimeUtil	access:public	signature:()
TimeUtil::isNight	TimeUtil.cpp	/^int TimeUtil::isNight(int hh)$/;"	f	class:TimeUtil	signature:(int hh)
TimeUtil::isNight	TimeUtil.h	/^	static bool isNight(int hh);$/;"	p	class:TimeUtil	access:public	signature:(int hh)
TimeUtil::timeInitiate	TimeUtil.cpp	/^void TimeUtil::timeInitiate()$/;"	f	class:TimeUtil	signature:()
TimeUtil::timeInitiate	TimeUtil.h	/^	static void timeInitiate();$/;"	p	class:TimeUtil	access:public	signature:()
TouchScreen	TouchScreen.h	/^class TouchScreen: public Button$/;"	c	inherits:Button
TouchScreen::CREATE_FUNC	TouchScreen.h	/^	CREATE_FUNC(TouchScreen);$/;"	p	class:TouchScreen	access:public	signature:(TouchScreen)
TouchScreen::buttonA	TouchScreen.h	/^	Button* buttonA;$/;"	m	class:TouchScreen	access:private
TouchScreen::ccTouchesBegan	TouchScreen.cpp	/^void TouchScreen::ccTouchesBegan(CCSet* pTouch, CCEvent *pEvent)$/;"	f	class:TouchScreen	signature:(CCSet* pTouch, CCEvent *pEvent)
TouchScreen::ccTouchesBegan	TouchScreen.h	/^	void ccTouchesBegan(CCSet* pTouch, CCEvent *pEvent);$/;"	p	class:TouchScreen	access:public	signature:(CCSet* pTouch, CCEvent *pEvent)
TouchScreen::ccTouchesEnded	TouchScreen.cpp	/^void TouchScreen::ccTouchesEnded(CCSet* pTouch, CCEvent *pEvent)$/;"	f	class:TouchScreen	signature:(CCSet* pTouch, CCEvent *pEvent)
TouchScreen::ccTouchesEnded	TouchScreen.h	/^	void ccTouchesEnded(CCSet* pTouch, CCEvent *pEvent);$/;"	p	class:TouchScreen	access:public	signature:(CCSet* pTouch, CCEvent *pEvent)
TouchScreen::ccTouchesMoved	TouchScreen.cpp	/^void TouchScreen::ccTouchesMoved(CCSet* pTouch, CCEvent *pEvent)$/;"	f	class:TouchScreen	signature:(CCSet* pTouch, CCEvent *pEvent)
TouchScreen::ccTouchesMoved	TouchScreen.h	/^	void ccTouchesMoved(CCSet* pTouch, CCEvent *pEvent);	$/;"	p	class:TouchScreen	access:public	signature:(CCSet* pTouch, CCEvent *pEvent)
TouchScreen::dirButton	TouchScreen.h	/^	Button* dirButton;$/;"	m	class:TouchScreen	access:private
TouchScreen::doShrink	TouchScreen.h	/^	bool doShrink;$/;"	m	class:TouchScreen	access:private
TouchScreen::hero	TouchScreen.h	/^	Hero* hero;$/;"	m	class:TouchScreen	access:private
TouchScreen::init	TouchScreen.cpp	/^bool TouchScreen::init()$/;"	f	class:TouchScreen	signature:()
TouchScreen::init	TouchScreen.h	/^	bool init();$/;"	p	class:TouchScreen	access:public	signature:()
TouchScreen::setPointers	TouchScreen.cpp	/^void TouchScreen::setPointers(Hero* hero,Button* buttonA, Button* dirButton)$/;"	f	class:TouchScreen	signature:(Hero* hero,Button* buttonA, Button* dirButton)
TouchScreen::setPointers	TouchScreen.h	/^	void setPointers(Hero* hero,Button* buttonA, Button* dirButton);$/;"	p	class:TouchScreen	access:public	signature:(Hero* hero,Button* buttonA, Button* dirButton)
TouchScreen::teleportTo	TouchScreen.cpp	/^void TouchScreen::teleportTo(CCSet* pTouch, CCEvent *pEvent)$/;"	f	class:TouchScreen	signature:(CCSet* pTouch, CCEvent *pEvent)
TouchScreen::teleportTo	TouchScreen.h	/^	void teleportTo(CCSet* pTouch, CCEvent *pEvent);$/;"	p	class:TouchScreen	access:private	signature:(CCSet* pTouch, CCEvent *pEvent)
TouchScreen::zoomStroke	TouchScreen.cpp	/^void TouchScreen::zoomStroke(CCSet* pTouches, CCEvent *pEvent)$/;"	f	class:TouchScreen	signature:(CCSet* pTouches, CCEvent *pEvent)
TouchScreen::zoomStroke	TouchScreen.h	/^	void zoomStroke(CCSet* pTouch, CCEvent *pEvent);$/;"	p	class:TouchScreen	access:private	signature:(CCSet* pTouch, CCEvent *pEvent)
TurningMan	TurningMan.h	/^class TurningMan: public HumanEntity$/;"	c	inherits:HumanEntity
TurningMan::CREATE_FUNC	TurningMan.h	/^	CREATE_FUNC(TurningMan);$/;"	p	class:TurningMan	access:public	signature:(TurningMan)
TurningMan::create	TurningMan.cpp	/^TurningMan* TurningMan::create(int picNo,int id)$/;"	f	class:TurningMan	signature:(int picNo,int id)
TurningMan::create	TurningMan.h	/^	static TurningMan* create(int picNo,int id);$/;"	p	class:TurningMan	access:public	signature:(int picNo,int id)
TurningMan::endRespond	TurningMan.cpp	/^void TurningMan::endRespond()$/;"	f	class:TurningMan	signature:()
TurningMan::endRespond	TurningMan.h	/^	void endRespond();$/;"	p	class:TurningMan	access:public	signature:()
TurningMan::forever	TurningMan.h	/^	CCFiniteTimeAction* forever;$/;"	m	class:TurningMan	access:private
TurningMan::goWalking	TurningMan.cpp	/^void TurningMan::goWalking(float dt)$/;"	f	class:TurningMan	signature:(float dt)
TurningMan::goWalking	TurningMan.h	/^	void goWalking(float dt);$/;"	p	class:TurningMan	access:private	signature:(float dt)
TurningMan::init	TurningMan.cpp	/^bool TurningMan::init()$/;"	f	class:TurningMan	signature:()
TurningMan::init	TurningMan.h	/^	bool init();$/;"	p	class:TurningMan	access:private	signature:()
TurningMan::initAnim	TurningMan.cpp	/^void TurningMan::initAnim(int dir)$/;"	f	class:TurningMan	signature:(int dir)
TurningMan::initAnim	TurningMan.h	/^	void initAnim(int dir);$/;"	p	class:TurningMan	access:private	signature:(int dir)
TurningMan::respond	TurningMan.cpp	/^void TurningMan::respond(int dir)$/;"	f	class:TurningMan	signature:(int dir)
TurningMan::respond	TurningMan.h	/^	void respond(int dir);$/;"	p	class:TurningMan	access:public	signature:(int dir)
UP	AnimLib.h	10;"	d
USING_NS_CC	AbilityButton.h	/^USING_NS_CC;$/;"	v
USING_NS_CC	Blood.cpp	/^USING_NS_CC;$/;"	v
USING_NS_CC	CombatScene.cpp	/^USING_NS_CC;$/;"	v
UnlockButtonTouch	AbilityButton.cpp	/^void AbilityButton::UnlockButtonTouch()$/;"	f	class:AbilityButton	signature:()
UnlockButtonTouch	AbilityButton.h	/^	void UnlockButtonTouch();$/;"	p	class:AbilityButton	access:public	signature:()
Up	AppMacros.h	/^typedef enum{Down=0,Left=1,Right=2,Up=3}FaceDirection;$/;"	e	enum:__anon3
VDRAWING_IMG_PATH	GlobalPath.h	49;"	d
VectorLoader	VectorLoader.h	/^class VectorLoader$/;"	c
VectorLoader::start	VectorLoader.cpp	/^std::vector<CCPoint> VectorLoader::start(CCArray* intArray)$/;"	f	class:VectorLoader	signature:(CCArray* intArray)
VectorLoader::start	VectorLoader.h	/^    static std::vector<CCPoint> start(CCArray* intArray);$/;"	p	class:VectorLoader	access:public	signature:(CCArray* intArray)
WALKING	Map.h	17;"	d
WALL_MLYR	AppMacros.h	44;"	d
WATERY_EVT	AppMacros.h	161;"	d
WATER_BTN_IMG_PATH	GlobalPath.h	62;"	d
WATER_DOWN_BTN_IMG_PATH	GlobalPath.h	65;"	d
WATER_MLYR	AppMacros.h	47;"	d
WATER_PLIST_IMG_PATH	GlobalPath.h	70;"	d
WATER_PNG_IMG_PATH	GlobalPath.h	71;"	d
WHOLE_MAP_MAP_PATH	GlobalPath.h	85;"	d
WIN_ON_PANEL_ZOR	AppMacros.h	176;"	d
WOOD_BTN_IMG_PATH	GlobalPath.h	63;"	d
WOOD_DOWN_BTN_IMG_PATH	GlobalPath.h	66;"	d
WOOD_PLIST_IMG_PATH	GlobalPath.h	72;"	d
WOOD_PNG_IMG_PATH	GlobalPath.h	73;"	d
WalkingMan	WalkingMan.h	/^class WalkingMan:public HumanEntity$/;"	c	inherits:HumanEntity
WalkingMan::CREATE_FUNC	WalkingMan.h	/^    CREATE_FUNC(WalkingMan);$/;"	p	class:WalkingMan	access:public	signature:(WalkingMan)
WalkingMan::afterStep	WalkingMan.cpp	/^void WalkingMan::afterStep()$/;"	f	class:WalkingMan	signature:()
WalkingMan::afterStep	WalkingMan.h	/^    void afterStep();$/;"	p	class:WalkingMan	access:protected	signature:()
WalkingMan::beforeStep	WalkingMan.cpp	/^void WalkingMan::beforeStep()$/;"	f	class:WalkingMan	signature:()
WalkingMan::beforeStep	WalkingMan.h	/^    void beforeStep();$/;"	p	class:WalkingMan	access:protected	signature:()
WalkingMan::cnt	WalkingMan.h	/^    int cnt;$/;"	m	class:WalkingMan	access:public
WalkingMan::create	WalkingMan.cpp	/^WalkingMan* WalkingMan::create(int picNo,int id)$/;"	f	class:WalkingMan	signature:(int picNo,int id)
WalkingMan::create	WalkingMan.h	/^    static WalkingMan* create(int picNo,int id);$/;"	p	class:WalkingMan	access:public	signature:(int picNo,int id)
WalkingMan::createAnimationForDirection	WalkingMan.cpp	/^CCAnimation* WalkingMan::createAnimationForDirection(int dirc)$/;"	f	class:WalkingMan	signature:(int dirc)
WalkingMan::createAnimationForDirection	WalkingMan.h	/^    virtual CCAnimation* createAnimationForDirection(int dirc);$/;"	p	class:WalkingMan	access:protected	signature:(int dirc)
WalkingMan::endRespond	WalkingMan.cpp	/^void WalkingMan::endRespond()$/;"	f	class:WalkingMan	signature:()
WalkingMan::endRespond	WalkingMan.h	/^    void endRespond();$/;"	p	class:WalkingMan	access:public	signature:()
WalkingMan::forever	WalkingMan.h	/^    CCFiniteTimeAction* forever;$/;"	m	class:WalkingMan	access:public
WalkingMan::getDirection	WalkingMan.cpp	/^FaceDirection WalkingMan::getDirection(CCPoint vect)$/;"	f	class:WalkingMan	signature:(CCPoint vect)
WalkingMan::getDirection	WalkingMan.h	/^    FaceDirection getDirection(CCPoint vect);$/;"	p	class:WalkingMan	access:protected	signature:(CCPoint vect)
WalkingMan::go	WalkingMan.cpp	/^void WalkingMan::go()$/;"	f	class:WalkingMan	signature:()
WalkingMan::go	WalkingMan.h	/^    void go();$/;"	p	class:WalkingMan	access:protected	signature:()
WalkingMan::goWalking	WalkingMan.cpp	/^void WalkingMan::goWalking(float dt)$/;"	f	class:WalkingMan	signature:(float dt)
WalkingMan::goWalking	WalkingMan.h	/^    virtual void goWalking(float dt);$/;"	p	class:WalkingMan	access:protected	signature:(float dt)
WalkingMan::init	WalkingMan.cpp	/^bool WalkingMan::init()$/;"	f	class:WalkingMan	signature:()
WalkingMan::init	WalkingMan.h	/^    bool init();$/;"	p	class:WalkingMan	access:protected	signature:()
WalkingMan::initAnim	WalkingMan.cpp	/^CCActionInterval* WalkingMan::initAnim(std::vector<CCPoint> route)$/;"	f	class:WalkingMan	signature:(std::vector<CCPoint> route)
WalkingMan::initAnim	WalkingMan.h	/^    CCActionInterval* initAnim(std::vector<CCPoint> route);$/;"	p	class:WalkingMan	access:protected	signature:(std::vector<CCPoint> route)
WalkingMan::initAnimation	WalkingMan.cpp	/^void WalkingMan::initAnimation()$/;"	f	class:WalkingMan	signature:()
WalkingMan::initAnimation	WalkingMan.h	/^    void initAnimation();$/;"	p	class:WalkingMan	access:protected	signature:()
WalkingMan::isWalking	WalkingMan.h	/^    bool isWalking;$/;"	m	class:WalkingMan	access:public
WalkingMan::manWalk	WalkingMan.h	/^    CCFiniteTimeAction* manWalk;$/;"	m	class:WalkingMan	access:public
WalkingMan::respond	WalkingMan.cpp	/^void WalkingMan::respond(int dir)$/;"	f	class:WalkingMan	signature:(int dir)
WalkingMan::respond	WalkingMan.h	/^    void respond(int dir);$/;"	p	class:WalkingMan	access:public	signature:(int dir)
WalkingMan::route	WalkingMan.h	/^    std::vector<CCPoint> route;$/;"	m	class:WalkingMan	access:public
WalkingMan::setRoute	WalkingMan.cpp	/^void WalkingMan::setRoute(std::vector<CCPoint> route)$/;"	f	class:WalkingMan	signature:(std::vector<CCPoint> route)
WalkingMan::setRoute	WalkingMan.h	/^    void setRoute(std::vector<CCPoint> route);$/;"	p	class:WalkingMan	access:public	signature:(std::vector<CCPoint> route)
WalkingMan::walk	WalkingMan.cpp	/^void WalkingMan::walk(CCArray* theRoute)$/;"	f	class:WalkingMan	signature:(CCArray* theRoute)
WalkingMan::walk	WalkingMan.h	/^    void walk(CCArray* theRoute);$/;"	p	class:WalkingMan	access:public	signature:(CCArray* theRoute)
WalkingMan::walkAnimations	WalkingMan.h	/^    cocos2d::CCAnimation** walkAnimations;$/;"	m	class:WalkingMan	access:public
WateryEvent	BloodyEvent.h	/^class WateryEvent: public Event$/;"	c	inherits:Event
WateryEvent::CREATE_FUNC	BloodyEvent.h	/^	CREATE_FUNC(WateryEvent);$/;"	p	class:WateryEvent	access:public	signature:(WateryEvent)
WateryEvent::happen	BloodyEvent.cpp	/^void WateryEvent::happen()$/;"	f	class:WateryEvent	signature:()
WateryEvent::happen	BloodyEvent.h	/^    void happen();$/;"	p	class:WateryEvent	access:public	signature:()
WebView	WebviewScene.h	/^class WebView : public cocos2d::CCLayer$/;"	c	inherits:cocos2d::CCLayer
WebView::CREATE_FUNC	WebviewScene.h	/^    CREATE_FUNC(WebView);$/;"	p	class:WebView	access:public	signature:(WebView)
WebView::init	WebViewScene.cpp	/^bool WebView::init()$/;"	f	class:WebView	signature:()
WebView::init	WebviewScene.h	/^    virtual bool init();  $/;"	p	class:WebView	access:public	signature:()
WebView::menuCloseCallback	WebViewScene.cpp	/^void WebView::menuCloseCallback(CCObject* pSender)$/;"	f	class:WebView	signature:(CCObject* pSender)
WebView::menuCloseCallback	WebviewScene.h	/^    void menuCloseCallback(CCObject* pSender);$/;"	p	class:WebView	access:public	signature:(CCObject* pSender)
WebView::scene	WebViewScene.cpp	/^CCScene* WebView::scene()$/;"	f	class:WebView	signature:()
WebView::scene	WebviewScene.h	/^    static cocos2d::CCScene* scene();$/;"	p	class:WebView	access:public	signature:()
Welcome	Welcome.h	/^class Welcome : public cocos2d::CCLayer$/;"	c	inherits:cocos2d::CCLayer
Welcome::CREATE_FUNC	Welcome.h	/^    CREATE_FUNC(Welcome);$/;"	p	class:Welcome	access:public	signature:(Welcome)
Welcome::ccTouchesEnded	Welcome.cpp	/^void Welcome::ccTouchesEnded(CCSet* pTouches, CCEvent *pEvent)$/;"	f	class:Welcome	signature:(CCSet* pTouches, CCEvent *pEvent)
Welcome::ccTouchesEnded	Welcome.h	/^	void ccTouchesEnded(CCSet* pTouches, CCEvent *pEvent);$/;"	p	class:Welcome	access:public	signature:(CCSet* pTouches, CCEvent *pEvent)
Welcome::init	Welcome.cpp	/^bool Welcome::init() {$/;"	f	class:Welcome	signature:()
Welcome::init	Welcome.h	/^    virtual bool init();$/;"	p	class:Welcome	access:public	signature:()
Welcome::initView	Welcome.cpp	/^void Welcome::initView()$/;"	f	class:Welcome	signature:()
Welcome::initView	Welcome.h	/^	void initView();$/;"	p	class:Welcome	access:private	signature:()
Welcome::menuClearCallback	Welcome.cpp	/^void Welcome::menuClearCallback(CCObject* pSender) {$/;"	f	class:Welcome	signature:(CCObject* pSender)
Welcome::menuClearCallback	Welcome.h	/^	void menuClearCallback(CCObject* pSender);$/;"	p	class:Welcome	access:protected	signature:(CCObject* pSender)
Welcome::menuStartCallback	Welcome.cpp	/^void Welcome::menuStartCallback(CCObject* pSender) {$/;"	f	class:Welcome	signature:(CCObject* pSender)
Welcome::menuStartCallback	Welcome.h	/^    void menuStartCallback(CCObject* pSender);$/;"	p	class:Welcome	access:protected	signature:(CCObject* pSender)
Welcome::prevTouch	Welcome.h	/^	CCTouch* prevTouch;$/;"	m	class:Welcome	access:private
Welcome::scene	Welcome.cpp	/^CCScene* Welcome::scene() {$/;"	f	class:Welcome	signature:()
Welcome::scene	Welcome.h	/^    static cocos2d::CCScene* scene();$/;"	p	class:Welcome	access:public	signature:()
Welcome::state	Welcome.h	/^	int state;$/;"	m	class:Welcome	access:private
Window	Window.h	/^class Window: public CCNode,public ControllerListener$/;"	c	inherits:CCNode,ControllerListener
Window::IntToAddrForPNG	Window.h	/^	static void IntToAddrForPNG(char addr[],int len,int n);$/;"	p	class:Window	access:public	signature:(char addr[],int len,int n)
Window::appear	Window.h	/^	virtual void appear()=0;$/;"	p	class:Window	access:public	signature:()
Window::content	Window.h	/^	CCLabelTTF* content;$/;"	m	class:Window	access:protected
Window::convertCoord	Window.cpp	/^CCPoint Window::convertCoord(CCNode* obj)$/;"	f	class:Window	signature:(CCNode* obj)
Window::convertCoord	Window.h	/^	CCPoint convertCoord(CCNode* obj);$/;"	p	class:Window	access:public	signature:(CCNode* obj)
Window::dialogBox	Window.h	/^	CCSprite* dialogBox;$/;"	m	class:Window	access:protected
Window::disappear	Window.h	/^	virtual void disappear()=0;$/;"	p	class:Window	access:public	signature:()
Window::init	Window.cpp	/^bool Window::init()$/;"	f	class:Window	signature:()
Window::init	Window.h	/^	bool init();$/;"	p	class:Window	access:public	signature:()
Window::initSprite	Window.h	/^	virtual void initSprite()=0;$/;"	p	class:Window	access:public	signature:()
Window::label	Window.h	/^	CCLabelTTF* label;$/;"	m	class:Window	access:protected
Window::load	Window.cpp	/^void Window::load(CCTMXTiledMap* map,CCDictionary *properties)$/;"	f	class:Window	signature:(CCTMXTiledMap* map,CCDictionary *properties)
Window::load	Window.h	/^	virtual void load(CCTMXTiledMap* map,CCDictionary *properties);$/;"	p	class:Window	access:public	signature:(CCTMXTiledMap* map,CCDictionary *properties)
Window::map	Window.h	/^	CCTMXTiledMap* map;$/;"	m	class:Window	access:protected
Window::nextMove	Window.cpp	/^void Window::nextMove()$/;"	f	class:Window	signature:()
Window::nextMove	Window.h	/^	virtual void nextMove();$/;"	p	class:Window	access:public	signature:()
Window::picture	Window.h	/^	CCSprite* picture;$/;"	m	class:Window	access:protected
Window::properties	Window.h	/^	CCDictionary *properties;$/;"	m	class:Window	access:protected
Window::respond	Window.cpp	/^void Window::respond()$/;"	f	class:Window	signature:()
Window::respond	Window.cpp	/^void Window::respond(int dir)$/;"	f	class:Window	signature:(int dir)
Window::respond	Window.h	/^	virtual void respond();$/;"	p	class:Window	access:public	signature:()
Window::respond	Window.h	/^	virtual void respond(int dir);$/;"	p	class:Window	access:public	signature:(int dir)
YOU_LOSE_LBL	CombatScene.cpp	9;"	d	file:
YOU_WIN_LBL	CombatScene.cpp	8;"	d	file:
ZOOMSTROKELEN	AppMacros.h	133;"	d
_ABILITIES_H_	Ability.h	2;"	d
_ANIMLIB_H_	AnimLib.h	2;"	d
_APPMACROS_H_	AppMacros.h	2;"	d
_APP_DELEGATE_H_	AppDelegate.h	2;"	d
_BLOODY_EVENT_H_	BloodyEvent.h	2;"	d
_BUTTON_H_	Button.h	2;"	d
_COMBAT_EVENT_H_	CombatEvent.h	2;"	d
_COMBAT_UNIT_H_	CombatUnit.h	2;"	d
_Controllable_H_	Controllable.h	2;"	d
_ControllerListener_H_	ControllerListener.h	2;"	d
_Controller_H_	Controller.h	2;"	d
_DIA_EVENT_H_	DiaEvent.h	2;"	d
_DUEL_EVENT_H_	DuelEvent.h	2;"	d
_EMAP_H_	Emap.h	2;"	d
_EVENT_H_	Event.h	2;"	d
_EVENT_MANAGER_H_	EventManager.h	2;"	d
_EVNET_LOADER_H_	EventLoader.h	2;"	d
_Entity_H_	Entity.h	2;"	d
_GET_SHADOW_EVENT_H_	GetShdwEvent.h	2;"	d
_GET_SUPER_POWER_EVENT_H_	GetSuPEvent.h	2;"	d
_GLOBAL_RES_H_	GlobalRes.h	2;"	d
_GLOBAL_STATE_H_	GlobalState.h	2;"	d
_GlobalPath_H_	GlobalPath.h	2;"	d
_HUMAN_ENTITY_H_	HumanEntity.h	2;"	d
_ITEM_EVENT_H_	ItemEvent.h	2;"	d
_LOAD_NIGHT_EVENT_H_	LoadNightEvent.h	2;"	d
_MAP_STATE_H_	MapState.h	2;"	d
_NIGHTFALL_EVENT_H_	NightfallEvent.h	2;"	d
_NPC_UTIL_H_	NPCUtil.h	2;"	d
_PLAYER_STATE_H_	PlayerState.h	2;"	d
_RELOAD_EVENT_H_	ReloadEvent.h	2;"	d
_SCENECH_EVENT_H_	SceneChEvent.h	2;"	d
_SINGLETON_HPP_	Singleton.hpp	2;"	d
_SUPER_POWER_H_	SuperPower.h	2;"	d
_TALKMAN_EVENT_H_	TalkManEvent.h	2;"	d
_TIME_ELAPSE_EVENT_H_	TimeElapse.h	2;"	d
_TIME_ELAPSE_EVENT_H_	TimeElapseEvent.h	2;"	d
_VECTOR_LOADER_H_	VectorLoader.h	2;"	d
_WINDOW_H_	Window.h	2;"	d
__ABILITY_BUTTON_H__	AbilityButton.h	2;"	d
__BIG_WINDOW_H__	BigWindow.h	2;"	d
__BLOOD_H__	Blood.h	2;"	d
__BUTTONA_H__	ButtonA.h	2;"	d
__COMBAT_ANIMATION_H__	CombatAnimation.h	2;"	d
__COMBAT_SCENE_H__	CombatScene.h	2;"	d
__CONTROL_PANEL_H__	ControlPanel.h	2;"	d
__CPLAYER_H__	CPlayer.h	2;"	d
__CSV_H__	CsvUtil.h	3;"	d
__DIA_WINDOW_H__	DiaWindow.h	2;"	d
__DIR_BUTTON_H__	DirButton.h	2;"	d
__FILE_LOAD_UTIL_H__	FileLoadUtil.h	9;"	d
__Gallery_H__	GalleryScene.h	2;"	d
__Gps_SCENE_H__	GpsScene.h	2;"	d
__HELLOWORLD_SCENE_H__	HelloWorldScene.h	2;"	d
__HERO_H__	Hero.h	2;"	d
__LOADING_SCENE_H__	LoadingScene.h	2;"	d
__MAP_H__	Map.h	2;"	d
__MENU_H__	Menu.h	2;"	d
__MONSTER_H__	Monster.h	2;"	d
__MenuLayer_H__	MenuLayer.h	2;"	d
__PARTICLES_H__	Particles.h	2;"	d
__PLACENAME_WINDOW_H__	PlacenameWindow.h	2;"	d
__RCD_UTIL__	RcdUtil.h	2;"	d
__Role_H__	Role.h	2;"	d
__SHADOWING_MAN_H__	ShadowingMan.h	2;"	d
__STANDING_MAN_H__	StandingMan.h	7;"	d
__STRING_UTIL_H__	StringUtil.h	9;"	d
__StoryWorld_SCENE_H__	Story.h	2;"	d
__TIME_UTIL_H__	TimeUtil.h	2;"	d
__TOUCH_SCREEN_H__	TouchScreen.h	2;"	d
__TURNING_MAN_H__	TurningMan.h	6;"	d
__WALKING_MAN_H__	WalkingMan.h	2;"	d
__WebView_SCENE_H__	WebviewScene.h	2;"	d
_________PlayReader__	PlayReader.h	10;"	d
_________Player__	Player.h	10;"	d
_________Welcome__	Welcome.h	2;"	d
_instance	Singleton.hpp	/^	static T* _instance;$/;"	m	class:Singleton	access:protected
_instance	Singleton.hpp	/^T* Singleton<T>::_instance=NULL;$/;"	m	class:Singleton
_mapProcess	PlayReader.h	/^  int _x, _y, _mapProcess;$/;"	m	class:ProcessSaver	access:private
_process	PlayReader.h	/^  int _process;$/;"	m	class:ProcessSaver	access:private
_x	PlayReader.h	/^  int _x, _y, _mapProcess;$/;"	m	class:ProcessSaver	access:private
_y	PlayReader.h	/^  int _x, _y, _mapProcess;$/;"	m	class:ProcessSaver	access:private
abilities	CombatUnit.h	/^   CCArray* abilities;$/;"	m	class:CombatUnit	access:public
ablType	Ability.h	/^	unsigned char ablType;$/;"	m	class:Ability	access:public
afterStep	WalkingMan.cpp	/^void WalkingMan::afterStep()$/;"	f	class:WalkingMan	signature:()
afterStep	WalkingMan.h	/^    void afterStep();$/;"	p	class:WalkingMan	access:protected	signature:()
all	SuperPower.h	/^	bool all;$/;"	m	class:SuperPower	access:public
allChoice	Story.h	/^  enum allChoice {fChoice = 10, sChoice, tChoice};$/;"	g	class:StoryWorld	access:protected
animationDone	CombatScene.h	/^	bool animationDone;$/;"	m	class:Combat	access:private
appear	BigWindow.cpp	/^void BigWindow::appear()$/;"	f	class:BigWindow	signature:()
appear	BigWindow.h	/^	void appear();$/;"	p	class:BigWindow	access:public	signature:()
appear	DiaWindow.cpp	/^void DiaWindow::appear()$/;"	f	class:DiaWindow	signature:()
appear	DiaWindow.h	/^	void appear();$/;"	p	class:DiaWindow	access:public	signature:()
appear	PlacenameWindow.cpp	/^void PlacenameWindow::appear()$/;"	f	class:PlacenameWindow	signature:()
appear	PlacenameWindow.h	/^	void appear();$/;"	p	class:PlacenameWindow	access:public	signature:()
appear	Window.h	/^	virtual void appear()=0;$/;"	p	class:Window	access:public	signature:()
applicationDidEnterBackground	AppDelegate.cpp	/^void AppDelegate::applicationDidEnterBackground() {$/;"	f	class:AppDelegate	signature:()
applicationDidEnterBackground	AppDelegate.h	/^    virtual void applicationDidEnterBackground();$/;"	p	class:AppDelegate	access:public	signature:()
applicationDidFinishLaunching	AppDelegate.cpp	/^bool AppDelegate::applicationDidFinishLaunching() {$/;"	f	class:AppDelegate	signature:()
applicationDidFinishLaunching	AppDelegate.h	/^    virtual bool applicationDidFinishLaunching();$/;"	p	class:AppDelegate	access:public	signature:()
applicationWillEnterForeground	AppDelegate.cpp	/^void AppDelegate::applicationWillEnterForeground() {$/;"	f	class:AppDelegate	signature:()
applicationWillEnterForeground	AppDelegate.h	/^    virtual void applicationWillEnterForeground();$/;"	p	class:AppDelegate	access:public	signature:()
args	Event.h	/^	CCArray* args;$/;"	m	class:Event	access:public
attack	CPlayer.h	/^	void attack();$/;"	p	class:CPlayer	access:public	signature:()
attack	CombatUnit.h	/^   int attack;$/;"	m	class:CombatUnit	access:public
audioSwitchCase	Story.cpp	/^void StoryWorld::audioSwitchCase(int code) {$/;"	f	class:StoryWorld	signature:(int code)
audioSwitchCase	Story.h	/^  void audioSwitchCase(int code);$/;"	p	class:StoryWorld	access:protected	signature:(int code)
avgGame	Story.cpp	/^void StoryWorld::avgGame(void) {$/;"	f	class:StoryWorld	signature:(void)
avgGame	Story.h	/^  void avgGame(void);$/;"	p	class:StoryWorld	access:protected	signature:(void)
beforeStep	WalkingMan.cpp	/^void WalkingMan::beforeStep()$/;"	f	class:WalkingMan	signature:()
beforeStep	WalkingMan.h	/^    void beforeStep();$/;"	p	class:WalkingMan	access:protected	signature:()
bigwindow	ButtonA.h	/^	BigWindow* bigwindow;$/;"	m	class:ButtonA	access:public
bigwindow	ControlPanel.h	/^	BigWindow* bigwindow;$/;"	m	class:ControlPanel	access:public
blood	Player.h	/^    int blood;$/;"	m	class:Player	access:private
bloodSlider	Blood.h	/^	CCControlSlider* bloodSlider;$/;"	m	class:Blood	access:private
buffRate	Ability.h	/^	float buffRate;$/;"	m	class:BuffAbl	access:public
buffType	Ability.h	/^	int buffType;$/;"	m	class:BuffAbl	access:public
buffValue	Ability.h	/^	int buffValue;$/;"	m	class:BuffAbl	access:public
buttonA	ControlPanel.h	/^	ButtonA* buttonA;$/;"	m	class:ControlPanel	access:public
buttonA	TouchScreen.h	/^	Button* buttonA;$/;"	m	class:TouchScreen	access:private
buttonImg	Button.h	/^	CCSprite* buttonImg;$/;"	m	class:Button	access:public
category	Event.h	/^	int category;$/;"	m	class:Event	access:public
ccTouchBegan	ButtonA.cpp	/^bool ButtonA::ccTouchBegan(CCTouch* pTouch, CCEvent *pEvent)$/;"	f	class:ButtonA	signature:(CCTouch* pTouch, CCEvent *pEvent)
ccTouchBegan	ButtonA.h	/^	bool ccTouchBegan(CCTouch* pTouch, CCEvent *pEvent);$/;"	p	class:ButtonA	access:public	signature:(CCTouch* pTouch, CCEvent *pEvent)
ccTouchBegan	MenuLayer.cpp	/^bool MenuLayer::ccTouchBegan(CCTouch *pTouch,CCEvent *pEvent)$/;"	f	class:MenuLayer	signature:(CCTouch *pTouch,CCEvent *pEvent)
ccTouchBegan	MenuLayer.h	/^	bool ccTouchBegan(CCTouch *pTouch,CCEvent *pEvent);$/;"	p	class:MenuLayer	access:public	signature:(CCTouch *pTouch,CCEvent *pEvent)
ccTouchBegan	Story.cpp	/^bool StoryWorld::ccTouchBegan(CCTouch *pTouch, CCEvent *pEvent)$/;"	f	class:StoryWorld	signature:(CCTouch *pTouch, CCEvent *pEvent)
ccTouchBegan	Story.h	/^  bool ccTouchBegan(CCTouch *pTouch, CCEvent *pEvent);$/;"	p	class:StoryWorld	access:protected	signature:(CCTouch *pTouch, CCEvent *pEvent)
ccTouchEnded	ButtonA.cpp	/^void ButtonA::ccTouchEnded(CCTouch* pTouch, CCEvent *pEvent)$/;"	f	class:ButtonA	signature:(CCTouch* pTouch, CCEvent *pEvent)
ccTouchEnded	ButtonA.h	/^	void ccTouchEnded(CCTouch* pTouch, CCEvent *pEvent);$/;"	p	class:ButtonA	access:public	signature:(CCTouch* pTouch, CCEvent *pEvent)
ccTouchEnded	MenuLayer.cpp	/^void MenuLayer::ccTouchEnded(CCTouch *pTouch,CCEvent *pEvent)$/;"	f	class:MenuLayer	signature:(CCTouch *pTouch,CCEvent *pEvent)
ccTouchEnded	MenuLayer.h	/^	void ccTouchEnded(CCTouch *pTouch,CCEvent *pEvent);$/;"	p	class:MenuLayer	access:public	signature:(CCTouch *pTouch,CCEvent *pEvent)
ccTouchEnded	Story.cpp	/^void StoryWorld::ccTouchEnded(cocos2d::CCTouch *pTouch, cocos2d::CCEvent *pEvent){$/;"	f	class:StoryWorld	signature:(cocos2d::CCTouch *pTouch, cocos2d::CCEvent *pEvent)
ccTouchEnded	Story.h	/^  void ccTouchEnded(cocos2d::CCTouch *pTouch, cocos2d::CCEvent *pEvent);$/;"	p	class:StoryWorld	access:protected	signature:(cocos2d::CCTouch *pTouch, cocos2d::CCEvent *pEvent)
ccTouchMoved	MenuLayer.cpp	/^void MenuLayer::ccTouchMoved(CCTouch *pTouch,CCEvent *pEvent)$/;"	f	class:MenuLayer	signature:(CCTouch *pTouch,CCEvent *pEvent)
ccTouchMoved	MenuLayer.h	/^	void ccTouchMoved(CCTouch *pTouch,CCEvent *pEcent);$/;"	p	class:MenuLayer	access:public	signature:(CCTouch *pTouch,CCEvent *pEcent)
ccTouchesBegan	ControlPanel.cpp	/^void ControlPanel::ccTouchesBegan(CCSet* pTouches, CCEvent *pEvent)$/;"	f	class:ControlPanel	signature:(CCSet* pTouches, CCEvent *pEvent)
ccTouchesBegan	ControlPanel.h	/^	void ccTouchesBegan(CCSet* pTouch, CCEvent *pEvent);$/;"	p	class:ControlPanel	access:public	signature:(CCSet* pTouch, CCEvent *pEvent)
ccTouchesBegan	DirButton.cpp	/^void DirButton::ccTouchesBegan(CCSet* pTouches, CCEvent *pEvent)$/;"	f	class:DirButton	signature:(CCSet* pTouches, CCEvent *pEvent)
ccTouchesBegan	DirButton.h	/^	virtual void ccTouchesBegan(CCSet* pTouches, CCEvent *pEvent);$/;"	p	class:DirButton	access:public	signature:(CCSet* pTouches, CCEvent *pEvent)
ccTouchesBegan	TouchScreen.cpp	/^void TouchScreen::ccTouchesBegan(CCSet* pTouch, CCEvent *pEvent)$/;"	f	class:TouchScreen	signature:(CCSet* pTouch, CCEvent *pEvent)
ccTouchesBegan	TouchScreen.h	/^	void ccTouchesBegan(CCSet* pTouch, CCEvent *pEvent);$/;"	p	class:TouchScreen	access:public	signature:(CCSet* pTouch, CCEvent *pEvent)
ccTouchesEnded	Button.cpp	/^void Button::ccTouchesEnded(CCSet* pTouches, CCEvent *pEvent)$/;"	f	class:Button	signature:(CCSet* pTouches, CCEvent *pEvent)
ccTouchesEnded	Button.h	/^	virtual void ccTouchesEnded(CCSet* pTouch, CCEvent *pEvent);$/;"	p	class:Button	access:public	signature:(CCSet* pTouch, CCEvent *pEvent)
ccTouchesEnded	ControlPanel.cpp	/^void ControlPanel::ccTouchesEnded(CCSet* pTouches, CCEvent *pEvent)$/;"	f	class:ControlPanel	signature:(CCSet* pTouches, CCEvent *pEvent)
ccTouchesEnded	ControlPanel.h	/^	void ccTouchesEnded(CCSet* pTouch, CCEvent *pEvent);$/;"	p	class:ControlPanel	access:public	signature:(CCSet* pTouch, CCEvent *pEvent)
ccTouchesEnded	GpsScene.cpp	/^void Gps::ccTouchesEnded(CCSet *pTouches, CCEvent *pEvent)$/;"	f	class:Gps	signature:(CCSet *pTouches, CCEvent *pEvent)
ccTouchesEnded	GpsScene.h	/^	void ccTouchesEnded(CCSet *pTouches, CCEvent *pEvent);$/;"	p	class:Gps	access:public	signature:(CCSet *pTouches, CCEvent *pEvent)
ccTouchesEnded	TouchScreen.cpp	/^void TouchScreen::ccTouchesEnded(CCSet* pTouch, CCEvent *pEvent)$/;"	f	class:TouchScreen	signature:(CCSet* pTouch, CCEvent *pEvent)
ccTouchesEnded	TouchScreen.h	/^	void ccTouchesEnded(CCSet* pTouch, CCEvent *pEvent);$/;"	p	class:TouchScreen	access:public	signature:(CCSet* pTouch, CCEvent *pEvent)
ccTouchesEnded	Welcome.cpp	/^void Welcome::ccTouchesEnded(CCSet* pTouches, CCEvent *pEvent)$/;"	f	class:Welcome	signature:(CCSet* pTouches, CCEvent *pEvent)
ccTouchesEnded	Welcome.h	/^	void ccTouchesEnded(CCSet* pTouches, CCEvent *pEvent);$/;"	p	class:Welcome	access:public	signature:(CCSet* pTouches, CCEvent *pEvent)
ccTouchesMoved	Button.cpp	/^void Button::ccTouchesMoved(CCSet* pTouches, CCEvent *pEvent)$/;"	f	class:Button	signature:(CCSet* pTouches, CCEvent *pEvent)
ccTouchesMoved	Button.h	/^	virtual void ccTouchesMoved(CCSet* pTouch, CCEvent *pEvent);$/;"	p	class:Button	access:public	signature:(CCSet* pTouch, CCEvent *pEvent)
ccTouchesMoved	ControlPanel.cpp	/^void ControlPanel::ccTouchesMoved(CCSet* pTouch, CCEvent *pEvent)$/;"	f	class:ControlPanel	signature:(CCSet* pTouch, CCEvent *pEvent)
ccTouchesMoved	ControlPanel.h	/^	void ccTouchesMoved(CCSet* pTouch, CCEvent *pEvent);$/;"	p	class:ControlPanel	access:public	signature:(CCSet* pTouch, CCEvent *pEvent)
ccTouchesMoved	TouchScreen.cpp	/^void TouchScreen::ccTouchesMoved(CCSet* pTouch, CCEvent *pEvent)$/;"	f	class:TouchScreen	signature:(CCSet* pTouch, CCEvent *pEvent)
ccTouchesMoved	TouchScreen.h	/^	void ccTouchesMoved(CCSet* pTouch, CCEvent *pEvent);	$/;"	p	class:TouchScreen	access:public	signature:(CCSet* pTouch, CCEvent *pEvent)
cellSizeForTable	GalleryScene.cpp	/^CCSize Gallery::cellSizeForTable(CCTableView *table)$/;"	f	class:Gallery	signature:(CCTableView *table)
cellSizeForTable	GalleryScene.h	/^	virtual cocos2d::CCSize cellSizeForTable(cocos2d::extension::CCTableView *table);$/;"	p	class:Gallery	access:public	signature:(cocos2d::extension::CCTableView *table)
characterPasterSwitchCase	Story.cpp	/^void StoryWorld::characterPasterSwitchCase(int code) {$/;"	f	class:StoryWorld	signature:(int code)
characterPasterSwitchCase	Story.h	/^  void characterPasterSwitchCase(int code);$/;"	p	class:StoryWorld	access:protected	signature:(int code)
chechResult	CombatScene.h	/^}chechResult;$/;"	t	typeref:enum:__anon4
checkButtonTag	CombatScene.cpp	/^int Combat::checkButtonTag(int playerTag,int monsterTag)$/;"	f	class:Combat	signature:(int playerTag,int monsterTag)
checkButtonTag	CombatScene.h	/^	int checkButtonTag(int playerTag,int monsterTag);$/;"	p	class:Combat	access:public	signature:(int playerTag,int monsterTag)
checkCollision	Hero.cpp	/^CollisionType Hero::checkCollision(CCPoint tileCoord)$/;"	f	class:Hero	signature:(CCPoint tileCoord)
checkCollision	Hero.h	/^    CollisionType checkCollision(CCPoint tileCoord);$/;"	p	class:Hero	access:public	signature:(CCPoint tileCoord)
checkEvent	Hero.cpp	/^CollisionType Hero::checkEvent(CCPoint tileCoord)$/;"	f	class:Hero	signature:(CCPoint tileCoord)
checkEvent	Hero.h	/^    CollisionType checkEvent(CCPoint tileCoord);$/;"	p	class:Hero	access:private	signature:(CCPoint tileCoord)
checkGameOver	CombatScene.cpp	/^void Combat::checkGameOver()$/;"	f	class:Combat	signature:()
checkGameOver	CombatScene.h	/^	void checkGameOver();$/;"	p	class:Combat	access:public	signature:()
chooseButton	Monster.cpp	/^int Monster::chooseButton()$/;"	f	class:Monster	signature:()
chooseButton	Monster.h	/^	int chooseButton();$/;"	p	class:Monster	access:public	signature:()
cnt	WalkingMan.h	/^    int cnt;$/;"	m	class:WalkingMan	access:public
confirmButtonHandler	Story.cpp	/^void StoryWorld::confirmButtonHandler(CCObject *sender) {$/;"	f	class:StoryWorld	signature:(CCObject *sender)
confirmButtonHandler	Story.h	/^  void confirmButtonHandler(CCObject *sender);$/;"	p	class:StoryWorld	access:protected	signature:(CCObject *sender)
content	Window.h	/^	CCLabelTTF* content;$/;"	m	class:Window	access:protected
controller	Controllable.h	/^    Controller* controller;$/;"	m	class:Controllable	access:protected
controllerListener	Controller.h	/^    ControllerListener* controllerListener;$/;"	m	class:Controller	access:protected
convertCoord	Window.cpp	/^CCPoint Window::convertCoord(CCNode* obj)$/;"	f	class:Window	signature:(CCNode* obj)
convertCoord	Window.h	/^	CCPoint convertCoord(CCNode* obj);$/;"	p	class:Window	access:public	signature:(CCNode* obj)
coord	Event.h	/^	CCPoint coord;$/;"	m	class:Event	access:public
count	GalleryScene.h	/^	int count;$/;"	m	class:Gallery	access:private
cplayer	CombatScene.h	/^	CPlayer* cplayer;$/;"	m	class:Combat	access:private
create	Ability.cpp	/^Ability* Ability::create(int type,int hurt,int stability,int lvlBuff,int hitRate,CCString description,int giveHurtActID,int receiveHurtActID)$/;"	f	class:Ability	signature:(int type,int hurt,int stability,int lvlBuff,int hitRate,CCString description,int giveHurtActID,int receiveHurtActID)
create	Ability.h	/^	static Ability* create(int type,int hurt,int stability,int lvlBuff,int hitRate,CCString description,int giveHurtActID,int receiveHurtActID);$/;"	p	class:Ability	access:public	signature:(int type,int hurt,int stability,int lvlBuff,int hitRate,CCString description,int giveHurtActID,int receiveHurtActID)
create	ControlPanel.cpp	/^ControlPanel* ControlPanel::create(Map* map)$/;"	f	class:ControlPanel	signature:(Map* map)
create	ControlPanel.h	/^	static ControlPanel* create(Map* map);$/;"	p	class:ControlPanel	access:public	signature:(Map* map)
create	Map.cpp	/^Map* Map::create(const char *tmxFile)$/;"	f	class:Map	signature:(const char *tmxFile)
create	Map.h	/^	static Map* create(const char *tmxFile);$/;"	p	class:Map	access:public	signature:(const char *tmxFile)
create	StandingMan.cpp	/^StandingMan* StandingMan::create(int picNo,int id)$/;"	f	class:StandingMan	signature:(int picNo,int id)
create	StandingMan.h	/^	static StandingMan* create(int picNo,int id);$/;"	p	class:StandingMan	access:public	signature:(int picNo,int id)
create	TurningMan.cpp	/^TurningMan* TurningMan::create(int picNo,int id)$/;"	f	class:TurningMan	signature:(int picNo,int id)
create	TurningMan.h	/^	static TurningMan* create(int picNo,int id);$/;"	p	class:TurningMan	access:public	signature:(int picNo,int id)
create	WalkingMan.cpp	/^WalkingMan* WalkingMan::create(int picNo,int id)$/;"	f	class:WalkingMan	signature:(int picNo,int id)
create	WalkingMan.h	/^    static WalkingMan* create(int picNo,int id);$/;"	p	class:WalkingMan	access:public	signature:(int picNo,int id)
createAnimationForDirection	WalkingMan.cpp	/^CCAnimation* WalkingMan::createAnimationForDirection(int dirc)$/;"	f	class:WalkingMan	signature:(int dirc)
createAnimationForDirection	WalkingMan.h	/^    virtual CCAnimation* createAnimationForDirection(int dirc);$/;"	p	class:WalkingMan	access:protected	signature:(int dirc)
crossMap	Map.cpp	/^Map* Map::crossMap(CCPoint tileBirthPoint,int mapNo)$/;"	f	class:Map	signature:(CCPoint tileBirthPoint,int mapNo)
crossMap	Map.h	/^	Map* crossMap(CCPoint tileBirthPoint,int mapNo);$/;"	p	class:Map	access:public	signature:(CCPoint tileBirthPoint,int mapNo)
crossToMap	Hero.cpp	/^void Hero::crossToMap(int mapNo)$/;"	f	class:Hero	signature:(int mapNo)
crossToMap	Hero.h	/^	void crossToMap(int mapNo); $/;"	p	class:Hero	access:private	signature:(int mapNo)
curLine	PlayReader.h	/^  unsigned long curLine;$/;"	m	class:PlayReader	access:protected
current	Story.h	/^  char current;$/;"	m	class:StoryWorld	access:protected
currentHp	Role.h	/^	int currentHp;$/;"	m	class:Role	access:public
cycStability	Ability.h	/^	int cycStability;$/;"	m	class:PeriodicAbl	access:public
cycle	Ability.h	/^	int cycle;$/;"	m	class:PeriodicAbl	access:public
damage	CombatScene.h	/^	int damage;$/;"	m	class:Combat	access:private
damageCompute	CombatScene.cpp	/^int Combat::damageCompute(int winnerNum)$/;"	f	class:Combat	signature:(int winnerNum)
damageCompute	CombatScene.h	/^	int damageCompute(int winner);$/;"	p	class:Combat	access:public	signature:(int winner)
defence	CombatUnit.h	/^   int defence;$/;"	m	class:CombatUnit	access:public
description	Ability.h	/^	CCString description;$/;"	m	class:Ability	access:public
description	Event.h	/^	CCString* description;$/;"	m	class:Event	access:public
dialog	DiaWindow.h	/^	CCArray* dialog;$/;"	m	class:DiaWindow	access:private
dialog	Event.h	/^	CCArray* dialog;$/;"	m	class:Event	access:public
dialog	Story.h	/^  char dialog[512];$/;"	m	class:StoryWorld	access:protected
dialogBox	Window.h	/^	CCSprite* dialogBox;$/;"	m	class:Window	access:protected
dialogs	PlayReader.h	/^  vector<string> dialogs;$/;"	m	class:PlayReader	access:protected
diawindow	ButtonA.h	/^	DiaWindow* diawindow;$/;"	m	class:ButtonA	access:public
diawindow	ControlPanel.h	/^	DiaWindow* diawindow;$/;"	m	class:ControlPanel	access:public
diawindow	GlobalRes.h	/^    DiaWindow* diawindow;$/;"	m	class:GlobalRes	access:public
dir	HumanEntity.h	/^	int dir;$/;"	m	class:HumanEntity	access:public
dirButton	ControlPanel.h	/^	Button* dirButton;$/;"	m	class:ControlPanel	access:public
dirButton	TouchScreen.h	/^	Button* dirButton;$/;"	m	class:TouchScreen	access:private
disaDistr	Button.h	/^	int disaDistr;$/;"	m	class:Button	access:public
disableDirButton	ButtonA.cpp	/^void ButtonA::disableDirButton()$/;"	f	class:ButtonA	signature:()
disableDirButton	ButtonA.h	/^	void disableDirButton();$/;"	p	class:ButtonA	access:private	signature:()
disappear	BigWindow.cpp	/^void BigWindow::disappear()$/;"	f	class:BigWindow	signature:()
disappear	BigWindow.h	/^	void disappear();$/;"	p	class:BigWindow	access:public	signature:()
disappear	DiaWindow.cpp	/^void DiaWindow::disappear()$/;"	f	class:DiaWindow	signature:()
disappear	DiaWindow.h	/^	void disappear();$/;"	p	class:DiaWindow	access:public	signature:()
disappear	PlacenameWindow.cpp	/^void PlacenameWindow::disappear()$/;"	f	class:PlacenameWindow	signature:()
disappear	PlacenameWindow.h	/^	void disappear();$/;"	p	class:PlacenameWindow	access:public	signature:()
disappear	Window.h	/^	virtual void disappear()=0;$/;"	p	class:Window	access:public	signature:()
doEvent	Hero.cpp	/^void Hero::doEvent(CCPoint heroTilePos)$/;"	f	class:Hero	signature:(CCPoint heroTilePos)
doEvent	Hero.h	/^    void doEvent(CCPoint heroPosition);$/;"	p	class:Hero	access:private	signature:(CCPoint heroPosition)
doShrink	TouchScreen.h	/^	bool doShrink;$/;"	m	class:TouchScreen	access:private
doneList	GlobalState.h	/^    bool doneList[MAX_DONE_LIST];$/;"	m	class:GlobalState	access:public
drawTie	CombatScene.h	/^	drawTie$/;"	e	enum:__anon4
eAtrgr	EventManager.h	/^    Emap* eAtrgr;$/;"	m	class:EventManager	access:public
eManager	EventManager.h	36;"	d
eStand	EventManager.h	/^    Emap* eStand;$/;"	m	class:EventManager	access:public
enable	Button.h	/^	bool enable;$/;"	m	class:Button	access:public
enableDirButton	ButtonA.cpp	/^void ButtonA::enableDirButton()$/;"	f	class:ButtonA	signature:()
enableDirButton	ButtonA.h	/^	void enableDirButton();$/;"	p	class:ButtonA	access:private	signature:()
endRespond	Controllable.cpp	/^void Controllable::endRespond()$/;"	f	class:Controllable	signature:()
endRespond	Controllable.h	/^	virtual void endRespond();$/;"	p	class:Controllable	access:public	signature:()
endRespond	ControllerListener.cpp	/^void ControllerListener::endRespond()$/;"	f	class:ControllerListener	signature:()
endRespond	ControllerListener.h	/^	virtual void endRespond();$/;"	p	class:ControllerListener	access:public	signature:()
endRespond	Hero.cpp	/^void Hero::endRespond()$/;"	f	class:Hero	signature:()
endRespond	Hero.h	/^    void endRespond();$/;"	p	class:Hero	access:public	signature:()
endRespond	StandingMan.cpp	/^void StandingMan::endRespond()$/;"	f	class:StandingMan	signature:()
endRespond	StandingMan.h	/^	void endRespond();$/;"	p	class:StandingMan	access:public	signature:()
endRespond	TurningMan.cpp	/^void TurningMan::endRespond()$/;"	f	class:TurningMan	signature:()
endRespond	TurningMan.h	/^	void endRespond();$/;"	p	class:TurningMan	access:public	signature:()
endRespond	WalkingMan.cpp	/^void WalkingMan::endRespond()$/;"	f	class:WalkingMan	signature:()
endRespond	WalkingMan.h	/^    void endRespond();$/;"	p	class:WalkingMan	access:public	signature:()
events	EventManager.h	/^    CCArray* events;$/;"	m	class:EventManager	access:public
evmap	Emap.h	/^	int** evmap;$/;"	m	class:Emap	access:private
exp	PlayerState.h	/^	int exp;$/;"	m	class:PlayerState	access:public
exp	Role.h	/^	int exp;$/;"	m	class:Role	access:public
exp2Level	CPlayer.cpp	/^void CPlayer::exp2Level(int exp)$/;"	f	class:CPlayer	signature:(int exp)
exp2Level	CPlayer.h	/^	void exp2Level(int exp);$/;"	p	class:CPlayer	access:public	signature:(int exp)
fChoice	Story.h	/^  enum allChoice {fChoice = 10, sChoice, tChoice};$/;"	e	enum:StoryWorld::allChoice
faceDir	MapState.h	/^   int faceDir;$/;"	m	class:MapState	access:public
fileNames	LoadingScene.h	/^	CCArray* fileNames;$/;"	m	class:LoadingScene	access:public
findEventById	EventManager.cpp	/^Event* EventManager::findEventById(int id)$/;"	f	class:EventManager	signature:(int id)
findEventById	EventManager.h	/^    Event* findEventById(int id);$/;"	p	class:EventManager	access:private	signature:(int id)
findManById	NPCUtil.cpp	/^HumanEntity* NPCUtil::findManById(int id, CCArray* NPCs)$/;"	f	class:NPCUtil	signature:(int id, CCArray* NPCs)
findManById	NPCUtil.h	/^    static HumanEntity* findManById(int id, CCArray* NPCs);$/;"	p	class:NPCUtil	access:public	signature:(int id, CCArray* NPCs)
findValueInWithLine	CsvUtil.cpp	/^const int CsvUtil::findValueInWithLine( const char* chValue, int iValueCol, const char* csvFilePath ) {$/;"	f	class:CsvUtil	signature:( const char* chValue, int iValueCol, const char* csvFilePath )
findValueInWithLine	CsvUtil.h	/^    const int findValueInWithLine(const char* chValue, int iValueCol, const char* csvFilePath);$/;"	p	class:CsvUtil	access:public	signature:(const char* chValue, int iValueCol, const char* csvFilePath)
fire	AbilityButton.h	/^	fire,$/;"	e	enum:__anon1
fireBtn	AbilityButton.h	/^	CCControlButton* fireBtn; $/;"	m	class:AbilityButton	access:private
fireDamage	AbilityButton.h	/^	int fireDamage,waterDamage,woodDamage;$/;"	m	class:AbilityButton	access:public
fireParticle	CombatAnimation.cpp	/^void CombatAnimation::fireParticle(int direction)$/;"	f	class:CombatAnimation	signature:(int direction)
fireParticle	CombatAnimation.h	/^	void fireParticle(int direction);$/;"	p	class:CombatAnimation	access:public	signature:(int direction)
fireTouchUpOutside	AbilityButton.cpp	/^void AbilityButton::fireTouchUpOutside(CCObject* pSender, CCControlEvent event)$/;"	f	class:AbilityButton	signature:(CCObject* pSender, CCControlEvent event)
fireTouchUpOutside	AbilityButton.h	/^	void fireTouchUpOutside(CCObject* pSender, CCControlEvent event);$/;"	p	class:AbilityButton	access:public	signature:(CCObject* pSender, CCControlEvent event)
firetitle	AbilityButton.h	/^	CCLabelTTF *firetitle;$/;"	m	class:AbilityButton	access:private
flash	SuperPower.h	/^	bool flash;$/;"	m	class:SuperPower	access:public
focus	Hero.h	/^    bool focus;$/;"	m	class:Hero	access:private
followMe	Hero.cpp	/^void Hero::followMe()$/;"	f	class:Hero	signature:()
followMe	Hero.h	/^	void followMe();$/;"	p	class:Hero	access:private	signature:()
forever	TurningMan.h	/^	CCFiniteTimeAction* forever;$/;"	m	class:TurningMan	access:private
forever	WalkingMan.h	/^    CCFiniteTimeAction* forever;$/;"	m	class:WalkingMan	access:public
gameOver	CombatScene.cpp	/^void Combat::gameOver(CCObject* psender)$/;"	f	class:Combat	signature:(CCObject* psender)
gameOver	CombatScene.h	/^	void gameOver(CCObject* psender);$/;"	p	class:Combat	access:public	signature:(CCObject* psender)
gameOverAndBackToWelcome	Story.cpp	/^void StoryWorld::gameOverAndBackToWelcome() {$/;"	f	class:StoryWorld	signature:()
gameOverAndBackToWelcome	Story.h	/^  void gameOverAndBackToWelcome();$/;"	p	class:StoryWorld	access:protected	signature:()
gameWinner	CombatScene.h	/^	int gameWinner;$/;"	m	class:Combat	access:private
get	CsvUtil.cpp	/^const char* CsvUtil::get( int iRow, int iCol, const char* csvFilePath ) {$/;"	f	class:CsvUtil	signature:( int iRow, int iCol, const char* csvFilePath )
get	CsvUtil.h	/^    const char* get(int iRow, int iCol, const char* csvFilePath);$/;"	p	class:CsvUtil	access:public	signature:(int iRow, int iCol, const char* csvFilePath)
getAction	AnimLib.cpp	/^CCFiniteTimeAction* AnimLib::getAction(int choice,CCSize size)$/;"	f	class:AnimLib	signature:(int choice,CCSize size)
getAction	AnimLib.h	/^	static CCFiniteTimeAction* getAction(int choice,CCSize size);$/;"	p	class:AnimLib	access:public	signature:(int choice,CCSize size)
getAttackWithMethod	Player.cpp	/^bool Player::getAttackWithMethod(int type) {$/;"	f	class:Player	signature:(int type)
getAttackWithMethod	Player.h	/^    bool getAttackWithMethod(int type);$/;"	p	class:Player	access:public	signature:(int type)
getBlood	Player.cpp	/^int Player::getBlood() {$/;"	f	class:Player	signature:()
getBlood	Player.h	/^    int getBlood();$/;"	p	class:Player	access:public	signature:()
getBoundingBox	Button.cpp	/^CCRect Button::getBoundingBox()$/;"	f	class:Button	signature:()
getBoundingBox	Button.h	/^	CCRect getBoundingBox();$/;"	p	class:Button	access:public	signature:()
getCurLine	PlayReader.cpp	/^int PlayReader::getCurLine() {$/;"	f	class:PlayReader	signature:()
getCurLine	PlayReader.h	/^  int getCurLine();$/;"	p	class:PlayReader	access:public	signature:()
getDamageByTag	AbilityButton.cpp	/^int AbilityButton::getDamageByTag(int tag)$/;"	f	class:AbilityButton	signature:(int tag)
getDamageByTag	AbilityButton.h	/^	int getDamageByTag(int tag);$/;"	p	class:AbilityButton	access:public	signature:(int tag)
getDataLines	FileLoadUtil.cpp	/^CCArray* FileLoadUtil::getDataLines( const char* sFilePath ) {$/;"	f	class:FileLoadUtil	signature:( const char* sFilePath )
getDataLines	FileLoadUtil.h	/^    CCArray* getDataLines(const char* sFilePath);$/;"	p	class:FileLoadUtil	access:public	signature:(const char* sFilePath)
getDirection	WalkingMan.cpp	/^FaceDirection WalkingMan::getDirection(CCPoint vect)$/;"	f	class:WalkingMan	signature:(CCPoint vect)
getDirection	WalkingMan.h	/^    FaceDirection getDirection(CCPoint vect);$/;"	p	class:WalkingMan	access:protected	signature:(CCPoint vect)
getDisaDistr	Button.cpp	/^int Button::getDisaDistr()$/;"	f	class:Button	signature:()
getDisaDistr	Button.h	/^	int getDisaDistr();$/;"	p	class:Button	access:public	signature:()
getFileRowColNum	CsvUtil.cpp	/^const CCSize CsvUtil::getFileRowColNum( const char* csvFilePath )$/;"	f	class:CsvUtil	signature:( const char* csvFilePath )
getFileRowColNum	CsvUtil.h	/^    const CCSize getFileRowColNum(const char* csvFilePath);$/;"	p	class:CsvUtil	access:public	signature:(const char* csvFilePath)
getFloat	CsvUtil.cpp	/^const float CsvUtil::getFloat( int iRow, int iCol, const char* csvFilePath ) {$/;"	f	class:CsvUtil	signature:( int iRow, int iCol, const char* csvFilePath )
getFloat	CsvUtil.h	/^	const float getFloat(int iRow, int iCol, const char* csvFilePath);$/;"	p	class:CsvUtil	access:public	signature:(int iRow, int iCol, const char* csvFilePath)
getHeroTilePos	Hero.cpp	/^CCPoint Hero::getHeroTilePos()$/;"	f	class:Hero	signature:()
getHeroTilePos	Hero.h	/^    CCPoint getHeroTilePos();$/;"	p	class:Hero	access:public	signature:()
getHour	TimeUtil.cpp	/^int TimeUtil::getHour()$/;"	f	class:TimeUtil	signature:()
getHour	TimeUtil.h	/^	static int getHour();$/;"	p	class:TimeUtil	access:public	signature:()
getInt	CsvUtil.cpp	/^const int CsvUtil::getInt( int iRow, int iCol, const char* csvFilePath ) {$/;"	f	class:CsvUtil	signature:( int iRow, int iCol, const char* csvFilePath )
getInt	CsvUtil.h	/^	const int getInt(int iRow, int iCol, const char* csvFilePath);$/;"	p	class:CsvUtil	access:public	signature:(int iRow, int iCol, const char* csvFilePath)
getMapProcess	PlayReader.cpp	/^int ProcessSaver::getMapProcess() {$/;"	f	class:ProcessSaver	signature:()
getMapProcess	PlayReader.h	/^  int getMapProcess();$/;"	p	class:ProcessSaver	access:public	signature:()
getPositionX	PlayReader.cpp	/^int ProcessSaver::getPositionX() {$/;"	f	class:ProcessSaver	signature:()
getPositionX	PlayReader.h	/^  int getPositionX();$/;"	p	class:ProcessSaver	access:public	signature:()
getPositionY	PlayReader.cpp	/^int ProcessSaver::getPositionY() {$/;"	f	class:ProcessSaver	signature:()
getPositionY	PlayReader.h	/^  int getPositionY();$/;"	p	class:ProcessSaver	access:public	signature:()
getProcess	PlayReader.cpp	/^int ProcessSaver::getProcess() {$/;"	f	class:ProcessSaver	signature:()
getProcess	PlayReader.h	/^  int getProcess();$/;"	p	class:ProcessSaver	access:public	signature:()
getSprite	Button.cpp	/^CCSprite* Button::getSprite()$/;"	f	class:Button	signature:()
getSprite	Button.h	/^	CCSprite* getSprite();$/;"	p	class:Button	access:public	signature:()
getTouchPos	Button.cpp	/^CCPoint Button::getTouchPos(CCSet* pTouches)$/;"	f	class:Button	signature:(CCSet* pTouches)
getTouchPos	Button.h	/^	CCPoint getTouchPos(CCSet* pTouches);$/;"	p	class:Button	access:public	signature:(CCSet* pTouches)
getWeekDay	TimeUtil.cpp	/^int TimeUtil::getWeekDay()$/;"	f	class:TimeUtil	signature:()
getWeekDay	TimeUtil.h	/^	static int getWeekDay();$/;"	p	class:TimeUtil	access:public	signature:()
getpointName	GpsScene.h	/^	CCString* getpointName();$/;"	p	class:Gps	access:public	signature:()
getpointPos	GpsScene.cpp	/^CCPoint Gps::getpointPos(int num)$/;"	f	class:Gps	signature:(int num)
getpointPos	GpsScene.h	/^	CCPoint getpointPos(int num);$/;"	p	class:Gps	access:public	signature:(int num)
giveHurtActID	Ability.h	/^	int giveHurtActID;$/;"	m	class:Ability	access:public
go	WalkingMan.cpp	/^void WalkingMan::go()$/;"	f	class:WalkingMan	signature:()
go	WalkingMan.h	/^    void go();$/;"	p	class:WalkingMan	access:protected	signature:()
goWalking	HumanEntity.cpp	/^void HumanEntity::goWalking(float dt)$/;"	f	class:HumanEntity	signature:(float dt)
goWalking	HumanEntity.h	/^	virtual void goWalking(float dt);$/;"	p	class:HumanEntity	access:public	signature:(float dt)
goWalking	StandingMan.cpp	/^void StandingMan::goWalking(float dt)$/;"	f	class:StandingMan	signature:(float dt)
goWalking	StandingMan.h	/^	void goWalking(float dt);$/;"	p	class:StandingMan	access:private	signature:(float dt)
goWalking	TurningMan.cpp	/^void TurningMan::goWalking(float dt)$/;"	f	class:TurningMan	signature:(float dt)
goWalking	TurningMan.h	/^	void goWalking(float dt);$/;"	p	class:TurningMan	access:private	signature:(float dt)
goWalking	WalkingMan.cpp	/^void WalkingMan::goWalking(float dt)$/;"	f	class:WalkingMan	signature:(float dt)
goWalking	WalkingMan.h	/^    virtual void goWalking(float dt);$/;"	p	class:WalkingMan	access:protected	signature:(float dt)
gotFocusT	Hero.cpp	/^void Hero::gotFocusT()$/;"	f	class:Hero	signature:()
gotFocusT	Hero.h	/^    void gotFocusT();$/;"	p	class:Hero	access:public	signature:()
happen	BloodyEvent.cpp	/^void BloodyEvent::happen()$/;"	f	class:BloodyEvent	signature:()
happen	BloodyEvent.cpp	/^void WateryEvent::happen()$/;"	f	class:WateryEvent	signature:()
happen	BloodyEvent.h	/^    void happen();$/;"	p	class:BloodyEvent	access:public	signature:()
happen	BloodyEvent.h	/^    void happen();$/;"	p	class:WateryEvent	access:public	signature:()
happen	CombatEvent.cpp	/^void CombatEvent::happen()$/;"	f	class:CombatEvent	signature:()
happen	CombatEvent.h	/^    void happen();$/;"	p	class:CombatEvent	access:public	signature:()
happen	DiaEvent.cpp	/^void DiaEvent::happen()$/;"	f	class:DiaEvent	signature:()
happen	DiaEvent.h	/^    void happen();$/;"	p	class:DiaEvent	access:public	signature:()
happen	DuelEvent.cpp	/^void DuelEvent::happen()$/;"	f	class:DuelEvent	signature:()
happen	DuelEvent.h	/^    void happen();$/;"	p	class:DuelEvent	access:public	signature:()
happen	Event.cpp	/^void Event::happen()$/;"	f	class:Event	signature:()
happen	Event.h	/^	virtual void happen();$/;"	p	class:Event	access:public	signature:()
happen	EventManager.cpp	/^ControllerListener* EventManager::happen(CCPoint coord, int ent)$/;"	f	class:EventManager	signature:(CCPoint coord, int ent)
happen	EventManager.cpp	/^ControllerListener* EventManager::happen(Event* event)$/;"	f	class:EventManager	signature:(Event* event)
happen	EventManager.h	/^	ControllerListener* happen(Event* event);$/;"	p	class:EventManager	access:public	signature:(Event* event)
happen	EventManager.h	/^    ControllerListener* happen(CCPoint coord, int ent);\/\/entrance through hero or buttonA$/;"	p	class:EventManager	access:public	signature:(CCPoint coord, int ent)
happen	GetShdwEvent.cpp	/^void GetShdwEvent::happen() $/;"	f	class:GetShdwEvent	signature:()
happen	GetShdwEvent.h	/^    void happen();$/;"	p	class:GetShdwEvent	access:public	signature:()
happen	GetSuPEvent.cpp	/^void GetSuPEvent::happen()$/;"	f	class:GetSuPEvent	signature:()
happen	GetSuPEvent.h	/^    void happen();$/;"	p	class:GetSuPEvent	access:public	signature:()
happen	ItemEvent.cpp	/^void ItemEvent::happen()$/;"	f	class:ItemEvent	signature:()
happen	ItemEvent.h	/^    void happen();$/;"	p	class:ItemEvent	access:public	signature:()
happen	LoadNightEvent.cpp	/^void LoadNightEvent::happen()$/;"	f	class:LoadNightEvent	signature:()
happen	LoadNightEvent.h	/^    void happen();$/;"	p	class:LoadNightEvent	access:public	signature:()
happen	NightfallEvent.cpp	/^void BreakdawnEvent::happen()$/;"	f	class:BreakdawnEvent	signature:()
happen	NightfallEvent.cpp	/^void NightfallEvent::happen()$/;"	f	class:NightfallEvent	signature:()
happen	NightfallEvent.h	/^    void happen();$/;"	p	class:BreakdawnEvent	access:public	signature:()
happen	NightfallEvent.h	/^    void happen();$/;"	p	class:NightfallEvent	access:public	signature:()
happen	ReloadEvent.cpp	/^void ReloadEvent::happen()$/;"	f	class:ReloadEvent	signature:()
happen	ReloadEvent.h	/^    void happen();$/;"	p	class:ReloadEvent	access:public	signature:()
happen	SceneChEvent.cpp	/^void SceneChEvent::happen()$/;"	f	class:SceneChEvent	signature:()
happen	SceneChEvent.h	/^    void happen();$/;"	p	class:SceneChEvent	access:public	signature:()
happen	TalkManEvent.cpp	/^void TalkManEvent::happen()$/;"	f	class:TalkManEvent	signature:()
happen	TalkManEvent.h	/^    void happen();$/;"	p	class:TalkManEvent	access:public	signature:()
happen	TimeElapse.h	/^    void happen();$/;"	p	class:TimeElapseEvent	access:public	signature:()
happen	TimeElapseEvent.cpp	/^void TimeElapseEvent::happen()$/;"	f	class:TimeElapseEvent	signature:()
happen	TimeElapseEvent.h	/^    void happen();$/;"	p	class:TimeElapseEvent	access:public	signature:()
hasSh	MapState.h	/^   bool hasSh;$/;"	m	class:MapState	access:public
hasTouchEnded	ControllerListener.cpp	/^bool ControllerListener::hasTouchEnded()$/;"	f	class:ControllerListener	signature:()
hasTouchEnded	ControllerListener.h	/^	virtual bool hasTouchEnded();$/;"	p	class:ControllerListener	access:public	signature:()
hasTouchEnded	DiaWindow.cpp	/^bool DiaWindow::hasTouchEnded()$/;"	f	class:DiaWindow	signature:()
hasTouchEnded	DiaWindow.h	/^	bool hasTouchEnded();$/;"	p	class:DiaWindow	access:public	signature:()
haveLoaded	LoadingScene.h	/^	int haveLoaded;$/;"	m	class:LoadingScene	access:private
healthPoint	Role.h	/^	int healthPoint;$/;"	m	class:Role	access:public
hero	ButtonA.h	/^	Hero* hero;$/;"	m	class:ButtonA	access:public
hero	ControlPanel.h	/^	Hero* hero;$/;"	m	class:ControlPanel	access:public
hero	GlobalRes.h	/^    HumanEntity* hero;$/;"	m	class:GlobalRes	access:public
hero	Menu.h	/^	Hero* hero;$/;"	m	class:Menu	access:public
hero	TouchScreen.h	/^	Hero* hero;$/;"	m	class:TouchScreen	access:private
hitRate	Ability.h	/^	float hitRate;$/;"	m	class:Ability	access:public
humanPosForTileMove	Map.cpp	/^CCPoint Map::humanPosForTileMove(CCPoint tileCoord)$/;"	f	class:Map	signature:(CCPoint tileCoord)
humanPosForTileMove	Map.h	/^	CCPoint humanPosForTileMove(CCPoint tileCoord);$/;"	p	class:Map	access:public	signature:(CCPoint tileCoord)
hurt	Ability.h	/^	int hurt;$/;"	m	class:HurtAbl	access:public
id	Event.h	/^	int id;$/;"	m	class:Event	access:public
id	HumanEntity.h	/^	int id;$/;"	m	class:HumanEntity	access:public
img	GalleryScene.h	/^	cocos2d::CCSprite *img;$/;"	m	class:Gallery	access:private
imgNo	Event.h	/^	int imgNo;$/;"	m	class:Event	access:public
info	Menu.cpp	/^void Menu::info(CCObject* sender){$/;"	f	class:Menu	signature:(CCObject* sender)
info	Menu.h	/^	void info(CCObject* sender);$/;"	p	class:Menu	access:private	signature:(CCObject* sender)
init	Ability.cpp	/^bool Ability::init()$/;"	f	class:Ability	signature:()
init	Ability.h	/^	virtual bool init(); $/;"	p	class:Ability	access:public	signature:()
init	AbilityButton.cpp	/^bool AbilityButton::init()$/;"	f	class:AbilityButton	signature:()
init	AbilityButton.h	/^	virtual bool init();$/;"	p	class:AbilityButton	access:public	signature:()
init	Blood.cpp	/^bool Blood::init()$/;"	f	class:Blood	signature:()
init	Blood.h	/^	virtual bool init();$/;"	p	class:Blood	access:public	signature:()
init	Button.cpp	/^bool Button::init()$/;"	f	class:Button	signature:()
init	Button.h	/^	virtual bool init();$/;"	p	class:Button	access:public	signature:()
init	ButtonA.cpp	/^bool ButtonA::init()$/;"	f	class:ButtonA	signature:()
init	ButtonA.h	/^	virtual bool init();$/;"	p	class:ButtonA	access:public	signature:()
init	CPlayer.cpp	/^bool CPlayer::init()$/;"	f	class:CPlayer	signature:()
init	CPlayer.h	/^	virtual bool init();$/;"	p	class:CPlayer	access:public	signature:()
init	CombatScene.cpp	/^bool Combat::init()$/;"	f	class:Combat	signature:()
init	CombatScene.cpp	/^bool Combat::init(int monsterType)$/;"	f	class:Combat	signature:(int monsterType)
init	CombatScene.h	/^	bool init(int monsterType);$/;"	p	class:Combat	access:public	signature:(int monsterType)
init	CombatScene.h	/^    virtual bool init();  $/;"	p	class:Combat	access:public	signature:()
init	ControlPanel.cpp	/^bool ControlPanel::init()$/;"	f	class:ControlPanel	signature:()
init	ControlPanel.h	/^	bool init();$/;"	p	class:ControlPanel	access:public	signature:()
init	CsvUtil.cpp	/^bool CsvUtil::init(){$/;"	f	class:CsvUtil	signature:()
init	CsvUtil.h	/^    bool init();$/;"	p	class:CsvUtil	access:public	signature:()
init	DiaWindow.cpp	/^bool DiaWindow::init()$/;"	f	class:DiaWindow	signature:()
init	DiaWindow.h	/^	bool init();$/;"	p	class:DiaWindow	access:public	signature:()
init	DirButton.cpp	/^bool DirButton::init()$/;"	f	class:DirButton	signature:()
init	DirButton.h	/^	virtual bool init();$/;"	p	class:DirButton	access:public	signature:()
init	Event.cpp	/^bool Event::init()$/;"	f	class:Event	signature:()
init	Event.h	/^	bool init();$/;"	p	class:Event	access:public	signature:()
init	FileLoadUtil.cpp	/^bool FileLoadUtil::init() {$/;"	f	class:FileLoadUtil	signature:()
init	FileLoadUtil.h	/^    bool init();$/;"	p	class:FileLoadUtil	access:public	signature:()
init	GalleryScene.cpp	/^bool Gallery::init()$/;"	f	class:Gallery	signature:()
init	GalleryScene.h	/^	virtual bool init();  $/;"	p	class:Gallery	access:public	signature:()
init	GpsScene.cpp	/^bool Gps::init()$/;"	f	class:Gps	signature:()
init	GpsScene.h	/^	virtual bool init();  $/;"	p	class:Gps	access:public	signature:()
init	HelloWorldScene.cpp	/^bool HelloWorld::init()$/;"	f	class:HelloWorld	signature:()
init	HelloWorldScene.h	/^    virtual bool init();  $/;"	p	class:HelloWorld	access:public	signature:()
init	Hero.cpp	/^bool Hero::init() $/;"	f	class:Hero	signature:()
init	Hero.h	/^    bool init();$/;"	p	class:Hero	access:private	signature:()
init	LoadingScene.cpp	/^bool LoadingScene::init()$/;"	f	class:LoadingScene	signature:()
init	LoadingScene.h	/^	bool init();$/;"	p	class:LoadingScene	access:public	signature:()
init	Menu.cpp	/^bool Menu::init()$/;"	f	class:Menu	signature:()
init	Menu.h	/^	bool init();$/;"	p	class:Menu	access:public	signature:()
init	MenuLayer.cpp	/^bool MenuLayer::init()$/;"	f	class:MenuLayer	signature:()
init	MenuLayer.h	/^    virtual bool init();  $/;"	p	class:MenuLayer	access:public	signature:()
init	Monster.cpp	/^bool Monster::init()$/;"	f	class:Monster	signature:()
init	Monster.h	/^	virtual bool init();$/;"	p	class:Monster	access:public	signature:()
init	Particles.cpp	/^bool Particles::init()$/;"	f	class:Particles	signature:()
init	Particles.h	/^    virtual bool init();$/;"	p	class:Particles	access:public	signature:()
init	Player.cpp	/^void Player::init() {$/;"	f	class:Player	signature:()
init	Player.h	/^    void init();$/;"	p	class:Player	access:public	signature:()
init	Role.cpp	/^bool Role::init()$/;"	f	class:Role	signature:()
init	Role.h	/^	virtual bool init();$/;"	p	class:Role	access:public	signature:()
init	ShadowingMan.cpp	/^bool ShadowingMan::init()$/;"	f	class:ShadowingMan	signature:()
init	ShadowingMan.h	/^	bool init();$/;"	p	class:ShadowingMan	access:public	signature:()
init	StandingMan.cpp	/^bool StandingMan::init()$/;"	f	class:StandingMan	signature:()
init	StandingMan.h	/^	bool init();$/;"	p	class:StandingMan	access:private	signature:()
init	Story.cpp	/^bool StoryWorld::init() {$/;"	f	class:StoryWorld	signature:()
init	Story.h	/^  virtual bool init();$/;"	p	class:StoryWorld	access:public	signature:()
init	StringUtil.cpp	/^bool StringUtil::init(){$/;"	f	class:StringUtil	signature:()
init	StringUtil.h	/^    bool init();$/;"	p	class:StringUtil	access:public	signature:()
init	TouchScreen.cpp	/^bool TouchScreen::init()$/;"	f	class:TouchScreen	signature:()
init	TouchScreen.h	/^	bool init();$/;"	p	class:TouchScreen	access:public	signature:()
init	TurningMan.cpp	/^bool TurningMan::init()$/;"	f	class:TurningMan	signature:()
init	TurningMan.h	/^	bool init();$/;"	p	class:TurningMan	access:private	signature:()
init	WalkingMan.cpp	/^bool WalkingMan::init()$/;"	f	class:WalkingMan	signature:()
init	WalkingMan.h	/^    bool init();$/;"	p	class:WalkingMan	access:protected	signature:()
init	WebViewScene.cpp	/^bool WebView::init()$/;"	f	class:WebView	signature:()
init	WebviewScene.h	/^    virtual bool init();  $/;"	p	class:WebView	access:public	signature:()
init	Welcome.cpp	/^bool Welcome::init() {$/;"	f	class:Welcome	signature:()
init	Welcome.h	/^    virtual bool init();$/;"	p	class:Welcome	access:public	signature:()
init	Window.cpp	/^bool Window::init()$/;"	f	class:Window	signature:()
init	Window.h	/^	bool init();$/;"	p	class:Window	access:public	signature:()
initAction	Hero.cpp	/^void Hero::initAction(int dir)$/;"	f	class:Hero	signature:(int dir)
initAction	Hero.h	/^    void initAction(int dir);$/;"	p	class:Hero	access:private	signature:(int dir)
initAnim	TurningMan.cpp	/^void TurningMan::initAnim(int dir)$/;"	f	class:TurningMan	signature:(int dir)
initAnim	TurningMan.h	/^	void initAnim(int dir);$/;"	p	class:TurningMan	access:private	signature:(int dir)
initAnim	WalkingMan.cpp	/^CCActionInterval* WalkingMan::initAnim(std::vector<CCPoint> route)$/;"	f	class:WalkingMan	signature:(std::vector<CCPoint> route)
initAnim	WalkingMan.h	/^    CCActionInterval* initAnim(std::vector<CCPoint> route);$/;"	p	class:WalkingMan	access:protected	signature:(std::vector<CCPoint> route)
initAnimation	WalkingMan.cpp	/^void WalkingMan::initAnimation()$/;"	f	class:WalkingMan	signature:()
initAnimation	WalkingMan.h	/^    void initAnimation();$/;"	p	class:WalkingMan	access:protected	signature:()
initControlPanel	HelloWorldScene.cpp	/^void HelloWorld::initControlPanel(Map* map)$/;"	f	class:HelloWorld	signature:(Map* map)
initControlPanel	HelloWorldScene.h	/^	void initControlPanel(Map* map);$/;"	p	class:HelloWorld	access:private	signature:(Map* map)
initControllerListeners	ControlPanel.cpp	/^void ControlPanel::initControllerListeners()$/;"	f	class:ControlPanel	signature:()
initControllerListeners	ControlPanel.h	/^	void initControllerListeners();$/;"	p	class:ControlPanel	access:private	signature:()
initControllers	ControlPanel.cpp	/^void ControlPanel::initControllers()$/;"	f	class:ControlPanel	signature:()
initControllers	ControlPanel.h	/^	void initControllers();$/;"	p	class:ControlPanel	access:private	signature:()
initMap	HelloWorldScene.cpp	/^Map* HelloWorld::initMap()$/;"	f	class:HelloWorld	signature:()
initMap	HelloWorldScene.h	/^	Map* initMap();$/;"	p	class:HelloWorld	access:private	signature:()
initNPC	Map.cpp	/^void Map::initNPC()$/;"	f	class:Map	signature:()
initNPC	Map.h	/^	void initNPC();$/;"	p	class:Map	access:public	signature:()
initNPC	NPCUtil.cpp	/^CCArray* NPCUtil::initNPC()$/;"	f	class:NPCUtil	signature:()
initNPC	NPCUtil.h	/^    static CCArray* initNPC();$/;"	p	class:NPCUtil	access:public	signature:()
initNightBg	ControlPanel.cpp	/^void ControlPanel::initNightBg()$/;"	f	class:ControlPanel	signature:()
initNightBg	ControlPanel.h	/^	void initNightBg();$/;"	p	class:ControlPanel	access:private	signature:()
initSprite	BigWindow.cpp	/^void BigWindow::initSprite()$/;"	f	class:BigWindow	signature:()
initSprite	BigWindow.h	/^	void initSprite();$/;"	p	class:BigWindow	access:public	signature:()
initSprite	Button.cpp	/^void Button::initSprite()$/;"	f	class:Button	signature:()
initSprite	Button.h	/^	virtual void initSprite();$/;"	p	class:Button	access:public	signature:()
initSprite	ButtonA.cpp	/^void ButtonA::initSprite()$/;"	f	class:ButtonA	signature:()
initSprite	ButtonA.h	/^	virtual void initSprite();$/;"	p	class:ButtonA	access:public	signature:()
initSprite	DiaWindow.cpp	/^void DiaWindow::initSprite()$/;"	f	class:DiaWindow	signature:()
initSprite	DiaWindow.h	/^	void initSprite();$/;"	p	class:DiaWindow	access:public	signature:()
initSprite	DirButton.cpp	/^void DirButton::initSprite()$/;"	f	class:DirButton	signature:()
initSprite	DirButton.h	/^	virtual void initSprite();$/;"	p	class:DirButton	access:public	signature:()
initSprite	Entity.cpp	/^void Entity::initSprite() $/;"	f	class:Entity	signature:()
initSprite	Entity.h	/^    virtual void initSprite();$/;"	p	class:Entity	access:public	signature:()
initSprite	HumanEntity.cpp	/^void HumanEntity::initSprite()$/;"	f	class:HumanEntity	signature:()
initSprite	HumanEntity.h	/^	virtual void initSprite();$/;"	p	class:HumanEntity	access:public	signature:()
initSprite	PlacenameWindow.cpp	/^void PlacenameWindow::initSprite()$/;"	f	class:PlacenameWindow	signature:()
initSprite	PlacenameWindow.h	/^	void initSprite();$/;"	p	class:PlacenameWindow	access:public	signature:()
initSprite	Window.h	/^	virtual void initSprite()=0;$/;"	p	class:Window	access:public	signature:()
initTTFs	LoadingScene.cpp	/^void LoadingScene::initTTFs()$/;"	f	class:LoadingScene	signature:()
initTTFs	LoadingScene.h	/^	void initTTFs();$/;"	p	class:LoadingScene	access:private	signature:()
initView	Welcome.cpp	/^void Welcome::initView()$/;"	f	class:Welcome	signature:()
initView	Welcome.h	/^	void initView();$/;"	p	class:Welcome	access:private	signature:()
instance	Singleton.hpp	/^	static T* instance();$/;"	p	class:Singleton	access:public	signature:()
instance	Singleton.hpp	/^T* Singleton<T>::instance()$/;"	f	class:Singleton	signature:()
isInstant	EventManager.cpp	/^int EventManager::isInstant(Event* event)$/;"	f	class:EventManager	signature:(Event* event)
isInstant	EventManager.h	/^	int isInstant(Event* event);$/;"	p	class:EventManager	access:public	signature:(Event* event)
isNight	GlobalState.h	/^	bool isNight;$/;"	m	class:GlobalState	access:public
isNight	TimeUtil.cpp	/^int TimeUtil::isNight(int hh)$/;"	f	class:TimeUtil	signature:(int hh)
isNight	TimeUtil.h	/^	static bool isNight(int hh);$/;"	p	class:TimeUtil	access:public	signature:(int hh)
isPlayingAnimation	CombatScene.h	/^	bool isPlayingAnimation;$/;"	m	class:Combat	access:private
isTouch	AbilityButton.h	/^	bool isTouch;$/;"	m	class:AbilityButton	access:public
isWalking	WalkingMan.h	/^    bool isWalking;$/;"	m	class:WalkingMan	access:public
kEvent	AppMacros.h	/^typedef enum{kNone=1,kWall=17,kEvent=41}CollisionType;$/;"	e	enum:__anon2
kNone	AppMacros.h	/^typedef enum{kNone=1,kWall=17,kEvent=41}CollisionType;$/;"	e	enum:__anon2
kWall	AppMacros.h	/^typedef enum{kNone=1,kWall=17,kEvent=41}CollisionType;$/;"	e	enum:__anon2
label	Window.h	/^	CCLabelTTF* label;$/;"	m	class:Window	access:protected
latitude	GpsScene.h	/^	double latitude;$/;"	m	class:Gps	access:public
leafletChoiceHandler	Story.cpp	/^void StoryWorld::leafletChoiceHandler(CCObject *sender) {$/;"	f	class:StoryWorld	signature:(CCObject *sender)
leafletChoiceHandler	Story.h	/^  void leafletChoiceHandler(CCObject *sender);$/;"	p	class:StoryWorld	access:protected	signature:(CCObject *sender)
letsGo	Hero.cpp	/^void Hero::letsGo(float dt)$/;"	f	class:Hero	signature:(float dt)
letsGo	Hero.h	/^    void letsGo(float dt);$/;"	p	class:Hero	access:private	signature:(float dt)
level	CombatUnit.h	/^   int level;$/;"	m	class:CombatUnit	access:public
level	Role.h	/^	int level;$/;"	m	class:Role	access:public
lineNum	PlayReader.h	/^  unsigned long lineNum;$/;"	m	class:PlayReader	access:protected
listener	EventManager.cpp	/^ControllerListener* EventManager::listener(int type)$/;"	f	class:EventManager	signature:(int type)
listener	EventManager.h	/^    ControllerListener* listener(int type);$/;"	p	class:EventManager	access:private	signature:(int type)
load	BigWindow.cpp	/^void BigWindow::load(CCTMXTiledMap* map,CCDictionary *properties)$/;"	f	class:BigWindow	signature:(CCTMXTiledMap* map,CCDictionary *properties)
load	BigWindow.h	/^	void load(CCTMXTiledMap* map,CCDictionary *properties);$/;"	p	class:BigWindow	access:public	signature:(CCTMXTiledMap* map,CCDictionary *properties)
load	DiaWindow.cpp	/^void DiaWindow::load(CCArray* dialog)$/;"	f	class:DiaWindow	signature:(CCArray* dialog)
load	DiaWindow.h	/^	void load(CCArray* dialog);$/;"	p	class:DiaWindow	access:public	signature:(CCArray* dialog)
load	EventManager.cpp	/^void EventManager::load(int fnmapNo, int weekday)$/;"	f	class:EventManager	signature:(int fnmapNo, int weekday)
load	EventManager.h	/^    void load(int fnmapNo, int weekday);$/;"	p	class:EventManager	access:public	signature:(int fnmapNo, int weekday)
load	GlobalState.cpp	/^void GlobalState::load()$/;"	f	class:GlobalState	signature:()
load	GlobalState.h	/^    void load();$/;"	p	class:GlobalState	access:public	signature:()
load	LoadingScene.cpp	/^void LoadingScene::load()$/;"	f	class:LoadingScene	signature:()
load	LoadingScene.h	/^	void load();$/;"	p	class:LoadingScene	access:private	signature:()
load	PlacenameWindow.cpp	/^void PlacenameWindow::load(CCTMXTiledMap* map,CCDictionary *properties)$/;"	f	class:PlacenameWindow	signature:(CCTMXTiledMap* map,CCDictionary *properties)
load	PlacenameWindow.h	/^	void load(CCTMXTiledMap* map,CCDictionary *properties);$/;"	p	class:PlacenameWindow	access:public	signature:(CCTMXTiledMap* map,CCDictionary *properties)
load	Window.cpp	/^void Window::load(CCTMXTiledMap* map,CCDictionary *properties)$/;"	f	class:Window	signature:(CCTMXTiledMap* map,CCDictionary *properties)
load	Window.h	/^	virtual void load(CCTMXTiledMap* map,CCDictionary *properties);$/;"	p	class:Window	access:public	signature:(CCTMXTiledMap* map,CCDictionary *properties)
loadAllEvents	EventManager.cpp	/^void EventManager::loadAllEvents(int fileCode)$/;"	f	class:EventManager	signature:(int fileCode)
loadAllEvents	EventManager.h	/^    void loadAllEvents(int fileCode);$/;"	p	class:EventManager	access:private	signature:(int fileCode)
loadDoneList	GlobalState.cpp	/^void GlobalState::loadDoneList()$/;"	f	class:GlobalState	signature:()
loadDoneList	GlobalState.h	/^    void loadDoneList();$/;"	p	class:GlobalState	access:private	signature:()
loadEmap	EventManager.cpp	/^void EventManager::loadEmap()$/;"	f	class:EventManager	signature:()
loadEmap	EventManager.h	/^    void loadEmap();$/;"	p	class:EventManager	access:private	signature:()
loadFile	CsvUtil.cpp	/^void CsvUtil::loadFile( const char* sPath ){$/;"	f	class:CsvUtil	signature:( const char* sPath )
loadFile	CsvUtil.h	/^    void loadFile(const char* sPath);$/;"	p	class:CsvUtil	access:public	signature:(const char* sPath)
loadMapState	GlobalState.cpp	/^void GlobalState::loadMapState()$/;"	f	class:GlobalState	signature:()
loadMapState	GlobalState.h	/^    void loadMapState();$/;"	p	class:GlobalState	access:private	signature:()
loadNight	EventManager.cpp	/^void EventManager::loadNight(int fnmapNo)$/;"	f	class:EventManager	signature:(int fnmapNo)
loadNight	EventManager.h	/^	void loadNight(int fnmapNo);$/;"	p	class:EventManager	access:public	signature:(int fnmapNo)
loadPlayerState	GlobalState.cpp	/^void GlobalState::loadPlayerState()$/;"	f	class:GlobalState	signature:()
loadPlayerState	GlobalState.h	/^    void loadPlayerState();$/;"	p	class:GlobalState	access:private	signature:()
loadSuperPower	GlobalState.cpp	/^void GlobalState::loadSuperPower()$/;"	f	class:GlobalState	signature:()
loadSuperPower	GlobalState.h	/^    void loadSuperPower();$/;"	p	class:GlobalState	access:private	signature:()
loadedCallBack	LoadingScene.cpp	/^void LoadingScene::loadedCallBack(CCObject* nothing)$/;"	f	class:LoadingScene	signature:(CCObject* nothing)
loadedCallBack	LoadingScene.h	/^	void loadedCallBack(CCObject* nothing);$/;"	p	class:LoadingScene	access:private	signature:(CCObject* nothing)
longitude	GpsScene.h	/^	double longitude;$/;"	m	class:Gps	access:public
loseLabel	CombatScene.h	/^	CCLabelTTF* loseLabel;$/;"	m	class:Combat	access:private
lvlBuff	Ability.h	/^	float lvlBuff;$/;"	m	class:Ability	access:public
mCsvDict	CsvUtil.h	/^    CCDictionary* mCsvDict;$/;"	m	class:CsvUtil	access:private
mCsvUtil	CsvUtil.cpp	/^CsvUtil* CsvUtil::mCsvUtil = NULL;$/;"	m	class:CsvUtil	file:
mCsvUtil	CsvUtil.h	/^    static CsvUtil* mCsvUtil;$/;"	m	class:CsvUtil	access:private
mFileLoadUtil	FileLoadUtil.cpp	/^FileLoadUtil* FileLoadUtil::mFileLoadUtil = NULL;$/;"	m	class:FileLoadUtil	file:
mFileLoadUtil	FileLoadUtil.h	/^    static FileLoadUtil* mFileLoadUtil;$/;"	m	class:FileLoadUtil	access:private
mStringUtil	StringUtil.cpp	/^StringUtil* StringUtil::mStringUtil = NULL;$/;"	m	class:StringUtil	file:
mStringUtil	StringUtil.h	/^    static StringUtil* mStringUtil;$/;"	m	class:StringUtil	access:private
mSystem	Particles.h	/^	CCParticleSystemQuad* mSystem;$/;"	m	class:Particles	access:private
m_emitter	Particles.h	/^	CCParticleSystemQuad *m_emitter;$/;"	m	class:Particles	access:private
magicPower	Ability.h	/^	int magicPower;$/;"	m	class:Ability	access:public
manWalk	WalkingMan.h	/^    CCFiniteTimeAction* manWalk;$/;"	m	class:WalkingMan	access:public
map	ControlPanel.h	/^	Map* map;$/;"	m	class:ControlPanel	access:public
map	GlobalRes.h	/^    CCTMXTiledMap* map;$/;"	m	class:GlobalRes	access:public
map	Hero.h	/^    Map* map;$/;"	m	class:Hero	access:public
map	Window.h	/^	CCTMXTiledMap* map;$/;"	m	class:Window	access:protected
map2	GalleryScene.h	/^	cocos2d::CCSprite* map2;$/;"	m	class:Gallery	access:private
mapNo	MapState.h	/^   int mapNo;$/;"	m	class:MapState	access:public
mapPoint	GpsScene.h	/^	CCSprite* mapPoint;$/;"	m	class:Gps	access:public
mapState	GlobalState.h	/^    MapState* mapState;$/;"	m	class:GlobalState	access:public
markHappened	EventManager.cpp	/^void EventManager::markHappened(Event* event)$/;"	f	class:EventManager	signature:(Event* event)
markHappened	EventManager.h	/^    void markHappened(Event* event);$/;"	p	class:EventManager	access:private	signature:(Event* event)
mbloodLabel	CombatScene.h	/^	CCLabelTTF* mbloodLabel;$/;"	m	class:Combat	access:private
menu	Menu.h	/^	CCMenu* menu;$/;"	m	class:Menu	access:public
menu1CallBack	GalleryScene.cpp	/^void Gallery::menu1CallBack(CCObject* pSender){$/;"	f	class:Gallery	signature:(CCObject* pSender)
menu1CallBack	GalleryScene.h	/^	void menu1CallBack(CCObject* pSender);  $/;"	p	class:Gallery	access:public	signature:(CCObject* pSender)
menu2CallBack	GalleryScene.cpp	/^void Gallery::menu2CallBack(CCObject* pSender){$/;"	f	class:Gallery	signature:(CCObject* pSender)
menu2CallBack	GalleryScene.h	/^	void menu2CallBack(CCObject* pSender);  $/;"	p	class:Gallery	access:public	signature:(CCObject* pSender)
menu3CallBack	GalleryScene.cpp	/^void Gallery::menu3CallBack(CCObject* pSender){$/;"	f	class:Gallery	signature:(CCObject* pSender)
menu3CallBack	GalleryScene.h	/^	void menu3CallBack(CCObject* pSender);  $/;"	p	class:Gallery	access:public	signature:(CCObject* pSender)
menu3CallBack	GpsScene.cpp	/^void Gps::menu3CallBack(CCObject* pSender){$/;"	f	class:Gps	signature:(CCObject* pSender)
menu3CallBack	GpsScene.h	/^	void menu3CallBack(CCObject* pSender);$/;"	p	class:Gps	access:public	signature:(CCObject* pSender)
menu4CallBack	GalleryScene.cpp	/^void Gallery::menu4CallBack(CCObject* pSender){$/;"	f	class:Gallery	signature:(CCObject* pSender)
menu4CallBack	GalleryScene.h	/^	void menu4CallBack(CCObject* pSender);$/;"	p	class:Gallery	access:public	signature:(CCObject* pSender)
menuButton	Menu.h	/^	CCMenu* menuButton;$/;"	m	class:Menu	access:public
menuClearCallback	Welcome.cpp	/^void Welcome::menuClearCallback(CCObject* pSender) {$/;"	f	class:Welcome	signature:(CCObject* pSender)
menuClearCallback	Welcome.h	/^	void menuClearCallback(CCObject* pSender);$/;"	p	class:Welcome	access:protected	signature:(CCObject* pSender)
menuCloseCallback	CombatScene.h	/^    void menuCloseCallback(CCObject* pSender);$/;"	p	class:Combat	access:public	signature:(CCObject* pSender)
menuCloseCallback	GalleryScene.h	/^	void menuCloseCallback(CCObject* pSender);  $/;"	p	class:Gallery	access:public	signature:(CCObject* pSender)
menuCloseCallback	GpsScene.h	/^	void menuCloseCallback(CCObject* pSender);$/;"	p	class:Gps	access:public	signature:(CCObject* pSender)
menuCloseCallback	MenuLayer.h	/^    void menuCloseCallback(CCObject* pSender);$/;"	p	class:MenuLayer	access:public	signature:(CCObject* pSender)
menuCloseCallback	Story.cpp	/^void StoryWorld::menuCloseCallback(CCObject* pSender) {$/;"	f	class:StoryWorld	signature:(CCObject* pSender)
menuCloseCallback	Story.h	/^  void menuCloseCallback(CCObject* pSender);$/;"	p	class:StoryWorld	access:protected	signature:(CCObject* pSender)
menuCloseCallback	WebViewScene.cpp	/^void WebView::menuCloseCallback(CCObject* pSender)$/;"	f	class:WebView	signature:(CCObject* pSender)
menuCloseCallback	WebviewScene.h	/^    void menuCloseCallback(CCObject* pSender);$/;"	p	class:WebView	access:public	signature:(CCObject* pSender)
menuEnable	GalleryScene.h	/^	bool menuEnable;$/;"	m	class:Gallery	access:private
menuLeafletsCloseCallback	Story.cpp	/^void StoryWorld::menuLeafletsCloseCallback(CCObject* sender) {$/;"	f	class:StoryWorld	signature:(CCObject* sender)
menuLeafletsCloseCallback	Story.h	/^  void menuLeafletsCloseCallback(CCObject* sender);$/;"	p	class:StoryWorld	access:protected	signature:(CCObject* sender)
menuNum	GalleryScene.h	/^	int menuNum;$/;"	m	class:Gallery	access:private
menuStartCallback	Welcome.cpp	/^void Welcome::menuStartCallback(CCObject* pSender) {$/;"	f	class:Welcome	signature:(CCObject* pSender)
menuStartCallback	Welcome.h	/^    void menuStartCallback(CCObject* pSender);$/;"	p	class:Welcome	access:protected	signature:(CCObject* pSender)
metal	AbilityButton.h	/^	metal$/;"	e	enum:__anon1
mlevelLabel	CombatScene.h	/^	CCLabelTTF* mlevelLabel;$/;"	m	class:Combat	access:private
monster	CombatScene.h	/^	Monster* monster;$/;"	m	class:Combat	access:private
monster	Monster.h	/^	CCSprite* monster;$/;"	m	class:Monster	access:private
monsterAttack	CombatScene.h	/^	Particles* monsterAttack;$/;"	m	class:Combat	access:private
monsterAttack	Particles.cpp	/^void Particles::monsterAttack()$/;"	f	class:Particles	signature:()
monsterAttack	Particles.h	/^	void monsterAttack();$/;"	p	class:Particles	access:public	signature:()
monsterButtonTag	CombatScene.h	/^	int monsterButtonTag;$/;"	m	class:Combat	access:private
monsterNo	Monster.h	/^	int monsterNo;$/;"	m	class:Monster	access:public
monsterType	CombatScene.h	/^	int monsterType;$/;"	m	class:Combat	access:public
monsterWin	CombatScene.h	/^	monsterWin,$/;"	e	enum:__anon4
monsterblood	CombatScene.h	/^	Blood* monsterblood;$/;"	m	class:Combat	access:private
monsterbutton	CombatScene.h	/^	AbilityButton* monsterbutton;$/;"	m	class:Combat	access:private
move	Hero.h	/^    CCPoint move;$/;"	m	class:Hero	access:public
moveHero	Hero.h	/^	CCAction* moveHero;$/;"	m	class:Hero	access:private
moveLegs	Hero.h	/^    cocos2d::CCAction* moveLegs;$/;"	m	class:Hero	access:private
moveMap	Hero.h	/^    cocos2d::CCAction* moveMap;$/;"	m	class:Hero	access:private
nArg	Event.h	/^	int nArg;$/;"	m	class:Event	access:public
nDia	Event.h	/^	int nDia;$/;"	m	class:Event	access:public
nNext	DiaWindow.h	/^	int nNext;$/;"	m	class:DiaWindow	access:private
nPre	Event.h	/^	int nPre;$/;"	m	class:Event	access:public
nStr	DiaWindow.h	/^	int nStr;$/;"	m	class:DiaWindow	access:private
nTime	MapState.h	/^   int nTime;$/;"	m	class:MapState	access:public
name	Ability.h	/^	CCString name;$/;"	m	class:Ability	access:public
name	CombatUnit.h	/^   CCString name;$/;"	m	class:CombatUnit	access:public
newr	GlobalState.cpp	/^void GlobalState::newr()$/;"	f	class:GlobalState	signature:()
newr	GlobalState.h	/^    void newr();$/;"	p	class:GlobalState	access:public	signature:()
next	Event.h	/^	int next;$/;"	m	class:Event	access:public
next	EventManager.cpp	/^ControllerListener* EventManager::next()$/;"	f	class:EventManager	signature:()
next	EventManager.h	/^	ControllerListener* next();$/;"	p	class:EventManager	access:public	signature:()
nextMove	BigWindow.cpp	/^void BigWindow::nextMove()$/;"	f	class:BigWindow	signature:()
nextMove	BigWindow.h	/^	void nextMove();$/;"	p	class:BigWindow	access:public	signature:()
nextMove	PlacenameWindow.cpp	/^void PlacenameWindow::nextMove()$/;"	f	class:PlacenameWindow	signature:()
nextMove	PlacenameWindow.h	/^	void nextMove();$/;"	p	class:PlacenameWindow	access:public	signature:()
nextMove	Window.cpp	/^void Window::nextMove()$/;"	f	class:Window	signature:()
nextMove	Window.h	/^	virtual void nextMove();$/;"	p	class:Window	access:public	signature:()
nightBg	GlobalRes.h	/^	CCSprite* nightBg; $/;"	m	class:GlobalRes	access:public
numberOfCellsInTableView	GalleryScene.cpp	/^unsigned int Gallery::numberOfCellsInTableView(CCTableView *table)$/;"	f	class:Gallery	signature:(CCTableView *table)
numberOfCellsInTableView	GalleryScene.h	/^	virtual unsigned int numberOfCellsInTableView(cocos2d::extension::CCTableView *table);  $/;"	p	class:Gallery	access:public	signature:(cocos2d::extension::CCTableView *table)
onGoing	EventManager.h	/^	Event* onGoing;$/;"	m	class:EventManager	access:public
pLabel	GpsScene.h	/^	CCLabelTTF* pLabel;$/;"	m	class:Gps	access:public
pLabel2	GpsScene.h	/^	CCLabelTTF* pLabel2;$/;"	m	class:Gps	access:public
pLabel3	GpsScene.h	/^	CCLabelTTF* pLabel3;$/;"	m	class:Gps	access:public
pbloodLabel	CombatScene.h	/^	CCLabelTTF* pbloodLabel;$/;"	m	class:Combat	access:private
picNo	Entity.h	/^    int picNo;$/;"	m	class:Entity	access:protected
picture	Window.h	/^	CCSprite* picture;$/;"	m	class:Window	access:protected
playAnimation	CombatScene.cpp	/^void Combat::playAnimation(CCObject* psender)$/;"	f	class:Combat	signature:(CCObject* psender)
playAnimation	CombatScene.h	/^	void playAnimation(CCObject* psender);$/;"	p	class:Combat	access:public	signature:(CCObject* psender)
player	CPlayer.h	/^	CCSprite* player;$/;"	m	class:CPlayer	access:private
playerAttack	CombatScene.h	/^	Particles* playerAttack;$/;"	m	class:Combat	access:private
playerAttack	Particles.cpp	/^void Particles::playerAttack()$/;"	f	class:Particles	signature:()
playerAttack	Particles.h	/^	void playerAttack();$/;"	p	class:Particles	access:public	signature:()
playerGetAttack	Player.cpp	/^bool Player::playerGetAttack(int type)$/;"	f	class:Player	signature:(int type)
playerGetAttack	Player.h	/^	bool playerGetAttack(int type);$/;"	p	class:Player	access:public	signature:(int type)
playerState	GlobalState.h	/^	PlayerState* playerState;$/;"	m	class:GlobalState	access:public
playerWin	CombatScene.h	/^	playerWin,$/;"	e	enum:__anon4
playerblood	CombatScene.h	/^	Blood* playerblood;$/;"	m	class:Combat	access:private
playerbutton	CombatScene.h	/^	AbilityButton* playerbutton;$/;"	m	class:Combat	access:private
playerlevel	Player.h	/^		int playerlevel;$/;"	m	class:Player	access:public
plcnwindow	ControlPanel.h	/^	PlacenameWindow* plcnwindow;$/;"	m	class:ControlPanel	access:public
plevelLabel	CombatScene.h	/^	CCLabelTTF* plevelLabel;$/;"	m	class:Combat	access:private
pointImg	GalleryScene.h	/^	cocos2d::CCSprite* pointImg;$/;"	m	class:Gallery	access:private
popCombat	CombatScene.cpp	/^void Combat::popCombat()$/;"	f	class:Combat	signature:()
popCombat	CombatScene.h	/^	void popCombat();$/;"	p	class:Combat	access:public	signature:()
positionFromTileCoord	Map.cpp	/^CCPoint Map::positionFromTileCoord(CCPoint tileCoord)$/;"	f	class:Map	signature:(CCPoint tileCoord)
positionFromTileCoord	Map.h	/^	CCPoint positionFromTileCoord(CCPoint tileCoord);$/;"	p	class:Map	access:public	signature:(CCPoint tileCoord)
positionX	MapState.h	/^   int positionX;$/;"	m	class:MapState	access:public
positionY	MapState.h	/^   int positionY;$/;"	m	class:MapState	access:public
pres	Event.h	/^	CCArray* pres;$/;"	m	class:Event	access:public
prevPlaceID	PlacenameWindow.h	/^	int prevPlaceID;$/;"	m	class:PlacenameWindow	access:public
prevTouch	Welcome.h	/^	CCTouch* prevTouch;$/;"	m	class:Welcome	access:private
properties	Window.h	/^	CCDictionary *properties;$/;"	m	class:Window	access:protected
quit	Menu.cpp	/^void Menu::quit(CCObject* sender)$/;"	f	class:Menu	signature:(CCObject* sender)
quit	Menu.h	/^	void quit(CCObject *sender);$/;"	p	class:Menu	access:private	signature:(CCObject *sender)
rGlobal	GlobalRes.h	23;"	d
rcsid	strtok_r.c	/^static const char rcsid[] = "$Id: strtok_r.c,v 1.1 2001\/04\/24 14:25:34 chris Exp $";  $/;"	v	file:
reader	Story.h	/^  PlayReader reader;$/;"	m	class:StoryWorld	access:protected
recvHurtActID	Ability.h	/^	int recvHurtActID;$/;"	m	class:Ability	access:public
registerWithTouchDispatcher	Story.cpp	/^void StoryWorld::registerWithTouchDispatcher(void)$/;"	f	class:StoryWorld	signature:(void)
registerWithTouchDispatcher	Story.h	/^  void registerWithTouchDispatcher(void);$/;"	p	class:StoryWorld	access:protected	signature:(void)
release	EventManager.cpp	/^void EventManager::release()$/;"	f	class:EventManager	signature:()
release	EventManager.h	/^	void release();$/;"	p	class:EventManager	access:public	signature:()
release	Singleton.hpp	/^	void release();$/;"	p	class:Singleton	access:public	signature:()
release	Singleton.hpp	/^void Singleton<T>::release()$/;"	f	class:Singleton	signature:()
releaseFile	CsvUtil.cpp	/^void CsvUtil::releaseFile( const char* sPath ){$/;"	f	class:CsvUtil	signature:( const char* sPath )
releaseFile	CsvUtil.h	/^    void releaseFile(const char* sPath);$/;"	p	class:CsvUtil	access:public	signature:(const char* sPath)
remainHp	CombatUnit.h	/^   int remainHp;$/;"	m	class:CombatUnit	access:public
removeAllChildrenWithCleanup	Map.cpp	/^void Map::removeAllChildrenWithCleanup(bool cleanup)$/;"	f	class:Map	signature:(bool cleanup)
removeAllChildrenWithCleanup	Map.h	/^	virtual void removeAllChildrenWithCleanup(bool cleanup);$/;"	p	class:Map	access:public	signature:(bool cleanup)
repeat	Event.h	/^	bool repeat;$/;"	m	class:Event	access:public
respond	BigWindow.cpp	/^void BigWindow::respond(CCTMXTiledMap* map,CCDictionary *properties)$/;"	f	class:BigWindow	signature:(CCTMXTiledMap* map,CCDictionary *properties)
respond	BigWindow.h	/^	void respond(CCTMXTiledMap* map,CCDictionary *properties);$/;"	p	class:BigWindow	access:public	signature:(CCTMXTiledMap* map,CCDictionary *properties)
respond	Controllable.cpp	/^void Controllable::respond(int dir)$/;"	f	class:Controllable	signature:(int dir)
respond	Controllable.h	/^	virtual void respond(int dir);$/;"	p	class:Controllable	access:public	signature:(int dir)
respond	ControllerListener.cpp	/^void ControllerListener::respond(int dir)$/;"	f	class:ControllerListener	signature:(int dir)
respond	ControllerListener.h	/^	virtual void respond(int dir);$/;"	p	class:ControllerListener	access:public	signature:(int dir)
respond	DiaWindow.cpp	/^void DiaWindow::respond()$/;"	f	class:DiaWindow	signature:()
respond	DiaWindow.h	/^	void respond();$/;"	p	class:DiaWindow	access:public	signature:()
respond	Hero.cpp	/^void Hero::respond(int dir) $/;"	f	class:Hero	signature:(int dir)
respond	Hero.h	/^    void respond(int dir);$/;"	p	class:Hero	access:public	signature:(int dir)
respond	HumanEntity.cpp	/^void HumanEntity::respond(int dir)$/;"	f	class:HumanEntity	signature:(int dir)
respond	HumanEntity.h	/^	virtual void respond(int dir);$/;"	p	class:HumanEntity	access:public	signature:(int dir)
respond	PlacenameWindow.cpp	/^void PlacenameWindow::respond(int curPlaceID)$/;"	f	class:PlacenameWindow	signature:(int curPlaceID)
respond	PlacenameWindow.h	/^	void respond(int curPlaceID);$/;"	p	class:PlacenameWindow	access:public	signature:(int curPlaceID)
respond	StandingMan.cpp	/^void StandingMan::respond(int direction)$/;"	f	class:StandingMan	signature:(int direction)
respond	StandingMan.h	/^	void respond(int dir);$/;"	p	class:StandingMan	access:public	signature:(int dir)
respond	TurningMan.cpp	/^void TurningMan::respond(int dir)$/;"	f	class:TurningMan	signature:(int dir)
respond	TurningMan.h	/^	void respond(int dir);$/;"	p	class:TurningMan	access:public	signature:(int dir)
respond	WalkingMan.cpp	/^void WalkingMan::respond(int dir)$/;"	f	class:WalkingMan	signature:(int dir)
respond	WalkingMan.h	/^    void respond(int dir);$/;"	p	class:WalkingMan	access:public	signature:(int dir)
respond	Window.cpp	/^void Window::respond()$/;"	f	class:Window	signature:()
respond	Window.cpp	/^void Window::respond(int dir)$/;"	f	class:Window	signature:(int dir)
respond	Window.h	/^	virtual void respond();$/;"	p	class:Window	access:public	signature:()
respond	Window.h	/^	virtual void respond(int dir);$/;"	p	class:Window	access:public	signature:(int dir)
ret	Menu.cpp	/^void Menu::ret(CCObject* sender)$/;"	f	class:Menu	signature:(CCObject* sender)
ret	Menu.h	/^	void ret(CCObject *sender);$/;"	p	class:Menu	access:private	signature:(CCObject *sender)
route	WalkingMan.h	/^    std::vector<CCPoint> route;$/;"	m	class:WalkingMan	access:public
rwindow	GlobalRes.h	/^    Window* rwindow;$/;"	m	class:GlobalRes	access:public
sChoice	Story.h	/^  enum allChoice {fChoice = 10, sChoice, tChoice};$/;"	e	enum:StoryWorld::allChoice
sEventManager	EventManager.h	/^typedef Singleton<EventManager> sEventManager;$/;"	t
sGlobal	GlobalState.h	38;"	d
sGlobalRes	GlobalRes.h	/^typedef Singleton<GlobalRes> sGlobalRes;$/;"	t
sTime	MapState.h	/^   int sTime;$/;"	m	class:MapState	access:public
save	GlobalState.cpp	/^void GlobalState::save()$/;"	f	class:GlobalState	signature:()
save	GlobalState.h	/^    void save();$/;"	p	class:GlobalState	access:public	signature:()
save	Menu.cpp	/^void Menu::save(CCObject* sender)$/;"	f	class:Menu	signature:(CCObject* sender)
save	Menu.h	/^	void save(CCObject *sender);$/;"	p	class:Menu	access:private	signature:(CCObject *sender)
save	PlayReader.cpp	/^void ProcessSaver::save(int x, int y, int mapProcess) {$/;"	f	class:ProcessSaver	signature:(int x, int y, int mapProcess)
save	PlayReader.h	/^  void save(int x, int y, int mapProcess);$/;"	p	class:ProcessSaver	access:public	signature:(int x, int y, int mapProcess)
saveDoneList	GlobalState.cpp	/^void GlobalState::saveDoneList()$/;"	f	class:GlobalState	signature:()
saveDoneList	GlobalState.h	/^	void saveDoneList();$/;"	p	class:GlobalState	access:private	signature:()
saveList	RcdUtil.cpp	/^void RcdUtil::saveList(CCArray* list, char delim)$/;"	f	class:RcdUtil	signature:(CCArray* list, char delim)
saveList	RcdUtil.h	/^	static void saveList(CCArray* list, char delim);$/;"	p	class:RcdUtil	access:public	signature:(CCArray* list, char delim)
saveMapProcess	PlayReader.cpp	/^void ProcessSaver::saveMapProcess(int mapProcess) {$/;"	f	class:ProcessSaver	signature:(int mapProcess)
saveMapProcess	PlayReader.h	/^  void saveMapProcess(int mapProcess);$/;"	p	class:ProcessSaver	access:public	signature:(int mapProcess)
savePosition	PlayReader.cpp	/^void ProcessSaver::savePosition(int x, int y) {$/;"	f	class:ProcessSaver	signature:(int x, int y)
savePosition	PlayReader.h	/^  void savePosition(int x, int y);$/;"	p	class:ProcessSaver	access:public	signature:(int x, int y)
saveProcess	PlayReader.cpp	/^void ProcessSaver::saveProcess(int process) {$/;"	f	class:ProcessSaver	signature:(int process)
saveProcess	PlayReader.h	/^  void saveProcess(int process);$/;"	p	class:ProcessSaver	access:public	signature:(int process)
saveProcessAndPopOut	Story.cpp	/^void StoryWorld::saveProcessAndPopOut() {$/;"	f	class:StoryWorld	signature:()
saveProcessAndPopOut	Story.h	/^  void saveProcessAndPopOut();$/;"	p	class:StoryWorld	access:protected	signature:()
scene	CombatScene.cpp	/^CCScene* Combat::scene()$/;"	f	class:Combat	signature:()
scene	CombatScene.h	/^    static cocos2d::CCScene* scene();$/;"	p	class:Combat	access:public	signature:()
scene	GalleryScene.cpp	/^CCScene* Gallery::scene()$/;"	f	class:Gallery	signature:()
scene	GalleryScene.h	/^	static cocos2d::CCScene* scene();  $/;"	p	class:Gallery	access:public	signature:()
scene	GpsScene.cpp	/^CCScene* Gps::scene()$/;"	f	class:Gps	signature:()
scene	GpsScene.h	/^	static cocos2d::CCScene* scene();$/;"	p	class:Gps	access:public	signature:()
scene	HelloWorldScene.cpp	/^CCScene* HelloWorld::scene()$/;"	f	class:HelloWorld	signature:()
scene	HelloWorldScene.h	/^    static cocos2d::CCScene* scene();$/;"	p	class:HelloWorld	access:public	signature:()
scene	LoadingScene.cpp	/^CCScene* LoadingScene::scene()$/;"	f	class:LoadingScene	signature:()
scene	LoadingScene.h	/^    static CCScene* scene();$/;"	p	class:LoadingScene	access:public	signature:()
scene	MenuLayer.cpp	/^CCScene* MenuLayer::scene()$/;"	f	class:MenuLayer	signature:()
scene	MenuLayer.h	/^    static cocos2d::CCScene* scene();$/;"	p	class:MenuLayer	access:public	signature:()
scene	Story.cpp	/^CCScene* StoryWorld::scene() {$/;"	f	class:StoryWorld	signature:()
scene	Story.h	/^  static cocos2d::CCScene* scene();$/;"	p	class:StoryWorld	access:public	signature:()
scene	WebViewScene.cpp	/^CCScene* WebView::scene()$/;"	f	class:WebView	signature:()
scene	WebviewScene.h	/^    static cocos2d::CCScene* scene();$/;"	p	class:WebView	access:public	signature:()
scene	Welcome.cpp	/^CCScene* Welcome::scene() {$/;"	f	class:Welcome	signature:()
scene	Welcome.h	/^    static cocos2d::CCScene* scene();$/;"	p	class:Welcome	access:public	signature:()
scrollBar	GalleryScene.h	/^	void scrollBar(cocos2d::extension::CCTableView* table);  $/;"	p	class:Gallery	access:public	signature:(cocos2d::extension::CCTableView* table)
scrollViewDidScroll	GalleryScene.cpp	/^void Gallery::scrollViewDidScroll(CCScrollView* view){$/;"	f	class:Gallery	signature:(CCScrollView* view)
scrollViewDidScroll	GalleryScene.h	/^	virtual void scrollViewDidScroll(CCScrollView* view);$/;"	p	class:Gallery	access:public	signature:(CCScrollView* view)
scrollViewDidZoom	GalleryScene.cpp	/^void Gallery::scrollViewDidZoom(CCScrollView* view){$/;"	f	class:Gallery	signature:(CCScrollView* view)
scrollViewDidZoom	GalleryScene.h	/^	virtual void scrollViewDidZoom(CCScrollView* view);$/;"	p	class:Gallery	access:public	signature:(CCScrollView* view)
setBloodSlider	Blood.cpp	/^void Blood::setBloodSlider()$/;"	f	class:Blood	signature:()
setBloodSlider	Blood.h	/^    void setBloodSlider();$/;"	p	class:Blood	access:public	signature:()
setButtonPosition	AbilityButton.cpp	/^void AbilityButton::setButtonPosition(CCPoint pos)$/;"	f	class:AbilityButton	signature:(CCPoint pos)
setButtonPosition	AbilityButton.h	/^	void setButtonPosition(CCPoint pos);$/;"	p	class:AbilityButton	access:public	signature:(CCPoint pos)
setController	Controllable.cpp	/^void Controllable::setController( Controller* controller ) {$/;"	f	class:Controllable	signature:( Controller* controller )
setController	Controllable.h	/^    void setController(Controller* controller);$/;"	p	class:Controllable	access:public	signature:(Controller* controller)
setControllerListener	Controller.h	/^    void setControllerListener(ControllerListener* controllerListener);$/;"	p	class:Controller	access:public	signature:(ControllerListener* controllerListener)
setControllerListener	Cotroller.cpp	/^void Controller::setControllerListener( ControllerListener* controllerListener ) {$/;"	f	class:Controller	signature:( ControllerListener* controllerListener )
setCurrentBlood	Blood.cpp	/^void Blood::setCurrentBlood(float currentHp)$/;"	f	class:Blood	signature:(float currentHp)
setCurrentBlood	Blood.h	/^	void setCurrentBlood(float currentHp);$/;"	p	class:Blood	access:public	signature:(float currentHp)
setFaceDirection	HumanEntity.cpp	/^void HumanEntity::setFaceDirection(int dirc)$/;"	f	class:HumanEntity	signature:(int dirc)
setFaceDirection	HumanEntity.h	/^	virtual void setFaceDirection(int dir);$/;"	p	class:HumanEntity	access:public	signature:(int dir)
setFireParticle	Particles.cpp	/^void Particles::setFireParticle()$/;"	f	class:Particles	signature:()
setFireParticle	Particles.h	/^	void setFireParticle();$/;"	p	class:Particles	access:public	signature:()
setGameStartPos	Map.cpp	/^void Map::setGameStartPos()$/;"	f	class:Map	signature:()
setGameStartPos	Map.h	/^	void setGameStartPos();$/;"	p	class:Map	access:public	signature:()
setHero	Menu.cpp	/^void Menu::setHero(Hero* hero)$/;"	f	class:Menu	signature:(Hero* hero)
setHero	Menu.h	/^	void setHero(Hero* hero);$/;"	p	class:Menu	access:public	signature:(Hero* hero)
setID	HumanEntity.cpp	/^void HumanEntity::setID(int id)$/;"	f	class:HumanEntity	signature:(int id)
setID	HumanEntity.h	/^	void setID(int id);$/;"	p	class:HumanEntity	access:public	signature:(int id)
setMap	ControlPanel.cpp	/^void ControlPanel::setMap(Map* map)$/;"	f	class:ControlPanel	signature:(Map* map)
setMap	ControlPanel.h	/^	void setMap(Map* map);$/;"	p	class:ControlPanel	access:public	signature:(Map* map)
setMonster	Monster.cpp	/^void Monster::setMonster(int monType)$/;"	f	class:Monster	signature:(int monType)
setMonster	Monster.h	/^	void setMonster(int monType);$/;"	p	class:Monster	access:public	signature:(int monType)
setMonsterType	CombatScene.cpp	/^void Combat::setMonsterType(int monsterType)$/;"	f	class:Combat	signature:(int monsterType)
setMonsterType	CombatScene.h	/^	void setMonsterType(int monsterType);$/;"	p	class:Combat	access:public	signature:(int monsterType)
setParticleDuration	Particles.cpp	/^void Particles::setParticleDuration(float dt)$/;"	f	class:Particles	signature:(float dt)
setParticleDuration	Particles.h	/^	void setParticleDuration(float dt);$/;"	p	class:Particles	access:public	signature:(float dt)
setParticleLife	Particles.cpp	/^void Particles::setParticleLife(float dt)$/;"	f	class:Particles	signature:(float dt)
setParticleLife	Particles.h	/^	void setParticleLife(float dt);$/;"	p	class:Particles	access:public	signature:(float dt)
setPlayer	CPlayer.cpp	/^void CPlayer::setPlayer()$/;"	f	class:CPlayer	signature:()
setPlayer	CPlayer.h	/^	void setPlayer();$/;"	p	class:CPlayer	access:public	signature:()
setPointers	ButtonA.cpp	/^void ButtonA::setPointers(Hero* hero,DiaWindow* diawindow,BigWindow* bigwindow)$/;"	f	class:ButtonA	signature:(Hero* hero,DiaWindow* diawindow,BigWindow* bigwindow)
setPointers	ButtonA.h	/^	void setPointers(Hero* hero,DiaWindow* diawindow,BigWindow* bigwindow);$/;"	p	class:ButtonA	access:public	signature:(Hero* hero,DiaWindow* diawindow,BigWindow* bigwindow)
setPointers	TouchScreen.cpp	/^void TouchScreen::setPointers(Hero* hero,Button* buttonA, Button* dirButton)$/;"	f	class:TouchScreen	signature:(Hero* hero,Button* buttonA, Button* dirButton)
setPointers	TouchScreen.h	/^	void setPointers(Hero* hero,Button* buttonA, Button* dirButton);$/;"	p	class:TouchScreen	access:public	signature:(Hero* hero,Button* buttonA, Button* dirButton)
setRoute	WalkingMan.cpp	/^void WalkingMan::setRoute(std::vector<CCPoint> route)$/;"	f	class:WalkingMan	signature:(std::vector<CCPoint> route)
setRoute	WalkingMan.h	/^    void setRoute(std::vector<CCPoint> route);$/;"	p	class:WalkingMan	access:public	signature:(std::vector<CCPoint> route)
setSignal	CombatScene.cpp	/^void Combat::setSignal()$/;"	f	class:Combat	signature:()
setSignal	CombatScene.h	/^	void setSignal();$/;"	p	class:Combat	access:public	signature:()
setSliderPosition	Blood.cpp	/^void Blood::setSliderPosition(CCPoint pos)$/;"	f	class:Blood	signature:(CCPoint pos)
setSliderPosition	Blood.h	/^	void setSliderPosition(CCPoint pos);$/;"	p	class:Blood	access:public	signature:(CCPoint pos)
setTotalBlood	Blood.cpp	/^void Blood::setTotalBlood(float total)$/;"	f	class:Blood	signature:(float total)
setTotalBlood	Blood.h	/^	void setTotalBlood(float total);$/;"	p	class:Blood	access:public	signature:(float total)
setWaterParticle	Particles.cpp	/^void Particles::setWaterParticle()$/;"	f	class:Particles	signature:()
setWaterParticle	Particles.h	/^	void setWaterParticle();$/;"	p	class:Particles	access:public	signature:()
setWoodParticle	Particles.cpp	/^void Particles::setWoodParticle()$/;"	f	class:Particles	signature:()
setWoodParticle	Particles.h	/^	void setWoodParticle();$/;"	p	class:Particles	access:public	signature:()
shadow	GlobalRes.h	/^	HumanEntity* shadow;$/;"	m	class:GlobalRes	access:public
shadow	ShadowingMan.cpp	/^void ShadowingMan::shadow(CCObject* heroPos)$/;"	f	class:ShadowingMan	signature:(CCObject* heroPos)
shadow	ShadowingMan.h	/^	void shadow(CCObject* direction);$/;"	p	class:ShadowingMan	access:public	signature:(CCObject* direction)
sharedCsvUtil	CsvUtil.cpp	/^CsvUtil* CsvUtil::sharedCsvUtil(){$/;"	f	class:CsvUtil	signature:()
sharedCsvUtil	CsvUtil.h	/^    static CsvUtil* sharedCsvUtil();$/;"	p	class:CsvUtil	access:public	signature:()
sharedFileLoadUtil	FileLoadUtil.cpp	/^FileLoadUtil* FileLoadUtil::sharedFileLoadUtil() {$/;"	f	class:FileLoadUtil	signature:()
sharedFileLoadUtil	FileLoadUtil.h	/^    static FileLoadUtil* sharedFileLoadUtil();$/;"	p	class:FileLoadUtil	access:public	signature:()
sharedStrUtil	StringUtil.cpp	/^StringUtil* StringUtil::sharedStrUtil(){$/;"	f	class:StringUtil	signature:()
sharedStrUtil	StringUtil.h	/^    static StringUtil* sharedStrUtil();$/;"	p	class:StringUtil	access:public	signature:()
show	Menu.cpp	/^void Menu::show(CCObject* sender)$/;"	f	class:Menu	signature:(CCObject* sender)
show	Menu.h	/^	void show(CCObject* sender);$/;"	p	class:Menu	access:private	signature:(CCObject* sender)
showPoint	GpsScene.cpp	/^void Gps::showPoint(int num)$/;"	f	class:Gps	signature:(int num)
showPoint	GpsScene.h	/^	void showPoint(int num);$/;"	p	class:Gps	access:public	signature:(int num)
showPosName	GpsScene.cpp	/^void Gps::showPosName(int num)$/;"	f	class:Gps	signature:(int num)
showPosName	GpsScene.h	/^	void showPosName(int num);$/;"	p	class:Gps	access:public	signature:(int num)
showTouchPoint	GpsScene.cpp	/^void Gps::showTouchPoint(int num)$/;"	f	class:Gps	signature:(int num)
showTouchPoint	GpsScene.h	/^	void showTouchPoint(int num);$/;"	p	class:Gps	access:public	signature:(int num)
showTouchPosName	GpsScene.cpp	/^void Gps::showTouchPosName(int num,CCPoint pos)$/;"	f	class:Gps	signature:(int num,CCPoint pos)
showTouchPosName	GpsScene.h	/^	void showTouchPosName(int num,CCPoint pos);$/;"	p	class:Gps	access:public	signature:(int num,CCPoint pos)
speAtt	CombatUnit.h	/^   int speAtt;$/;"	m	class:CombatUnit	access:public
speDef	CombatUnit.h	/^   int speDef;$/;"	m	class:CombatUnit	access:public
specialPartSwitchCase	Story.cpp	/^void StoryWorld::specialPartSwitchCase(int code) {$/;"	f	class:StoryWorld	signature:(int code)
specialPartSwitchCase	Story.h	/^  void specialPartSwitchCase(int code);$/;"	p	class:StoryWorld	access:protected	signature:(int code)
speed	CombatUnit.h	/^   int speed;$/;"	m	class:CombatUnit	access:public
speed	SuperPower.h	/^	float speed;$/;"	m	class:SuperPower	access:public
split	PlayReader.cpp	/^void PlayReader::split(const char * str,const char * deli, vector<string> *list) {$/;"	f	class:PlayReader	signature:(const char * str,const char * deli, vector<string> *list)
split	PlayReader.h	/^  void split(const char * str,const char * deli, vector<string> *list);$/;"	p	class:PlayReader	access:protected	signature:(const char * str,const char * deli, vector<string> *list)
split	RcdUtil.cpp	/^CCArray* RcdUtil::split(CCString* line, char delim)$/;"	f	class:RcdUtil	signature:(CCString* line, char delim)
split	RcdUtil.h	/^	static CCArray* split(CCString* line, char delim);$/;"	p	class:RcdUtil	access:public	signature:(CCString* line, char delim)
split	StringUtil.cpp	/^CCArray* StringUtil::split( const char* srcStr, const char* sSep ){$/;"	f	class:StringUtil	signature:( const char* srcStr, const char* sSep )
split	StringUtil.h	/^    CCArray* split(const char* srcStr, const char* sSep);$/;"	p	class:StringUtil	access:public	signature:(const char* srcStr, const char* sSep)
sprite	Entity.h	/^    CCSprite* sprite;$/;"	m	class:Entity	access:protected
stability	Ability.h	/^	float stability;$/;"	m	class:Ability	access:public
standPos	MapState.h	/^   int standPos;$/;"	m	class:MapState	access:public
start	EventLoader.cpp	/^CCArray* EventLoader::start(const char* sFilePath)$/;"	f	class:EventLoader	signature:(const char* sFilePath)
start	EventLoader.h	/^   static CCArray* start(const char* sFilePath);$/;"	p	class:EventLoader	access:public	signature:(const char* sFilePath)
start	VectorLoader.cpp	/^std::vector<CCPoint> VectorLoader::start(CCArray* intArray)$/;"	f	class:VectorLoader	signature:(CCArray* intArray)
start	VectorLoader.h	/^    static std::vector<CCPoint> start(CCArray* intArray);$/;"	p	class:VectorLoader	access:public	signature:(CCArray* intArray)
state	Welcome.h	/^	int state;$/;"	m	class:Welcome	access:private
stealth	SuperPower.h	/^	bool stealth;$/;"	m	class:SuperPower	access:public
stepDown	Hero.cpp	/^void Hero::stepDown()$/;"	f	class:Hero	signature:()
stepDown	Hero.h	/^    void stepDown();$/;"	p	class:Hero	access:public	signature:()
stepUp	Hero.cpp	/^void Hero::stepUp()$/;"	f	class:Hero	signature:()
stepUp	Hero.h	/^    void stepUp();$/;"	p	class:Hero	access:private	signature:()
storyCnt	MapState.h	/^   int storyCnt;$/;"	m	class:MapState	access:public
strtok_r	strtok_r.c	/^char *strtok_r(char *s, const char *delim, char **save_ptr) {  $/;"	f	signature:(char *s, const char *delim, char **save_ptr)
strtok_r	strtok_r.c	20;"	d	file:
superPower	GlobalState.h	/^    SuperPower* superPower;$/;"	m	class:GlobalState	access:public
surf	SuperPower.h	/^	bool surf;$/;"	m	class:SuperPower	access:public
tChoice	Story.h	/^  enum allChoice {fChoice = 10, sChoice, tChoice};$/;"	e	enum:StoryWorld::allChoice
tableCellAtIndex	GalleryScene.cpp	/^CCTableViewCell* Gallery::tableCellAtIndex(CCTableView *table, unsigned int idx)$/;"	f	class:Gallery	signature:(CCTableView *table, unsigned int idx)
tableCellAtIndex	GalleryScene.h	/^	virtual cocos2d::extension::CCTableViewCell* tableCellAtIndex(cocos2d::extension::CCTableView *table, unsigned int idx);  $/;"	p	class:Gallery	access:public	signature:(cocos2d::extension::CCTableView *table, unsigned int idx)
tableCellHighlight	GalleryScene.cpp	/^void Gallery::tableCellHighlight(CCTableView *table, CCTableViewCell *cell)$/;"	f	class:Gallery	signature:(CCTableView *table, CCTableViewCell *cell)
tableCellHighlight	GalleryScene.h	/^	virtual void tableCellHighlight(cocos2d::extension::CCTableView* table, cocos2d::extension::CCTableViewCell* cell);  $/;"	p	class:Gallery	access:public	signature:(cocos2d::extension::CCTableView* table, cocos2d::extension::CCTableViewCell* cell)
tableCellTouched	GalleryScene.cpp	/^void Gallery::tableCellTouched(CCTableView *table, CCTableViewCell *cell)$/;"	f	class:Gallery	signature:(CCTableView *table, CCTableViewCell *cell)
tableCellTouched	GalleryScene.h	/^	virtual void tableCellTouched(cocos2d::extension::CCTableView* table, cocos2d::extension::CCTableViewCell* cell);  $/;"	p	class:Gallery	access:public	signature:(cocos2d::extension::CCTableView* table, cocos2d::extension::CCTableViewCell* cell)
tableCellUnhighlight	GalleryScene.cpp	/^void Gallery::tableCellUnhighlight(CCTableView *table, CCTableViewCell *cell)$/;"	f	class:Gallery	signature:(CCTableView *table, CCTableViewCell *cell)
tableCellUnhighlight	GalleryScene.h	/^	virtual void tableCellUnhighlight(cocos2d::extension::CCTableView* table, cocos2d::extension::CCTableViewCell* cell);  $/;"	p	class:Gallery	access:public	signature:(cocos2d::extension::CCTableView* table, cocos2d::extension::CCTableViewCell* cell)
tag	AbilityButton.h	/^	int tag;$/;"	m	class:AbilityButton	access:public
tagForButton	AbilityButton.h	/^}tagForButton;$/;"	t	typeref:enum:__anon1
takeTile	Emap.cpp	/^void Emap::takeTile(CCPoint coord, int eventType)$/;"	f	class:Emap	signature:(CCPoint coord, int eventType)
takeTile	Emap.h	/^	void takeTile(CCPoint coord, int eventType);$/;"	p	class:Emap	access:public	signature:(CCPoint coord, int eventType)
teleport	SuperPower.h	/^	bool teleport;$/;"	m	class:SuperPower	access:public
teleportTo	TouchScreen.cpp	/^void TouchScreen::teleportTo(CCSet* pTouch, CCEvent *pEvent)$/;"	f	class:TouchScreen	signature:(CCSet* pTouch, CCEvent *pEvent)
teleportTo	TouchScreen.h	/^	void teleportTo(CCSet* pTouch, CCEvent *pEvent);$/;"	p	class:TouchScreen	access:private	signature:(CCSet* pTouch, CCEvent *pEvent)
theFinalChoiceHandler	Story.cpp	/^void StoryWorld::theFinalChoiceHandler(CCObject *sender) {$/;"	f	class:StoryWorld	signature:(CCObject *sender)
theFinalChoiceHandler	Story.h	/^  void theFinalChoiceHandler(CCObject *sender);$/;"	p	class:StoryWorld	access:protected	signature:(CCObject *sender)
tileAt	Emap.cpp	/^int Emap::tileAt(CCPoint coord)$/;"	f	class:Emap	signature:(CCPoint coord)
tileAt	Emap.h	/^	int tileAt(CCPoint coord);$/;"	p	class:Emap	access:public	signature:(CCPoint coord)
tileCoordFromPosition	Map.cpp	/^CCPoint Map::tileCoordFromPosition(CCPoint position)$/;"	f	class:Map	signature:(CCPoint position)
tileCoordFromPosition	Map.h	/^	CCPoint tileCoordFromPosition(CCPoint pos);$/;"	p	class:Map	access:public	signature:(CCPoint pos)
timeInitiate	TimeUtil.cpp	/^void TimeUtil::timeInitiate()$/;"	f	class:TimeUtil	signature:()
timeInitiate	TimeUtil.h	/^	static void timeInitiate();$/;"	p	class:TimeUtil	access:public	signature:()
totalBlood	Player.h	/^		int totalBlood;$/;"	m	class:Player	access:public
touchDistance	GpsScene.cpp	/^int Gps::touchDistance(CCPoint touchPos)$/;"	f	class:Gps	signature:(CCPoint touchPos)
touchDistance	GpsScene.h	/^	int touchDistance(CCPoint touchPos);$/;"	p	class:Gps	access:public	signature:(CCPoint touchPos)
touchDistance	GpsScene.h	/^	int touchDistance(double touchx,double touchy);$/;"	p	class:Gps	access:public	signature:(double touchx,double touchy)
touchEnded	Hero.h	/^    int touchEnded;$/;"	m	class:Hero	access:private
touchPoint	GpsScene.h	/^	CCSprite* touchPoint;$/;"	m	class:Gps	access:public
touchScreen	ControlPanel.h	/^	TouchScreen* touchScreen;$/;"	m	class:ControlPanel	access:public
trigEvent	ButtonA.cpp	/^void ButtonA::trigEvent()$/;"	f	class:ButtonA	signature:()
trigEvent	ButtonA.h	/^	void trigEvent();$/;"	p	class:ButtonA	access:private	signature:()
ttf	LoadingScene.h	/^	CCLabelTTF* ttf;$/;"	m	class:LoadingScene	access:private
type	Ability.h	/^	int type;$/;"	m	class:HurtAbl	access:public
type	Event.h	/^	int type;$/;"	m	class:Event	access:public
type	Player.h	/^    int type;$/;"	m	class:Player	access:public
update	CombatScene.cpp	/^void Combat::update(float delta)$/;"	f	class:Combat	signature:(float delta)
update	CombatScene.h	/^	virtual void update(float delta);$/;"	p	class:Combat	access:public	signature:(float delta)
updateBlood	CombatScene.cpp	/^void Combat::updateBlood(int winnerNum,int damage)$/;"	f	class:Combat	signature:(int winnerNum,int damage)
updateBlood	CombatScene.h	/^	void updateBlood(int winnerNum,int damage);$/;"	p	class:Combat	access:public	signature:(int winnerNum,int damage)
updateDamage	AbilityButton.cpp	/^void AbilityButton::updateDamage(int level)$/;"	f	class:AbilityButton	signature:(int level)
updateDamage	AbilityButton.h	/^	void updateDamage(int level);$/;"	p	class:AbilityButton	access:public	signature:(int level)
updateView	GpsScene.cpp	/^void Gps::updateView(float dt)$/;"	f	class:Gps	signature:(float dt)
updateView	GpsScene.h	/^	void updateView(float dt);$/;"	p	class:Gps	access:public	signature:(float dt)
walk	WalkingMan.cpp	/^void WalkingMan::walk(CCArray* theRoute)$/;"	f	class:WalkingMan	signature:(CCArray* theRoute)
walk	WalkingMan.h	/^    void walk(CCArray* theRoute);$/;"	p	class:WalkingMan	access:public	signature:(CCArray* theRoute)
walkAnimations	WalkingMan.h	/^    cocos2d::CCAnimation** walkAnimations;$/;"	m	class:WalkingMan	access:public
walkEnd	Hero.cpp	/^void Hero::walkEnd()$/;"	f	class:Hero	signature:()
walkEnd	Hero.h	/^    void walkEnd();$/;"	p	class:Hero	access:private	signature:()
water	AbilityButton.h	/^	water,$/;"	e	enum:__anon1
waterBtn	AbilityButton.h	/^	CCControlButton* waterBtn; $/;"	m	class:AbilityButton	access:private
waterDamage	AbilityButton.h	/^	int fireDamage,waterDamage,woodDamage;$/;"	m	class:AbilityButton	access:public
waterTouchUpOutside	AbilityButton.cpp	/^void AbilityButton::waterTouchUpOutside(CCObject* pSender, CCControlEvent event)$/;"	f	class:AbilityButton	signature:(CCObject* pSender, CCControlEvent event)
waterTouchUpOutside	AbilityButton.h	/^	void waterTouchUpOutside(CCObject* pSender, CCControlEvent event);$/;"	p	class:AbilityButton	access:public	signature:(CCObject* pSender, CCControlEvent event)
watertitle	AbilityButton.h	/^	CCLabelTTF *watertitle;$/;"	m	class:AbilityButton	access:private
wholeMap	GpsScene.h	/^	CCSprite* wholeMap;$/;"	m	class:Gps	access:public
winLabel	CombatScene.h	/^	CCLabelTTF* winLabel;$/;"	m	class:Combat	access:private
winnerNum	CombatScene.h	/^	int winnerNum;$/;"	m	class:Combat	access:private
wood	AbilityButton.h	/^	wood,$/;"	e	enum:__anon1
woodBtn	AbilityButton.h	/^	CCControlButton* woodBtn; $/;"	m	class:AbilityButton	access:private
woodDamage	AbilityButton.h	/^	int fireDamage,waterDamage,woodDamage;$/;"	m	class:AbilityButton	access:public
woodTouchUpOutside	AbilityButton.cpp	/^void AbilityButton::woodTouchUpOutside(CCObject* pSender, CCControlEvent event)$/;"	f	class:AbilityButton	signature:(CCObject* pSender, CCControlEvent event)
woodTouchUpOutside	AbilityButton.h	/^	void woodTouchUpOutside(CCObject* pSender, CCControlEvent event);$/;"	p	class:AbilityButton	access:public	signature:(CCObject* pSender, CCControlEvent event)
woodtitle	AbilityButton.h	/^	CCLabelTTF *woodtitle;$/;"	m	class:AbilityButton	access:private
zoomStroke	TouchScreen.cpp	/^void TouchScreen::zoomStroke(CCSet* pTouches, CCEvent *pEvent)$/;"	f	class:TouchScreen	signature:(CCSet* pTouches, CCEvent *pEvent)
zoomStroke	TouchScreen.h	/^	void zoomStroke(CCSet* pTouch, CCEvent *pEvent);$/;"	p	class:TouchScreen	access:private	signature:(CCSet* pTouch, CCEvent *pEvent)
~AppDelegate	AppDelegate.cpp	/^AppDelegate::~AppDelegate() $/;"	f	class:AppDelegate	signature:()
~AppDelegate	AppDelegate.h	/^    virtual ~AppDelegate();$/;"	p	class:AppDelegate	access:public	signature:()
~Emap	Emap.cpp	/^Emap::~Emap()$/;"	f	class:Emap	signature:()
~Emap	Emap.h	/^	~Emap();$/;"	p	class:Emap	access:public	signature:()
~Event	Event.cpp	/^Event::~Event()$/;"	f	class:Event	signature:()
~Event	Event.h	/^	~Event();$/;"	p	class:Event	access:public	signature:()
~EventManager	EventManager.cpp	/^EventManager::~EventManager()$/;"	f	class:EventManager	signature:()
~EventManager	EventManager.h	/^    ~EventManager();$/;"	p	class:EventManager	access:public	signature:()
~GlobalState	GlobalState.cpp	/^GlobalState::~GlobalState()$/;"	f	class:GlobalState	signature:()
~GlobalState	GlobalState.h	/^    ~GlobalState();$/;"	p	class:GlobalState	access:public	signature:()
~Map	Map.cpp	/^Map::~Map()$/;"	f	class:Map	signature:()
~Map	Map.h	/^	~Map();$/;"	p	class:Map	access:public	signature:()
~ShadowingMan	ShadowingMan.cpp	/^ShadowingMan::~ShadowingMan()$/;"	f	class:ShadowingMan	signature:()
~ShadowingMan	ShadowingMan.h	/^	~ShadowingMan();$/;"	p	class:ShadowingMan	access:public	signature:()
